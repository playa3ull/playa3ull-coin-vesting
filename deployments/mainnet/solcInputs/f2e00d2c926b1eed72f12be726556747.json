{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/avalanche/interfaces/IAllowList.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAllowList {\r\n  // Set [addr] to have the admin role over the precompile\r\n  function setAdmin(address addr) external;\r\n\r\n  // Set [addr] to be enabled on the precompile contract.\r\n  function setEnabled(address addr) external;\r\n\r\n  // Set [addr] to have no role the precompile contract.\r\n  function setNone(address addr) external;\r\n\r\n  // Read the status of [addr].\r\n  function readAllowList(address addr) external view returns (uint256 role);\r\n}"
    },
    "contracts/avalanche/interfaces/INativeMinter.sol": {
      "content": "// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\r\n// See the file LICENSE for licensing terms.\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./IAllowList.sol\";\r\n\r\ninterface INativeMinter is IAllowList {\r\n\r\n  /**\r\n   * @dev Reverts when trying to mint zero Tokens\r\n   */\r\n  error CannotMintZero();\r\n\r\n  /** \r\n   * @dev Reverts when trying to mint to the zero address\r\n   */\r\n  error ZeroAddress();\r\n\r\n  // Mint [amount] number of native coins and send to [addr]\r\n  function mintNativeCoin(address addr, uint256 amount) external;\r\n}"
    },
    "contracts/core/interfaces/INode.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLNode\r\n * @author Sam (PLAYA3ULL)\r\n * @notice IPLAYA3ULLNFT contains all external functions and\r\n *         structs for the PLAYA3ULL Node.\r\n */\r\n\r\ninterface IPLAYA3ULLNode {\r\n    struct NodeOwner {\r\n        /**\r\n         * @notice Number of nodes owned\r\n         */\r\n        uint256 NumNodes;\r\n        /**\r\n         * @notice Total claimed rewards, for new nodes this is the rewards that _would_ have been claimed given node existed at contract inception\r\n         */\r\n        uint256 ClaimedRewards;\r\n    }\r\n\r\n    function mint(address toAddress, uint256 amount) external;\r\n\r\n    function pendingRewards(address _owner) external view returns (uint256);\r\n\r\n    function claimRewards() external;\r\n\r\n    function claimFor(address account) external;\r\n\r\n    function mintPrice(uint256 amount) external view returns (uint256 _price);\r\n}\r\n"
    },
    "contracts/core/interfaces/INodeEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\ninterface IPLAYA3ULLNodeEventsAndErrors {\r\n    /// @notice         A node was minted\r\n    /// @param owner    The new owner of the new node\r\n    /// @param amount   Number of nodes minted\r\n    event NodesMinted(address owner, uint256 amount);\r\n\r\n    /// @notice         A node was transferred\r\n    /// @param from     Where the node was transfered from\r\n    /// @param to       Where the node was transferred to\r\n    /// @param nodeId   The node that was transferred\r\n    event NodeTransferred(address from, address to, uint256 nodeId);\r\n\r\n    /// @notice                     The rewards pool was updated\r\n    /// @param numEpochsProcessed   The nunmber of epochs since the last pool update\r\n    /// @param amountRewarded       The amount of new rewards issues\r\n    event PoolUpdated(uint256 numEpochsProcessed, uint256 amountRewarded);\r\n\r\n    /// @notice                 Rewards claimed for wallet\r\n    /// @param owner            Owner that claimed the rewards\r\n    /// @param rewardsClaimed   Number of rewards claimed\r\n    event RewardsClaimed(address owner, uint256 rewardsClaimed);\r\n\r\n    /// @notice             A node has been disqualified from earning rewards\r\n    /// @param owner        The node owner that has been disqualified\r\n    /// @param numNodes     Number of nodes disqualified for the owner\r\n    event NodeDisqualified(address owner, uint256 numNodes);\r\n\r\n    /// @notice             The price of a node has been updated\r\n    /// @param price        The updated price of a node\r\n    event PriceChanged(uint256 price);\r\n\r\n    /// @notice                         Emitted when reward adjustment is made from disqualifying nodes\r\n    /// @param rewardsPerNodeAdjusted   Number of rewards removed per disqualified node\r\n    /// @param numNodesDisqualified     Number of nodes that were disqualified\r\n    /// @param numQualifiedNodes        Number of qualified nodes (totalSupply - numDisqualified)\r\n    event RewardsAdjustedDisqualified(\r\n        uint256 rewardsPerNodeAdjusted,\r\n        uint256 numNodesDisqualified,\r\n        uint256 numQualifiedNodes\r\n    );\r\n\r\n    /// @notice                 Emitted when an address' minter access is toggled\r\n    /// @param minterAddress    The address of the minter\r\n    /// @param canMint          Whether the toggled address can mint\r\n    event AdminMinterToggled(address minterAddress, bool canMint);\r\n\r\n    /// @notice                 Emitted when an address' disqualifier access is toggled\r\n    /// @param disqualifierAddress    The address of the disqualifier\r\n    /// @param canDisqualify          Whether the toggled address can disqualify\r\n    event AdminDisqualifierToggled(\r\n        address disqualifierAddress,\r\n        bool canDisqualify\r\n    );\r\n\r\n    /**\r\n     * @dev Reverts when all nodes are not sold\r\n     */\r\n    error AllNodesNotSold();\r\n\r\n    /**\r\n     * @dev Reverts when user is not disqualifier\r\n     */\r\n    error NotDisqualifier();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to mint 0 nodes\r\n     */\r\n    error CannotMintZero();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to mint more than the single transaction limit\r\n     */\r\n    error CannotMintMoreThanLimit();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to ming more than the cap\r\n     */\r\n    error CannotMintMoreThanCap();\r\n\r\n    /**\r\n     * @dev Reverts if the owner has no nodes\r\n     */\r\n    error NoNodes();\r\n\r\n    /**\r\n     * @dev Reverts if the new value is less than the previous value\r\n     */\r\n    error NewLessThanPrevious();\r\n\r\n    /**\r\n     * @dev Reverts if the array lengths are not equal\r\n     */\r\n    error ArrayLengthNotEqual();\r\n\r\n    /**\r\n     * @dev Reverts if ZeroAddress\r\n     */\r\n    error ZeroAddress();\r\n\r\n    /**\r\n     * @dev Reverts if ZeroNumber\r\n     */\r\n    error AmountZero();\r\n\r\n    /**\r\n     * @dev Reverts if the contract is already initialized\r\n     */\r\n    error AlreadyInitialized();\r\n\r\n    /**\r\n     * @dev Reverts if the contract is not initialized\r\n     */\r\n    error NotInitialized();\r\n}\r\n"
    },
    "contracts/core/Node.sol": {
      "content": "pragma solidity 0.8.17;\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"../avalanche/interfaces/INativeMinter.sol\";\r\n\r\nimport \"./interfaces/INode.sol\";\r\nimport \"./interfaces/INodeEventsAndErrors.sol\";\r\n\r\n///\r\n/// @title PLAYA3ULL Games Node NFT and Rewards Contract\r\n/// @author Sam (PLAYA3ULL), Jourdan (PLAYA3ULL), Jeeva (Helix)\r\n///\r\ncontract PLAYA3ULLNode is\r\n    ERC721,\r\n    Ownable,\r\n    IPLAYA3ULLNodeEventsAndErrors,\r\n    IPLAYA3ULLNode,\r\n    ReentrancyGuard\r\n{\r\n    /// @dev Avalanche Subnet native minter precompile - https://docs.avax.network/subnets/customize-a-subnet#minting-native-coins\r\n    INativeMinter immutable nativeMinter;\r\n\r\n    /// @notice Node holdings mapped to owner\r\n    mapping(address => NodeOwner) public holdingsOf;\r\n\r\n    /// @notice Mapping of addresses that are allowed to mint nodes\r\n    mapping(address => bool) public adminMinters;\r\n\r\n    /// @notice Mapping of disqualified rewards for a given address\r\n    mapping(address => uint256) public disqualifiedRewards;\r\n\r\n    /// @notice Mapping of claimed additional rewards for a given address\r\n    mapping(address => uint256) public claimedAdditionalRewards;\r\n\r\n    /// @notice Mapping of addresses that are allowed to disqualify nodes\r\n    mapping(address => bool) public disqualifiers;\r\n\r\n    /// @notice Whether the node reward system is initialized\r\n    bool public isInitialized;\r\n\r\n    /// @notice Additional rewards per node\r\n    uint256 public additionalRewardsPerNode;\r\n\r\n    /// @notice Epoch size in seconds\r\n    uint256 public immutable epochSizeSeconds;\r\n\r\n    /// @notice Rewards earnt per epoch\r\n    uint256 public rewardPerEpoch;\r\n\r\n    /// @notice Rewards accumlated per node since contract creation / node start\r\n    uint256 public lifetimeAccRewardsPerNode;\r\n\r\n    /// @notice The time up to which the rewards were last calculated from `updatePool()`\r\n    uint256 public lastRewardTimestamp;\r\n\r\n    /// @notice Total nodes currently in circulation\r\n    uint256 public totalSupply;\r\n\r\n    /// @notice Maximum number of nodes, constant set to 50,000 as per whitepaper\r\n    uint256 public immutable cap;\r\n\r\n    /// @notice Maximum number of nodes purchased at once, constant set to 25 per transaction\r\n    uint256 public constant mintMax = 25;\r\n\r\n    /// @notice How many nodes sold to increase the bracket\r\n    uint256 public constant bracketSize = 100;\r\n\r\n    /// @notice Current node price\r\n    uint256 public price;\r\n\r\n    /// @notice Price increase per `bracketSize` sold\r\n    uint256 public priceIncrease;\r\n\r\n    /// @notice Next price increase amount\r\n    uint256 public nextPriceIncrease;\r\n\r\n    /// @notice Base token URL to prefit the `tokenURI()`\r\n    string public baseTokenURI;\r\n\r\n    /// @dev Modifier for only allowing set addresses to mint\r\n    ///      nodes\r\n    modifier onlyMinter() {\r\n        require(adminMinters[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier for only allowing set addresses to\r\n    ///      disqualify nodes\r\n    modifier onlyDisqualifier() {\r\n        if (disqualifiers[msg.sender]) {\r\n            _;\r\n        } else {\r\n            revert NotDisqualifier();\r\n        }\r\n    }\r\n\r\n    /// @dev Modifier for verifying that the node reward\r\n    ///      system is initialized\r\n    modifier requireInitialized() {\r\n        if (isInitialized) {\r\n            _;\r\n        } else {\r\n            revert NotInitialized();\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        uint256 _epochSizeSeconds,\r\n        uint256 _rewardPerEpoch,\r\n        INativeMinter _nativeMinter,\r\n        uint256 _cap\r\n    ) ERC721(\"PLAYA3ULL NODE\", \"3ULL NODE\") {\r\n        _assertZeroAddress(address(_nativeMinter));\r\n        _assertNotZero(_epochSizeSeconds);\r\n        _assertNotZero(_rewardPerEpoch);\r\n        _assertNotZero(_cap);\r\n\r\n        lastRewardTimestamp = block.timestamp;\r\n        nativeMinter = _nativeMinter;\r\n\r\n        epochSizeSeconds = _epochSizeSeconds;\r\n        rewardPerEpoch = _rewardPerEpoch;\r\n\r\n        cap = _cap;\r\n\r\n        priceIncrease = 100 * (10 ** 6); // 100 USD\r\n        price = 100 * (10 ** 6); // Starting price of 100 USD\r\n        nextPriceIncrease = 100;\r\n    }\r\n\r\n    ///\r\n    /// @notice Ensures all nodes have been sold prior to transfer, and performs transfer logic (rewards need to be claimed before transfer)\r\n    ///\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) return;\r\n\r\n        _assertAllNodesSold();\r\n\r\n        NodeOwner storage currentOwner = holdingsOf[from];\r\n        NodeOwner storage newOwner = holdingsOf[to];\r\n\r\n        // Rewards need to be claimed prior to transfer otherwise they are lost\r\n        claimFor(from);\r\n\r\n        currentOwner.NumNodes--;\r\n        currentOwner.ClaimedRewards -= lifetimeAccRewardsPerNode;\r\n\r\n        newOwner.NumNodes++;\r\n        newOwner.ClaimedRewards += lifetimeAccRewardsPerNode;\r\n\r\n        emit NodeTransferred(from, to, tokenId);\r\n    }\r\n\r\n    ///\r\n    /// @notice Caculates the current owners pending rewards\r\n    /// @dev The pending rewards will not show correctly, unless `updatePool()` has been called\r\n    /// @param _owner The owner to return the pending rewards for\r\n    /// @return Total pending rewards for a given node owner\r\n    ///\r\n    function pendingRewards(address _owner) public view returns (uint256) {\r\n        NodeOwner storage nodeOwner = holdingsOf[_owner];\r\n\r\n        uint256 _lifetimeScaledAccRewardsPerNode = _calculateScaledRewardsPerNode();\r\n\r\n        // Prevent underflow\r\n        if (\r\n            nodeOwner.NumNodes * _lifetimeScaledAccRewardsPerNode <\r\n            nodeOwner.ClaimedRewards\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardsPending = (nodeOwner.NumNodes *\r\n            _lifetimeScaledAccRewardsPerNode) - nodeOwner.ClaimedRewards;\r\n\r\n        uint256 additionalRewards = (additionalRewardsPerNode *\r\n            nodeOwner.NumNodes) - claimedAdditionalRewards[_owner];\r\n\r\n        if (rewardsPending + additionalRewards < disqualifiedRewards[_owner]) {\r\n            return 0;\r\n        }\r\n\r\n        return\r\n            (rewardsPending + additionalRewards) - disqualifiedRewards[_owner];\r\n    }\r\n\r\n    ///\r\n    /// @dev Calculates the current scaled rewards per node\r\n    /// @return _lifetimeScaledAccRewardsPerNode The current scaled rewards per node\r\n    ///\r\n    function _calculateScaledRewardsPerNode() internal view returns (uint256) {\r\n        uint256 _lifetimeScaledAccRewardsPerNode = lifetimeAccRewardsPerNode;\r\n\r\n        if (\r\n            block.timestamp > (lastRewardTimestamp + epochSizeSeconds) &&\r\n            totalSupply != 0\r\n        ) {\r\n            uint256 epochsToReward = (block.timestamp - lastRewardTimestamp) /\r\n                epochSizeSeconds;\r\n            uint256 reward = epochsToReward * rewardPerEpoch;\r\n            _lifetimeScaledAccRewardsPerNode += (reward / totalSupply);\r\n        }\r\n\r\n        return _lifetimeScaledAccRewardsPerNode;\r\n    }\r\n\r\n    ///\r\n    /// @notice Updates the rewards pool\r\n    /// @dev Updates `lastRewardTimestamp` & `lifetimeAccRewardsPerNode` to ensure rewards are updated for current epoch\r\n    ///\r\n    function updatePool() public {\r\n        if (block.timestamp < (lastRewardTimestamp + epochSizeSeconds)) {\r\n            return;\r\n        }\r\n\r\n        uint256 epochsToReward = (block.timestamp - lastRewardTimestamp) /\r\n            epochSizeSeconds;\r\n        lastRewardTimestamp =\r\n            lastRewardTimestamp +\r\n            (epochsToReward * epochSizeSeconds);\r\n\r\n        if (totalSupply == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 totalRewardsForPeriod = epochsToReward * rewardPerEpoch;\r\n        lifetimeAccRewardsPerNode =\r\n            lifetimeAccRewardsPerNode +\r\n            (totalRewardsForPeriod / totalSupply);\r\n\r\n        emit PoolUpdated(epochsToReward, totalRewardsForPeriod);\r\n    }\r\n\r\n    ///\r\n    /// @notice Mints the node to an owner\r\n    /// @param ownerAddress The wallet the node/s are minted to\r\n    /// @param amount Number of nodes to mint\r\n    ///\r\n    function mintFor(address ownerAddress, uint256 amount) private {\r\n        _assertMintAmount(amount);\r\n\r\n        uint256 preTotalSupply = totalSupply;\r\n\r\n        NodeOwner storage owner = holdingsOf[ownerAddress];\r\n\r\n        updatePool();\r\n\r\n        owner.NumNodes += amount;\r\n        totalSupply += amount;\r\n\r\n        if (isInitialized) {\r\n            owner.ClaimedRewards += amount * lifetimeAccRewardsPerNode;\r\n            claimedAdditionalRewards[ownerAddress] +=\r\n                amount *\r\n                additionalRewardsPerNode;\r\n        }\r\n\r\n        if (totalSupply > nextPriceIncrease) {\r\n            nextPriceIncrease += bracketSize;\r\n            price += priceIncrease;\r\n            emit PriceChanged(price);\r\n        }\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            _safeMint(ownerAddress, preTotalSupply + i);\r\n        }\r\n\r\n        emit NodesMinted(ownerAddress, amount);\r\n    }\r\n\r\n    ///\r\n    /// @notice Allows an admin minter to mint a node for an address.\r\n    ///         This is to support cross-chain minting and migration.\r\n    /// @param toAddress The wallet the node(s) are minted to\r\n    /// @param amount The number of nodes that will be minted\r\n    ///\r\n    function mint(address toAddress, uint256 amount) external onlyMinter {\r\n        mintFor(toAddress, amount);\r\n    }\r\n\r\n    ///\r\n    /// @notice Claim rewards helper, to claim for the caller\r\n    ///\r\n    function claimRewards() external {\r\n        claimFor(msg.sender);\r\n    }\r\n\r\n    ///\r\n    /// @notice Claim rewards for a given address\r\n    /// @param account The address to claim rewards for\r\n    ///\r\n    function claimFor(address account) public requireInitialized nonReentrant {\r\n        _assertNodeOwnership(account);\r\n\r\n        NodeOwner storage owner = holdingsOf[account];\r\n\r\n        updatePool();\r\n\r\n        uint256 _lifetimeScaledAccRewardsPerNode = _calculateScaledRewardsPerNode();\r\n        uint256 totalClaimedRewardsScaled = (owner.NumNodes *\r\n            _lifetimeScaledAccRewardsPerNode);\r\n\r\n        uint256 _rewardsClaimed = pendingRewards(account);\r\n\r\n        if (_rewardsClaimed == 0) return;\r\n\r\n        // Update the claimed rewards for the owner\r\n        if (totalClaimedRewardsScaled > owner.ClaimedRewards) {\r\n            owner.ClaimedRewards = totalClaimedRewardsScaled;\r\n        }\r\n\r\n        uint256 additionalRewards = (additionalRewardsPerNode *\r\n            owner.NumNodes) - claimedAdditionalRewards[account];\r\n\r\n        claimedAdditionalRewards[account] += additionalRewards;\r\n\r\n        if (_rewardsClaimed == 0) return;\r\n\r\n        nativeMinter.mintNativeCoin(account, _rewardsClaimed);\r\n\r\n        emit RewardsClaimed(account, _rewardsClaimed);\r\n    }\r\n\r\n    ///\r\n    /// @notice Disqualifies nodes from receiving rewards for a single day (24 epochs)\r\n    ///         This will be centralized in Stage One, off-chain logic will be decentralized in Stage Two\r\n    /// @dev We increase the `additionalRewardsPerNode` for the new reward distribution\r\n    ///     Increase the `disqualifiedRewards` for each of the disqualified nodes\r\n    ///     Thus artificially decreasing the amount they can claim\r\n    ///     If `totalSupply` is `1000` and we disqualify `100` nodes, the rewards should be distributed\r\n    ///     `rewardPerNode = (rewardPerEpoch * 24) / 900` as they are disqualified from 24 epochs (a day)\r\n    /// @param accounts An array of addresses to disqualify\r\n    /// @param numNodes Corresponding number of nodes that didn't qualify for a particular\r\n    ///\r\n    function disqualifyNodes(\r\n        address[] memory accounts,\r\n        uint256[] memory numNodes\r\n    ) public requireInitialized onlyDisqualifier {\r\n        updatePool();\r\n\r\n        _assertArrayLengthEqual(accounts, numNodes);\r\n\r\n        uint256 totalUnqualifiedNodes;\r\n        for (uint256 i = 0; i < numNodes.length; ) {\r\n            unchecked {\r\n                totalUnqualifiedNodes += numNodes[i];\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // The number of nodes that are still qualified\r\n        uint256 totalQualifiedNodes = totalSupply - totalUnqualifiedNodes;\r\n\r\n        // The reward per node for the previous day\r\n        uint256 prevDaysRewardPerNode = (rewardPerEpoch * 24) / totalSupply;\r\n\r\n        // The total rewards to redistribute\r\n        uint256 rewardsToRedistributePerNode = (prevDaysRewardPerNode *\r\n            totalUnqualifiedNodes) / totalQualifiedNodes;\r\n\r\n        additionalRewardsPerNode += rewardsToRedistributePerNode;\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            // Ignore zero nodes\r\n            if (numNodes[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            disqualifiedRewards[accounts[i]] +=\r\n                (rewardsToRedistributePerNode * numNodes[i]) *\r\n                2;\r\n\r\n            emit NodeDisqualified(accounts[i], numNodes[i]);\r\n        }\r\n\r\n        emit RewardsAdjustedDisqualified(\r\n            rewardsToRedistributePerNode,\r\n            totalUnqualifiedNodes,\r\n            totalQualifiedNodes\r\n        );\r\n\r\n        updatePool();\r\n    }\r\n\r\n    ///\r\n    /// @notice The expected mint price for the number of nodes\r\n    /// @param amount The number of notes to get the price for\r\n    /// @return _price Price of the nodes\r\n    ///\r\n    function mintPrice(uint256 amount) public view returns (uint256 _price) {\r\n        _assertMintAmount(amount);\r\n        uint256 supplyAfterMint = totalSupply + amount;\r\n\r\n        if ((supplyAfterMint) > nextPriceIncrease) {\r\n            uint256 difference = supplyAfterMint - nextPriceIncrease;\r\n            uint256 lowerPrice = (amount - difference) * price;\r\n            uint256 upperPrice = difference * (price + priceIncrease);\r\n\r\n            _price = upperPrice + lowerPrice;\r\n        } else {\r\n            _price = amount * price;\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// @notice Initializes and resets the node reward system\r\n    ///\r\n    function initialize() external onlyOwner {\r\n        if (isInitialized) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        isInitialized = true;\r\n\r\n        lastRewardTimestamp = block.timestamp;\r\n        lifetimeAccRewardsPerNode = 0;\r\n    }\r\n\r\n    ///\r\n    /// @notice Base URI for computing `tokenURI`. If set, the resulting URI for each token will be the concatenation of the baseURI and the tokenId\r\n    //\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    ///\r\n    /// @notice Sets `baseTokenURI`\r\n    /// @param _baseTokenURI The new `baseTokenURU`\r\n    ///\r\n    function setBaseTokenURI(string memory _baseTokenURI) public onlyOwner {\r\n        baseTokenURI = _baseTokenURI;\r\n    }\r\n\r\n    ///\r\n    /// @notice Set the price increase per 100 nodes sold, this can only  increase from the current value as to not rip off previous purchasers\r\n    /// @param _priceIncrease The new `priceIncrease`\r\n    ///\r\n    function setPriceIncrease(uint256 _priceIncrease) external onlyOwner {\r\n        _assertNewLessThanPrevious(_priceIncrease, priceIncrease);\r\n        priceIncrease = _priceIncrease;\r\n    }\r\n\r\n    ///\r\n    /// @notice Set the base, this can only increase from the current value as to not rip off previous purchasers\r\n    /// @param _price The new `price`\r\n    ///\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        _assertNewLessThanPrevious(_price, price);\r\n        price = _price;\r\n        emit PriceChanged(price);\r\n    }\r\n\r\n    ///\r\n    /// @notice Toggles whether the given address can mint or not\r\n    /// @param minter The address of the minter to toggle\r\n    ///\r\n    function toggleAdminMinter(address minter) external onlyOwner {\r\n        adminMinters[minter] = !adminMinters[minter];\r\n\r\n        emit AdminMinterToggled(minter, adminMinters[minter]);\r\n    }\r\n\r\n    ///\r\n    /// @notice Toggles whether the given address can disqualify or not\r\n    /// @param disqualifier The address of the disqualifier to toggle\r\n    ///\r\n    function toggleDisqualifier(address disqualifier) external onlyOwner {\r\n        disqualifiers[disqualifier] = !disqualifiers[disqualifier];\r\n\r\n        emit AdminDisqualifierToggled(\r\n            disqualifier,\r\n            disqualifiers[disqualifier]\r\n        );\r\n    }\r\n\r\n    function _assertAllNodesSold() internal view {\r\n        if (totalSupply < cap) {\r\n            revert AllNodesNotSold();\r\n        }\r\n    }\r\n\r\n    function _assertMintAmount(uint256 _amount) internal view {\r\n        if (_amount == 0) {\r\n            revert CannotMintZero();\r\n        }\r\n\r\n        if (_amount > mintMax) {\r\n            revert CannotMintMoreThanLimit();\r\n        }\r\n\r\n        if (_amount + totalSupply > cap) {\r\n            revert CannotMintMoreThanCap();\r\n        }\r\n    }\r\n\r\n    function _assertNodeOwnership(address _owner) internal view {\r\n        if (holdingsOf[_owner].NumNodes == 0) {\r\n            revert NoNodes();\r\n        }\r\n    }\r\n\r\n    function _assertNewLessThanPrevious(\r\n        uint256 _new,\r\n        uint256 _previous\r\n    ) internal pure {\r\n        if (_new < _previous) {\r\n            revert NewLessThanPrevious();\r\n        }\r\n    }\r\n\r\n    function _assertArrayLengthEqual(\r\n        address[] memory _array1,\r\n        uint256[] memory _array2\r\n    ) internal pure {\r\n        if (_array1.length != _array2.length) {\r\n            revert ArrayLengthNotEqual();\r\n        }\r\n    }\r\n\r\n    function _assertZeroAddress(address _address) internal pure {\r\n        if (_address == address(0)) {\r\n            revert ZeroAddress();\r\n        }\r\n    }\r\n\r\n    function _assertNotZero(uint256 _amount) internal pure {\r\n        if (_amount == 0) {\r\n            revert AmountZero();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lottery/interfaces/ILottery.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLLottery\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLottery contains all external structs \r\n *         for the lottery.\r\n */\r\ninterface IPLAYA3ULLLottery {\r\n    /**\r\n     * @dev A lottery ticket contains three components: an\r\n     *      address of the owner of the ticket, the purchase\r\n     *      price of the ticket (this is predominantly used\r\n     *      if the lottery ticket price is changed at a\r\n     *      later date), and the timestamp that the ticket\r\n     *      was purchased at.\r\n     */\r\n    struct LotteryTicket {\r\n        address holder;\r\n        uint256 price;\r\n        uint256 purchased;\r\n    }\r\n\r\n    /**\r\n     * @dev A winnings tier represents a single tier that a\r\n     *      drawn winner resides in. Each tier contains two\r\n     *      components: the number of cumulative winners at\r\n     *      that tier (for example a second tier winning\r\n     *      count is equal to the first tier count plus the\r\n     *      count for the second tier), and an amount that\r\n     *      represents the number of winnings in that tier.\r\n     */\r\n    struct WinningsTier {\r\n        uint256 winnerCount;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * @dev A round winner contains two components: an\r\n     *      address of the winner, and the amount of winnings\r\n     *      the winner received.\r\n     */\r\n    struct RoundWinner {\r\n        address holder;\r\n        uint256 winnings;\r\n    }\r\n\r\n    /**\r\n     * @dev A lottery round contains two components: the\r\n     *      total number of winners that were drawn for\r\n     *      that round, and a winners mapping that tracks\r\n     *      and stores the drawn winner at each index.\r\n     */\r\n    struct LotteryRound {\r\n        uint256 numWinners;\r\n        mapping(uint => RoundWinner) winners;\r\n    }\r\n}"
    },
    "contracts/lottery/interfaces/ILotteryEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {IPLAYA3ULLLottery} from \"./ILottery.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLLotteryEventsAndErrors\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLotteryEventsAndErrors contains all external\r\n *         events, and errors for the lottery.\r\n */\r\ninterface IPLAYA3ULLLotteryEventsAndErrors is IPLAYA3ULLLottery {\r\n    /**\r\n     * @dev Emit an event whenever a ticket is purchased.\r\n     *\r\n     * @param holder    The address of the ticket purchaser.\r\n     * @param id        The ticket id that was purchased.\r\n     * @param price     The price at the time of purchase.\r\n     */\r\n    event TicketPurchased(\r\n        address indexed holder,\r\n        uint256 indexed id,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a ticket is sold.\r\n     *\r\n     * @param holder        The address that owned the ticket prior to the\r\n     *                      sale of the ticket.\r\n     * @param soldId        The ID of the ticket that was sold.\r\n     * @param swappedIds    An array that tracks the IDs of the tickets\r\n     *                      that were swapped in order to fulfill the\r\n     *                      sale of the the ticket.\r\n     *                      NOTE: if the ticket was valid, the\r\n     *                      `swappedIds` array will be of length two,\r\n     *                      however if the ticket was invalid, the array\r\n     *                      will be of length one.\r\n     * @param price         The sale price of the ticket.\r\n     */\r\n    event TicketSold(\r\n        address indexed holder,\r\n        uint256 indexed soldId,\r\n        uint256[] swappedIds,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a new lottery begins.\r\n     *\r\n     * @param startTime The timestamp the lottery began.\r\n     * @param endTime   The timestamp that the lottery will be available\r\n     *                  to draw winners at.\r\n     */\r\n    event LotteryStarted(uint256 startTime, uint256 endTime);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the price of a ticket is updated.\r\n     *\r\n     * @param price The updated sale price for tickets, at this point\r\n     *              forward.\r\n     * @param time  The timestamp that the price was updated at.\r\n     */\r\n    event PriceUpdated(uint256 price, uint256 time);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a winner is drawn.\r\n     *\r\n     * @param round     The round index the winner was drawn in.\r\n     * @param time      The timestamp the winner was drawn at.\r\n     * @param winner    The address of the winner.\r\n     * @param winnings  The amount of winnings the winner received.\r\n     * @param tier      The tier index the winner was drawin in.\r\n     */\r\n    event WinnerDrawn(\r\n        uint256 indexed round,\r\n        uint256 time,\r\n        address indexed winner,\r\n        uint256 winnings,\r\n        uint256 indexed tier\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event when the winning tiers are updated.\r\n     *\r\n     * @param tiers The new tiers that are now in effect.\r\n     */\r\n    event TiersUpdated(WinningsTier[] tiers);\r\n\r\n    /**\r\n     * @dev Revert with an error if there is no active lottery.\r\n     */\r\n    error LotteryInactive();\r\n\r\n    /**\r\n     * @dev Revert with an error when provided value is not equal to\r\n     *      the expected value.\r\n     *\r\n     * @param expectedValue The expected value that was not provided.\r\n     */\r\n    error InvalidValueProvided(uint256 expectedValue);\r\n\r\n    /**\r\n     * @dev Revert with an error when the provided count does not\r\n     *      fulfill min < value < max.\r\n     *\r\n     * @param min   The minimum count to provide.\r\n     * @param max   The maximum count to provide.\r\n     */\r\n    error InvalidCountProvided(uint256 min, uint256 max);\r\n\r\n    /**\r\n     * @dev Revert with an error when caller owns zero tickets, but\r\n     *      is trying to sell a ticket.\r\n     */\r\n    error ZeroOwnedTickets();\r\n\r\n    /**\r\n     * @dev Revert with an error when seller does not provide indices\r\n     *      that fulfill 0 < indiceLength < max.\r\n     *\r\n     * @param min   The minimum number of indices to provide.\r\n     * @param max   The maximum number of indices to provide.\r\n     */\r\n    error IndicesOutOfRange(uint256 min, uint256 max);\r\n\r\n    /**\r\n     * @dev Revert with an error when caller attempts to access a\r\n     *      ticket that does not exist.\r\n     */\r\n    error TicketDoesNotExist();\r\n\r\n    /**\r\n     * @dev Revert with an error when caller attempts to sell a ticket\r\n     *      they do not own.\r\n     */\r\n    error TicketOwnerNotSeller();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to draw a winner, or\r\n     *      trying to start a new lottery whilst the lottery is still\r\n     *      in progress.\r\n     *\r\n     * @param endTime   The timestamp the lottery will end, and\r\n     *                  winners may be drawn or a new lottery may\r\n     *                  be started.\r\n     */\r\n    error LotteryInProgress(uint256 endTime);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to provide a start time\r\n     *      that is greater than the provided end time.\r\n     */\r\n    error IllogicalTimesProvided();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to provide an end time\r\n     *      that is not in the future.\r\n     */\r\n    error EndTimeNotInFuture();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to draw a winner whilst\r\n     *      no winning tiers have been set.\r\n     */\r\n    error NoWinningsToProvide();\r\n\r\n    /**\r\n     * @dev Revert with an error when updating winning tiers, but the\r\n     *      provided input data lengths do not match.\r\n     */\r\n    error TierInputLengthsDoNotMatch();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to start a lottery but the\r\n     *      price is zero.\r\n     */\r\n    error PriceNotSet();\r\n}\r\n"
    },
    "contracts/lottery/interfaces/ILotteryVaultEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLLotteryVaultEventsAndErrors\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLotteryVaultEventsAndErrors contains all external\r\n *         events, and errors for the lottery vault.\r\n */\r\ninterface IPLAYA3ULLLotteryVaultEventsAndErrors {\r\n    /**\r\n     * @dev Emit an event when a winner has been paid.\r\n     * \r\n     * @param amount    The amount the winner received.\r\n     * @param winner    The address of the winner.\r\n     */\r\n    event WinnerPaid(uint256 indexed amount, address indexed winner);\r\n\r\n    /**\r\n     * @dev Emit an event when funds have been withdrawn.\r\n     * \r\n     * @param amount        The amount of funds withdrawn.\r\n     * @param newBalance    The balance after funds were\r\n     *                      withdrawn.\r\n     */\r\n    event FundsWithdrawn(uint256 amount, uint256 newBalance);\r\n\r\n    /**\r\n     * @dev Emit an event when funds have been deposited.\r\n     * \r\n     * @param amount        The amount of funds deposited.\r\n     * @param newBalance    The balance after funds were\r\n     *                      deposited.\r\n     */\r\n    event FundsDeposited(uint256 amount, uint256 newBalance);\r\n\r\n    /**\r\n     * @dev Revert if attempting to withdraw or distribute\r\n     *      funds that would exceed the balance of the\r\n     *      contract.\r\n     * \r\n     * @param balance   The current balance of the contract.\r\n     */\r\n    error NotEnoughFunds(uint256 balance);\r\n}"
    },
    "contracts/lottery/LotteryVault.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {IPLAYA3ULLLotteryVaultEventsAndErrors} from \"./interfaces/ILotteryVaultEventsAndErrors.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games Lottery Vault Contract\r\n * @author Jourdan (PLAYAY3ULL), Sam (PLAYAY3ULL)\r\n * @notice This contract controls the storage and distribution\r\n *         of funds to lottery winners.\r\n *         Once the lottery contract has been set as part of\r\n *         the constructor, it may not change again without\r\n *         deploying a new vault.\r\n */\r\ncontract PLAYA3ULLLotteryVault is\r\n    Ownable,\r\n    IPLAYA3ULLLotteryVaultEventsAndErrors\r\n{\r\n    /// @notice The address of the core lottery contract.\r\n    address public lottery;\r\n\r\n    /// @dev Modifier for only allowing the lottery to call\r\n    ///      certain functions.\r\n    modifier onlyLottery() {\r\n        require(msg.sender == lottery);\r\n        _;\r\n    }\r\n\r\n    constructor(address _lottery) {\r\n        lottery = _lottery;\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes the amount of winnings to the\r\n     *         supplied winner address.\r\n     *\r\n     * @param amount    The amount of winnings the winner\r\n     *                  will receive.\r\n     * @param winner    The address to receive the winnings.\r\n     */\r\n    function payWinner(uint256 amount, address winner) external onlyLottery {\r\n        _assertEnoughFunds(amount);\r\n        payable(winner).transfer(amount);\r\n\r\n        emit WinnerPaid(amount, winner);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        _assertEnoughFunds(amount);\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        emit FundsWithdrawn(amount, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to deposit funds to this\r\n     *         contract.\r\n     */\r\n    function deposit() external payable {\r\n        emit FundsDeposited(msg.value, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to revert if attempting to\r\n     *      withdraw or distribute funds that would exceed\r\n     *      the balance of the contract.\r\n     *\r\n     * @param requestedAmount   The amount to withdraw or\r\n     *                          distribute.\r\n     */\r\n    function _assertEnoughFunds(uint256 requestedAmount) internal view {\r\n        if (requestedAmount > address(this).balance) {\r\n            revert NotEnoughFunds(address(this).balance);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/lottery/NodeLottery.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {IPLAYA3ULLLotteryEventsAndErrors} from \"./interfaces/ILotteryEventsAndErrors.sol\";\r\nimport {PLAYA3ULLLotteryVault} from \"./LotteryVault.sol\";\r\nimport {PLAYA3ULLNode} from \"../core/Node.sol\";\r\n\r\ncontract NodeLottery is IPLAYA3ULLLotteryEventsAndErrors, Ownable {\r\n    /// @notice Whether there is an active lottery.\r\n    bool public isActive;\r\n\r\n    /// @notice The time at which the current lottery round will start.\r\n    uint256 public timeStart;\r\n\r\n    /// @notice The time at which the current lottery round will end.\r\n    uint256 public timeEnd;\r\n\r\n    /// @notice The number of winners that have currently been drawn for\r\n    ///         the current lottery round.\r\n    uint256 public drawnWinnersCount;\r\n\r\n    /// @notice Represents the address of the lottery vault, where\r\n    ///         winnings will be distributed from.\r\n    PLAYA3ULLLotteryVault public vault;\r\n\r\n    /// @notice Represents the address of the PLAYA3ULL Node contract,\r\n    ///         where entries will be pulled from.\r\n    PLAYA3ULLNode public node;\r\n\r\n    /// @notice The tiers of winnings that drawn winners will receive\r\n    ///         payouts from.\r\n    WinningsTier[] public winnerTiers;\r\n\r\n    /// @notice Stores and tracks the past lottery rounds, and their\r\n    ///         winners.\r\n    LotteryRound[] public rounds;\r\n\r\n    constructor(address _node) {\r\n        isActive = false;\r\n        drawnWinnersCount = 0;\r\n\r\n        node = PLAYA3ULLNode(_node);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the total rounds that have happened.\r\n     *\r\n     * @return The number of surpassed rounds.\r\n     */\r\n    function getRounds() public view returns (uint256) {\r\n        return rounds.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the winner at the given round and winner\r\n     *         index.\r\n     *\r\n     * @param _round    The round to retrieve the winner from.\r\n     * @param _winner   The winner index within the given round.\r\n     *\r\n     * @return The data of the winner at the given indices.\r\n     */\r\n    function getRoundWinner(\r\n        uint256 _round,\r\n        uint256 _winner\r\n    ) public view returns (RoundWinner memory) {\r\n        return rounds[_round].winners[_winner];\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the total number of enterants in the\r\n     *         competition.\r\n     *\r\n     * @return The total number of enterants.\r\n     */\r\n    function getEnterantCount() public view returns (uint256) {\r\n        return node.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @notice Starts a new lottery round.\r\n     *\r\n     * @param start The start timestamp for the new round.\r\n     * @param end   The end timestamp for the new round.\r\n     */\r\n    function startNew(uint256 start, uint256 end) external onlyOwner {\r\n        _assertLotteryInactive();\r\n        _assertLogicalTimes(start, end);\r\n        _assertFutureEndTime(end);\r\n\r\n        timeStart = start;\r\n        timeEnd = end;\r\n\r\n        isActive = true;\r\n\r\n        LotteryRound storage round = rounds.push();\r\n        round.numWinners = winnerTiers[winnerTiers.length - 1].winnerCount;\r\n\r\n        emit LotteryStarted(timeStart, timeEnd);\r\n    }\r\n\r\n    /**\r\n     * @notice Draws a random valid ticket as a winner.\r\n     *\r\n     * @param seed  Input seed to generate a random value from,\r\n     *              should be random in itself.\r\n     */\r\n    function drawWinner(uint256 seed) external onlyOwner {\r\n        _assertLotteryActive();\r\n        _assertWinningsExist();\r\n        _assertLotteryFinished();\r\n\r\n        uint256 totalTickets = getEnterantCount();\r\n\r\n        if (\r\n            totalTickets == 0 ||\r\n            drawnWinnersCount == winnerTiers[winnerTiers.length - 1].winnerCount\r\n        ) {\r\n            _complete();\r\n            return;\r\n        }\r\n\r\n        uint256 winnings = winnerTiers[0].amount;\r\n        uint256 tier = 0;\r\n\r\n        for (uint i = 1; i < winnerTiers.length; i++) {\r\n            if (drawnWinnersCount >= winnerTiers[i - 1].winnerCount) {\r\n                winnings = winnerTiers[i].amount;\r\n                tier = i;\r\n            }\r\n        }\r\n\r\n        uint256 winnerIndex = uint(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    block.difficulty,\r\n                    totalTickets,\r\n                    msg.sender,\r\n                    seed\r\n                )\r\n            )\r\n        ) % totalTickets;\r\n\r\n        address winner = node.ownerOf(winnerIndex);\r\n\r\n        rounds[rounds.length - 1].winners[drawnWinnersCount] = RoundWinner({\r\n            holder: winner,\r\n            winnings: winnings\r\n        });\r\n\r\n        vault.payWinner(winnings, winner);\r\n\r\n        drawnWinnersCount++;\r\n\r\n        emit WinnerDrawn(\r\n            rounds.length,\r\n            block.timestamp,\r\n            winner,\r\n            winnings,\r\n            tier\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the vault contract to distribute winnings\r\n     *         from.\r\n     *\r\n     * @param _vault    The new vault contract.\r\n     */\r\n    function setVaultContract(PLAYA3ULLLotteryVault _vault) external onlyOwner {\r\n        vault = _vault;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the winning tiers that dictate the\r\n     *         amount of funds a winner receives.\r\n     *\r\n     * @param _winners  Array of cumulative winner counts for\r\n     *                  each tier.\r\n     * @param _winnings Array of winnings to distribute at\r\n     *                  each tier.\r\n     */\r\n    function setWinningsTiers(\r\n        uint256[] memory _winners,\r\n        uint256[] memory _winnings\r\n    ) external onlyOwner {\r\n        _assertTierInputsMatch(_winners.length, _winnings.length);\r\n\r\n        while (winnerTiers.length > 0) {\r\n            winnerTiers.pop();\r\n        }\r\n\r\n        for (uint i = 0; i < _winners.length; i++) {\r\n            WinningsTier memory tier = WinningsTier({\r\n                winnerCount: _winners[i],\r\n                amount: _winnings[i]\r\n            });\r\n            winnerTiers.push(tier);\r\n        }\r\n\r\n        emit TiersUpdated(winnerTiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to complete the current round.\r\n     */\r\n    function _complete() internal {\r\n        isActive = false;\r\n        drawnWinnersCount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery is\r\n     *      not active.\r\n     */\r\n    function _assertLotteryActive() internal view {\r\n        if (!isActive) {\r\n            revert LotteryInactive();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery\r\n     *      is active.\r\n     */\r\n    function _assertLotteryInactive() internal view {\r\n        if (isActive) {\r\n            revert LotteryInProgress(timeEnd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery\r\n     *      is still in progress.\r\n     */\r\n    function _assertLotteryFinished() internal view {\r\n        if (block.timestamp < timeEnd) {\r\n            revert LotteryInProgress(timeEnd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to revert if the supplied\r\n     *      times are not logical.\r\n     *\r\n     * @param start The timestamp of the lottery start.\r\n     * @param end   The timestamp that the lottery will end.\r\n     */\r\n    function _assertLogicalTimes(uint256 start, uint256 end) internal pure {\r\n        if (start >= end) {\r\n            revert IllogicalTimesProvided();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the supplied\r\n     *      end time is not in the future.\r\n     *\r\n     * @param end   The end timestamp to verify against the\r\n     *              current timestamp.\r\n     */\r\n    function _assertFutureEndTime(uint256 end) internal view {\r\n        if (end <= block.timestamp) {\r\n            revert EndTimeNotInFuture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if there exists\r\n     *      no winning tiers.\r\n     */\r\n    function _assertWinningsExist() internal view {\r\n        if (winnerTiers.length == 0) {\r\n            revert NoWinningsToProvide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to revert if the supplied\r\n     *      input lengths do not match.\r\n     *\r\n     * @param inputOneLength    The length of the first input.\r\n     * @param inputTwoLength    The length of the second input.\r\n     */\r\n    function _assertTierInputsMatch(\r\n        uint256 inputOneLength,\r\n        uint256 inputTwoLength\r\n    ) internal pure {\r\n        if (inputOneLength != inputTwoLength) {\r\n            revert TierInputLengthsDoNotMatch();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}