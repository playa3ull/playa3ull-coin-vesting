{
  "language": "Solidity",
  "sources": {
    "contracts/lottery/Lottery.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\nimport {IPLAYA3ULLLotteryEventsAndErrors} from \"./interfaces/ILotteryEventsAndErrors.sol\";\r\nimport {PLAYA3ULLLotteryVault} from \"./LotteryVault.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games Lottery Contract\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice This contract serves as the core and central brain for\r\n *         the PLAYA3ULL Games Lottery ecosystem.\r\n */\r\ncontract PLAYA3ULLLottery is\r\n    IPLAYA3ULLLotteryEventsAndErrors,\r\n    Initializable,\r\n    UUPSUpgradeable,\r\n    OwnableUpgradeable\r\n{\r\n    /// @notice Whether there is an active lottery.\r\n    bool public isActive;\r\n\r\n    /// @notice Represents the exact price of a ticket.\r\n    uint256 public price;\r\n\r\n    /// @notice The maximum number of tickets that can be purchased in\r\n    ///         a single transaction.\r\n    uint256 public maxPurchase;\r\n\r\n    /// @notice The maximum number of tickets that can be sold in a\r\n    ///         single transaction.\r\n    uint256 public maxSell;\r\n\r\n    /// @notice The total number of tickets that exist.\r\n    uint256 public totalTickets;\r\n\r\n    /// @notice The total number of valid tickets that exist.\r\n    ///         A valid ticket is one that was purchased prior to the\r\n    ///         start time of the current lottery round.\r\n    uint256 public totalValidTickets;\r\n\r\n    /// @notice The time at which the current lottery round will start.\r\n    uint256 public timeStart;\r\n\r\n    /// @notice The time at which the current lottery round will end.\r\n    uint256 public timeEnd;\r\n\r\n    /// @notice The number of winners that have currently been drawn for\r\n    ///         the current lottery round.\r\n    uint256 public drawnWinnersCount;\r\n\r\n    /// @notice Represents the address of the lottery vault, where\r\n    ///         winnings will be distributed from.\r\n    PLAYA3ULLLotteryVault public vault;\r\n\r\n    /// @notice The tiers of winnings that drawn winners will receive\r\n    ///         payouts from.\r\n    WinningsTier[] public winnerTiers;\r\n\r\n    /// @notice Stores and tracks the past lottery rounds, and their\r\n    ///         winners.\r\n    LotteryRound[] public rounds;\r\n\r\n    /// @dev Stores all currently purchased tickets that exist.\r\n    LotteryTicket[] private tickets;\r\n\r\n    /// @dev Tracks the number of tickets held by a given address.\r\n    mapping(address => uint256) private holders;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n\r\n        isActive = false;\r\n        maxPurchase = 10;\r\n        maxSell = 10;\r\n        totalTickets = 0;\r\n        totalValidTickets = 0;\r\n        drawnWinnersCount = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of tickets held for the given\r\n     *         address.\r\n     *\r\n     * @param _holder   The address to retrieve ticket balance from.\r\n     *\r\n     * @return The number of tickets the provided address holds.\r\n     */\r\n    function balanceOf(address _holder) public view returns (uint256) {\r\n        return holders[_holder];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the lottery ticket at the given index.\r\n     *\r\n     * @param index The index at which the ticket exists.\r\n     *\r\n     * @return The retrieved lottery ticket data.\r\n     */\r\n    function getTicket(\r\n        uint256 index\r\n    ) public view returns (LotteryTicket memory) {\r\n        _assertTicketExists(index);\r\n        return tickets[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the total rounds that have happened.\r\n     *\r\n     * @return The number of surpassed rounds.\r\n     */\r\n    function getRounds() public view returns (uint256) {\r\n        return rounds.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the winner at the given round and winner\r\n     *         index.\r\n     *\r\n     * @param _round    The round to retrieve the winner from.\r\n     * @param _winner   The winner index within the given round.\r\n     *\r\n     * @return The data of the winner at the given indices.\r\n     */\r\n    function getRoundWinner(\r\n        uint256 _round,\r\n        uint256 _winner\r\n    ) public view returns (RoundWinner memory) {\r\n        return rounds[_round].winners[_winner];\r\n    }\r\n\r\n    /**\r\n     * @notice Purchases a ticket for the sender.\r\n     *\r\n     * @param count The number of tickets to purchase\r\n     */\r\n    function purchase(uint256 count) external payable {\r\n        _assertLotteryActive();\r\n        _assertValidValue(msg.value, price * count);\r\n        _assertValidCount(count);\r\n\r\n        for (uint i = 0; i < count; i++) {\r\n            _insertTicket(msg.sender, block.timestamp, price);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Purchases a ticket for a given receiver.\r\n     *\r\n     * @param receiver  The address to which the tickets will belong.\r\n     * @param count     The number of tickets to purchase.\r\n     */\r\n    function purchaseFor(address receiver, uint256 count) external payable {\r\n        _assertLotteryActive();\r\n        _assertValidValue(msg.value, price * count);\r\n        _assertValidCount(count);\r\n\r\n        for (uint i = 0; i < count; i++) {\r\n            _insertTicket(receiver, block.timestamp, price);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sells tickets in a given array of indices.\r\n     *\r\n     * @param indices   Array of indexes of tickets to sell.\r\n     */\r\n    function sell(uint256[] memory indices) external {\r\n        _assertNonZeroTickets();\r\n        _assertIndicesInRange(indices.length);\r\n\r\n        for (uint i = 0; i < indices.length; i++) {\r\n            _deleteTicket(msg.sender, indices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Starts a new lottery round.\r\n     *\r\n     * @param start The start timestamp for the new round.\r\n     * @param end   The end timestamp for the new round.\r\n     */\r\n    function startNew(uint256 start, uint256 end) external onlyOwner {\r\n        _assertLotteryInactive();\r\n        _assertLogicalTimes(start, end);\r\n        _assertFutureEndTime(end);\r\n        _assertPriceSet();\r\n\r\n        timeStart = start;\r\n        timeEnd = end;\r\n\r\n        isActive = true;\r\n\r\n        LotteryRound storage round = rounds.push();\r\n        round.numWinners = winnerTiers[winnerTiers.length - 1].winnerCount;\r\n\r\n        emit LotteryStarted(timeStart, timeEnd);\r\n    }\r\n\r\n    /**\r\n     * @notice Draws a random valid ticket as a winner.\r\n     *\r\n     * @param seed  Input seed to generate a random value from,\r\n     *              should be random in itself.\r\n     */\r\n    function drawWinner(uint256 seed) external onlyOwner {\r\n        _assertLotteryActive();\r\n        _assertWinningsExist();\r\n        _assertLotteryFinished();\r\n\r\n        if (\r\n            totalValidTickets == 0 ||\r\n            drawnWinnersCount == winnerTiers[winnerTiers.length - 1].winnerCount\r\n        ) {\r\n            _complete();\r\n            return;\r\n        }\r\n\r\n        uint256 winnings = winnerTiers[0].amount;\r\n        uint256 tier = 0;\r\n\r\n        for (uint i = 1; i < winnerTiers.length; i++) {\r\n            if (drawnWinnersCount >= winnerTiers[i - 1].winnerCount) {\r\n                winnings = winnerTiers[i].amount;\r\n                tier = i;\r\n            }\r\n        }\r\n\r\n        uint256 winnerIndex = uint(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    block.difficulty,\r\n                    totalTickets,\r\n                    msg.sender,\r\n                    seed\r\n                )\r\n            )\r\n        ) % totalValidTickets;\r\n\r\n        rounds[rounds.length - 1].winners[drawnWinnersCount] = RoundWinner({\r\n            holder: tickets[winnerIndex].holder,\r\n            winnings: winnings\r\n        });\r\n\r\n        vault.payWinner(winnings, tickets[winnerIndex].holder);\r\n\r\n        drawnWinnersCount++;\r\n\r\n        emit WinnerDrawn(\r\n            rounds.length,\r\n            block.timestamp,\r\n            tickets[winnerIndex].holder,\r\n            winnings,\r\n            tier\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the vault contract to distribute winnings\r\n     *         from.\r\n     *\r\n     * @param _vault    The new vault contract.\r\n     */\r\n    function setVaultContract(PLAYA3ULLLotteryVault _vault) external onlyOwner {\r\n        vault = _vault;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the purchase price for a ticket.\r\n     *\r\n     * @param _price    The new ticket price.\r\n     */\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        _assertLotteryInactive();\r\n\r\n        price = _price;\r\n\r\n        emit PriceUpdated(_price, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the winning tiers that dictate the\r\n     *         amount of funds a winner receives.\r\n     *\r\n     * @param _winners  Array of cumulative winner counts for\r\n     *                  each tier.\r\n     * @param _winnings Array of winnings to distribute at\r\n     *                  each tier.\r\n     */\r\n    function setWinningsTiers(\r\n        uint256[] memory _winners,\r\n        uint256[] memory _winnings\r\n    ) external onlyOwner {\r\n        _assertTierInputsMatch(_winners.length, _winnings.length);\r\n\r\n        while (winnerTiers.length > 0) {\r\n            winnerTiers.pop();\r\n        }\r\n\r\n        for (uint i = 0; i < _winners.length; i++) {\r\n            WinningsTier memory tier = WinningsTier({\r\n                winnerCount: _winners[i],\r\n                amount: _winnings[i]\r\n            });\r\n            winnerTiers.push(tier);\r\n        }\r\n\r\n        emit TiersUpdated(winnerTiers);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to sell tickets for a given\r\n     *        address.\r\n     *\r\n     * @param holder    The address to sell tickets for.\r\n     * @param indices   Array of indexes of tickets to sell.\r\n     */\r\n    function sellFor(\r\n        address holder,\r\n        uint256[] memory indices\r\n    ) external onlyOwner {\r\n        if (holders[holder] == 0) {\r\n            revert ZeroOwnedTickets();\r\n        }\r\n\r\n        _assertIndicesInRange(indices.length);\r\n\r\n        for (uint i = 0; i < indices.length; i++) {\r\n            _deleteTicketFor(holder, indices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to delete a lottery ticket from\r\n     *      the array of tickets.\r\n     *\r\n     * @param _holder   The owner address of the ticket.\r\n     * @param _index    The index in the ticket array to delete.\r\n     */\r\n    function _deleteTicketFor(address _holder, uint256 _index) internal {\r\n        _assertTicketExists(_index);\r\n        _assertCallerOwnsTicket(_index, _holder);\r\n\r\n        payable(owner()).transfer(tickets[_index].price);\r\n\r\n        uint256 indexToRemove = _index;\r\n        bool isValidTicketSale = _index < totalValidTickets;\r\n        uint256[] memory swappedTicketIds = new uint256[](\r\n            isValidTicketSale ? 2 : 1\r\n        );\r\n\r\n        if (_index < totalValidTickets) {\r\n            tickets[_index] = tickets[totalValidTickets - 1];\r\n            indexToRemove = totalValidTickets - 1;\r\n\r\n            swappedTicketIds[0] = totalValidTickets - 1;\r\n\r\n            totalValidTickets--;\r\n        }\r\n\r\n        swappedTicketIds[isValidTicketSale ? 1 : 0] = totalTickets - 1;\r\n\r\n        emit TicketSold(\r\n            _holder,\r\n            _index,\r\n            swappedTicketIds,\r\n            tickets[indexToRemove].price\r\n        );\r\n\r\n        tickets[indexToRemove] = tickets[totalTickets - 1];\r\n\r\n        tickets.pop();\r\n\r\n        holders[_holder]--;\r\n        totalTickets--;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to create and insert a lottery ticket\r\n     *      into the array of tickets.\r\n     *\r\n     * @param _to       The address to receive the tickets.\r\n     * @param _time     The timestamp that the purchase was made.\r\n     * @param _price    The purchase price of the ticket.\r\n     */\r\n    function _insertTicket(\r\n        address _to,\r\n        uint256 _time,\r\n        uint256 _price\r\n    ) internal {\r\n        LotteryTicket memory ticket = LotteryTicket({\r\n            holder: _to,\r\n            price: _price,\r\n            purchased: _time\r\n        });\r\n\r\n        tickets.push(ticket);\r\n\r\n        emit TicketPurchased(_to, totalTickets, price);\r\n\r\n        holders[_to]++;\r\n        totalTickets++;\r\n\r\n        if (block.timestamp <= timeStart) {\r\n            totalValidTickets++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to delete a lottery ticket from\r\n     *      the array of tickets.\r\n     *\r\n     * @param _holder   The owner address of the ticket.\r\n     * @param _index    The index in the ticket array to delete.\r\n     */\r\n    function _deleteTicket(address _holder, uint256 _index) internal {\r\n        _assertTicketExists(_index);\r\n        _assertCallerOwnsTicket(_index, _holder);\r\n\r\n        payable(_holder).transfer(tickets[_index].price);\r\n\r\n        uint256 indexToRemove = _index;\r\n        bool isValidTicketSale = _index < totalValidTickets;\r\n        uint256[] memory swappedTicketIds = new uint256[](\r\n            isValidTicketSale ? 2 : 1\r\n        );\r\n\r\n        if (_index < totalValidTickets) {\r\n            tickets[_index] = tickets[totalValidTickets - 1];\r\n            indexToRemove = totalValidTickets - 1;\r\n\r\n            swappedTicketIds[0] = totalValidTickets - 1;\r\n\r\n            totalValidTickets--;\r\n        }\r\n\r\n        swappedTicketIds[isValidTicketSale ? 1 : 0] = totalTickets - 1;\r\n\r\n        emit TicketSold(\r\n            _holder,\r\n            _index,\r\n            swappedTicketIds,\r\n            tickets[indexToRemove].price\r\n        );\r\n\r\n        tickets[indexToRemove] = tickets[totalTickets - 1];\r\n\r\n        tickets.pop();\r\n\r\n        holders[_holder]--;\r\n        totalTickets--;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to complete the current round.\r\n     */\r\n    function _complete() internal {\r\n        isActive = false;\r\n        drawnWinnersCount = 0;\r\n        totalValidTickets = totalTickets;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery is\r\n     *      not active.\r\n     */\r\n    function _assertLotteryActive() internal view {\r\n        if (!isActive) {\r\n            revert LotteryInactive();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to revert if the provided\r\n     *      value is not equal to the expected value.\r\n     *\r\n     * @param provided  The value that was provided.\r\n     * @param expected  The value that was expected.\r\n     */\r\n    function _assertValidValue(\r\n        uint256 provided,\r\n        uint256 expected\r\n    ) internal pure {\r\n        if (provided != expected) {\r\n            revert InvalidValueProvided(expected);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the provided\r\n     *      value is outside the expected range.\r\n     *\r\n     * @param provided  The value that was provided.\r\n     */\r\n    function _assertValidCount(uint256 provided) internal view {\r\n        if (!(0 < provided && provided <= maxPurchase)) {\r\n            revert InvalidCountProvided(0, maxPurchase);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the sender\r\n     *      holds zero tickets.\r\n     */\r\n    function _assertNonZeroTickets() internal view {\r\n        if (holders[msg.sender] == 0) {\r\n            revert ZeroOwnedTickets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the supplied\r\n     *      indices are outside the expected range.\r\n     *\r\n     * @param length    The length of the index array.\r\n     */\r\n    function _assertIndicesInRange(uint256 length) internal view {\r\n        if (!(0 < length && length <= maxSell)) {\r\n            revert IndicesOutOfRange(0, maxSell);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the supplied\r\n     *      index refers to a ticket that exists.\r\n     *\r\n     * @param index The index of the ticket to verify.\r\n     */\r\n    function _assertTicketExists(uint256 index) internal view {\r\n        if (index >= totalTickets) {\r\n            revert TicketDoesNotExist();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the caller\r\n     *      owns the ticket at the supplied index.\r\n     *\r\n     * @param index     The index of the ticket to verify.\r\n     * @param caller    The expected owner of the ticket.\r\n     */\r\n    function _assertCallerOwnsTicket(\r\n        uint256 index,\r\n        address caller\r\n    ) internal view {\r\n        if (tickets[index].holder != caller) {\r\n            revert TicketOwnerNotSeller();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery\r\n     *      is active.\r\n     */\r\n    function _assertLotteryInactive() internal view {\r\n        if (isActive) {\r\n            revert LotteryInProgress(timeEnd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery\r\n     *      is still in progress.\r\n     */\r\n    function _assertLotteryFinished() internal view {\r\n        if (block.timestamp < timeEnd) {\r\n            revert LotteryInProgress(timeEnd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to revert if the supplied\r\n     *      times are not logical.\r\n     *\r\n     * @param start The timestamp of the lottery start.\r\n     * @param end   The timestamp that the lottery will end.\r\n     */\r\n    function _assertLogicalTimes(uint256 start, uint256 end) internal pure {\r\n        if (start >= end) {\r\n            revert IllogicalTimesProvided();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the supplied\r\n     *      end time is not in the future.\r\n     *\r\n     * @param end   The end timestamp to verify against the\r\n     *              current timestamp.\r\n     */\r\n    function _assertFutureEndTime(uint256 end) internal view {\r\n        if (end <= block.timestamp) {\r\n            revert EndTimeNotInFuture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if there exists\r\n     *      no winning tiers.\r\n     */\r\n    function _assertWinningsExist() internal view {\r\n        if (winnerTiers.length == 0) {\r\n            revert NoWinningsToProvide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal pure function to revert if the supplied\r\n     *      input lengths do not match.\r\n     *\r\n     * @param inputOneLength    The length of the first input.\r\n     * @param inputTwoLength    The length of the second input.\r\n     */\r\n    function _assertTierInputsMatch(\r\n        uint256 inputOneLength,\r\n        uint256 inputTwoLength\r\n    ) internal pure {\r\n        if (inputOneLength != inputTwoLength) {\r\n            revert TierInputLengthsDoNotMatch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the lottery\r\n     *     has not been priced.\r\n     */\r\n    function _assertPriceSet() internal view {\r\n        if (price == 0) {\r\n            revert PriceNotSet();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to allow upgrades to this contract.\r\n     *\r\n     * @param newImplementation The address of the new implementation.\r\n     */\r\n    function _authorizeUpgrade(\r\n        address newImplementation\r\n    ) internal override onlyOwner {}\r\n}\r\n"
    },
    "contracts/lottery/interfaces/ILotteryEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {IPLAYA3ULLLottery} from \"./ILottery.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLLotteryEventsAndErrors\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLotteryEventsAndErrors contains all external\r\n *         events, and errors for the lottery.\r\n */\r\ninterface IPLAYA3ULLLotteryEventsAndErrors is IPLAYA3ULLLottery {\r\n    /**\r\n     * @dev Emit an event whenever a ticket is purchased.\r\n     *\r\n     * @param holder    The address of the ticket purchaser.\r\n     * @param id        The ticket id that was purchased.\r\n     * @param price     The price at the time of purchase.\r\n     */\r\n    event TicketPurchased(\r\n        address indexed holder,\r\n        uint256 indexed id,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a ticket is sold.\r\n     *\r\n     * @param holder        The address that owned the ticket prior to the\r\n     *                      sale of the ticket.\r\n     * @param soldId        The ID of the ticket that was sold.\r\n     * @param swappedIds    An array that tracks the IDs of the tickets\r\n     *                      that were swapped in order to fulfill the\r\n     *                      sale of the the ticket.\r\n     *                      NOTE: if the ticket was valid, the\r\n     *                      `swappedIds` array will be of length two,\r\n     *                      however if the ticket was invalid, the array\r\n     *                      will be of length one.\r\n     * @param price         The sale price of the ticket.\r\n     */\r\n    event TicketSold(\r\n        address indexed holder,\r\n        uint256 indexed soldId,\r\n        uint256[] swappedIds,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a new lottery begins.\r\n     *\r\n     * @param startTime The timestamp the lottery began.\r\n     * @param endTime   The timestamp that the lottery will be available\r\n     *                  to draw winners at.\r\n     */\r\n    event LotteryStarted(uint256 startTime, uint256 endTime);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the price of a ticket is updated.\r\n     *\r\n     * @param price The updated sale price for tickets, at this point\r\n     *              forward.\r\n     * @param time  The timestamp that the price was updated at.\r\n     */\r\n    event PriceUpdated(uint256 price, uint256 time);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a winner is drawn.\r\n     *\r\n     * @param round     The round index the winner was drawn in.\r\n     * @param time      The timestamp the winner was drawn at.\r\n     * @param winner    The address of the winner.\r\n     * @param winnings  The amount of winnings the winner received.\r\n     * @param tier      The tier index the winner was drawin in.\r\n     */\r\n    event WinnerDrawn(\r\n        uint256 indexed round,\r\n        uint256 time,\r\n        address indexed winner,\r\n        uint256 winnings,\r\n        uint256 indexed tier\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event when the winning tiers are updated.\r\n     *\r\n     * @param tiers The new tiers that are now in effect.\r\n     */\r\n    event TiersUpdated(WinningsTier[] tiers);\r\n\r\n    /**\r\n     * @dev Revert with an error if there is no active lottery.\r\n     */\r\n    error LotteryInactive();\r\n\r\n    /**\r\n     * @dev Revert with an error when provided value is not equal to\r\n     *      the expected value.\r\n     *\r\n     * @param expectedValue The expected value that was not provided.\r\n     */\r\n    error InvalidValueProvided(uint256 expectedValue);\r\n\r\n    /**\r\n     * @dev Revert with an error when the provided count does not\r\n     *      fulfill min < value < max.\r\n     *\r\n     * @param min   The minimum count to provide.\r\n     * @param max   The maximum count to provide.\r\n     */\r\n    error InvalidCountProvided(uint256 min, uint256 max);\r\n\r\n    /**\r\n     * @dev Revert with an error when caller owns zero tickets, but\r\n     *      is trying to sell a ticket.\r\n     */\r\n    error ZeroOwnedTickets();\r\n\r\n    /**\r\n     * @dev Revert with an error when seller does not provide indices\r\n     *      that fulfill 0 < indiceLength < max.\r\n     *\r\n     * @param min   The minimum number of indices to provide.\r\n     * @param max   The maximum number of indices to provide.\r\n     */\r\n    error IndicesOutOfRange(uint256 min, uint256 max);\r\n\r\n    /**\r\n     * @dev Revert with an error when caller attempts to access a\r\n     *      ticket that does not exist.\r\n     */\r\n    error TicketDoesNotExist();\r\n\r\n    /**\r\n     * @dev Revert with an error when caller attempts to sell a ticket\r\n     *      they do not own.\r\n     */\r\n    error TicketOwnerNotSeller();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to draw a winner, or\r\n     *      trying to start a new lottery whilst the lottery is still\r\n     *      in progress.\r\n     *\r\n     * @param endTime   The timestamp the lottery will end, and\r\n     *                  winners may be drawn or a new lottery may\r\n     *                  be started.\r\n     */\r\n    error LotteryInProgress(uint256 endTime);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to provide a start time\r\n     *      that is greater than the provided end time.\r\n     */\r\n    error IllogicalTimesProvided();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to provide an end time\r\n     *      that is not in the future.\r\n     */\r\n    error EndTimeNotInFuture();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to draw a winner whilst\r\n     *      no winning tiers have been set.\r\n     */\r\n    error NoWinningsToProvide();\r\n\r\n    /**\r\n     * @dev Revert with an error when updating winning tiers, but the\r\n     *      provided input data lengths do not match.\r\n     */\r\n    error TierInputLengthsDoNotMatch();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to start a lottery but the\r\n     *      price is zero.\r\n     */\r\n    error PriceNotSet();\r\n}\r\n"
    },
    "contracts/lottery/LotteryVault.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {IPLAYA3ULLLotteryVaultEventsAndErrors} from \"./interfaces/ILotteryVaultEventsAndErrors.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games Lottery Vault Contract\r\n * @author Jourdan (PLAYAY3ULL), Sam (PLAYAY3ULL)\r\n * @notice This contract controls the storage and distribution\r\n *         of funds to lottery winners.\r\n *         Once the lottery contract has been set as part of\r\n *         the constructor, it may not change again without\r\n *         deploying a new vault.\r\n */\r\ncontract PLAYA3ULLLotteryVault is\r\n    Ownable,\r\n    IPLAYA3ULLLotteryVaultEventsAndErrors\r\n{\r\n    /// @notice The address of the core lottery contract.\r\n    address public lottery;\r\n\r\n    /// @dev Modifier for only allowing the lottery to call\r\n    ///      certain functions.\r\n    modifier onlyLottery() {\r\n        require(msg.sender == lottery);\r\n        _;\r\n    }\r\n\r\n    constructor(address _lottery) {\r\n        lottery = _lottery;\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes the amount of winnings to the\r\n     *         supplied winner address.\r\n     *\r\n     * @param amount    The amount of winnings the winner\r\n     *                  will receive.\r\n     * @param winner    The address to receive the winnings.\r\n     */\r\n    function payWinner(uint256 amount, address winner) external onlyLottery {\r\n        _assertEnoughFunds(amount);\r\n        payable(winner).transfer(amount);\r\n\r\n        emit WinnerPaid(amount, winner);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        _assertEnoughFunds(amount);\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        emit FundsWithdrawn(amount, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to deposit funds to this\r\n     *         contract.\r\n     */\r\n    function deposit() external payable {\r\n        emit FundsDeposited(msg.value, address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to revert if attempting to\r\n     *      withdraw or distribute funds that would exceed\r\n     *      the balance of the contract.\r\n     *\r\n     * @param requestedAmount   The amount to withdraw or\r\n     *                          distribute.\r\n     */\r\n    function _assertEnoughFunds(uint256 requestedAmount) internal view {\r\n        if (requestedAmount > address(this).balance) {\r\n            revert NotEnoughFunds(address(this).balance);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "contracts/lottery/interfaces/ILottery.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLLottery\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLottery contains all external structs \r\n *         for the lottery.\r\n */\r\ninterface IPLAYA3ULLLottery {\r\n    /**\r\n     * @dev A lottery ticket contains three components: an\r\n     *      address of the owner of the ticket, the purchase\r\n     *      price of the ticket (this is predominantly used\r\n     *      if the lottery ticket price is changed at a\r\n     *      later date), and the timestamp that the ticket\r\n     *      was purchased at.\r\n     */\r\n    struct LotteryTicket {\r\n        address holder;\r\n        uint256 price;\r\n        uint256 purchased;\r\n    }\r\n\r\n    /**\r\n     * @dev A winnings tier represents a single tier that a\r\n     *      drawn winner resides in. Each tier contains two\r\n     *      components: the number of cumulative winners at\r\n     *      that tier (for example a second tier winning\r\n     *      count is equal to the first tier count plus the\r\n     *      count for the second tier), and an amount that\r\n     *      represents the number of winnings in that tier.\r\n     */\r\n    struct WinningsTier {\r\n        uint256 winnerCount;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * @dev A round winner contains two components: an\r\n     *      address of the winner, and the amount of winnings\r\n     *      the winner received.\r\n     */\r\n    struct RoundWinner {\r\n        address holder;\r\n        uint256 winnings;\r\n    }\r\n\r\n    /**\r\n     * @dev A lottery round contains two components: the\r\n     *      total number of winners that were drawn for\r\n     *      that round, and a winners mapping that tracks\r\n     *      and stores the drawn winner at each index.\r\n     */\r\n    struct LotteryRound {\r\n        uint256 numWinners;\r\n        mapping(uint => RoundWinner) winners;\r\n    }\r\n}"
    },
    "contracts/lottery/interfaces/ILotteryVaultEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLLotteryVaultEventsAndErrors\r\n * @author Jourdan (PLAYAY3ULL)\r\n * @notice IPLAYA3ULLLotteryVaultEventsAndErrors contains all external\r\n *         events, and errors for the lottery vault.\r\n */\r\ninterface IPLAYA3ULLLotteryVaultEventsAndErrors {\r\n    /**\r\n     * @dev Emit an event when a winner has been paid.\r\n     * \r\n     * @param amount    The amount the winner received.\r\n     * @param winner    The address of the winner.\r\n     */\r\n    event WinnerPaid(uint256 indexed amount, address indexed winner);\r\n\r\n    /**\r\n     * @dev Emit an event when funds have been withdrawn.\r\n     * \r\n     * @param amount        The amount of funds withdrawn.\r\n     * @param newBalance    The balance after funds were\r\n     *                      withdrawn.\r\n     */\r\n    event FundsWithdrawn(uint256 amount, uint256 newBalance);\r\n\r\n    /**\r\n     * @dev Emit an event when funds have been deposited.\r\n     * \r\n     * @param amount        The amount of funds deposited.\r\n     * @param newBalance    The balance after funds were\r\n     *                      deposited.\r\n     */\r\n    event FundsDeposited(uint256 amount, uint256 newBalance);\r\n\r\n    /**\r\n     * @dev Revert if attempting to withdraw or distribute\r\n     *      funds that would exceed the balance of the\r\n     *      contract.\r\n     * \r\n     * @param balance   The current balance of the contract.\r\n     */\r\n    error NotEnoughFunds(uint256 balance);\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}