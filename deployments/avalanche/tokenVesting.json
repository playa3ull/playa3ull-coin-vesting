{
  "address": "0xb05a418762cF33A804FBD85623414714D4B8B64d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slicePeriodSeconds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "revocable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountTotal",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "VestingScheduleRevoked",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "computeNextVestingScheduleIdForHolder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "computeReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingScheduleIdForAddressAndIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slicePeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_revocable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getLastVestingScheduleForHolder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingIdAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "getVestingSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingScheduleByAddressAndIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getVestingSchedulesCountByBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c20168af67bb40a119884ba6ffdde50fd75bc7cba9818e239be50e6acbcb257",
  "receipt": {
    "to": null,
    "from": "0x6CEc2051233d100Fc5Bf9BDd6D6A113022Ecb94F",
    "contractAddress": "0xb05a418762cF33A804FBD85623414714D4B8B64d",
    "transactionIndex": 4,
    "gasUsed": "1551386",
    "logsBloom": "0x
    "blockHash": "0xfb09afdd0a53dd158fe6b792e00529d414e54171573184d08d8a87dc97abe72e",
    "transactionHash": "0x9c20168af67bb40a119884ba6ffdde50fd75bc7cba9818e239be50e6acbcb257",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 41569235,
        "transactionHash": "0x9c20168af67bb40a119884ba6ffdde50fd75bc7cba9818e239be50e6acbcb257",
        "address": "0xb05a418762cF33A804FBD85623414714D4B8B64d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006cec2051233d100fc5bf9bdd6d6a113022ecb94f"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xfb09afdd0a53dd158fe6b792e00529d414e54171573184d08d8a87dc97abe72e"
      }
    ],
    "blockNumber": 41569235,
    "cumulativeGasUsed": "2072822",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa77e70d0Af1Ac7fF86726740dB1Bd065c3566937"
  ],
  "numDeployments": 1,
  "solcInputHash": "bf065e2a29679e58ff36f93a841273aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"VestingScheduleRevoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"@abdelhamidbakhtam, @akramDevelopment (PLAYA3ULL) @jourdanhaines (PLAYAY3ULL), @samthompsonkennedy (PLAYA3ULL)  To support ERC20 tokens for w3ULL\",\"kind\":\"dev\",\"methods\":{\"computeNextVestingScheduleIdForHolder(address)\":{\"details\":\"Computes the next vesting schedule identifier for a given holder address.\"},\"computeReleasableAmount(bytes32)\":{\"returns\":{\"_0\":\"the vested amount\"}},\"computeVestingScheduleIdForAddressAndIndex(address,uint256)\":{\"details\":\"Computes the vesting schedule identifier for an address and an index.\"},\"constructor\":{\"details\":\"Creates a vesting contract.\",\"params\":{\"token_\":\"address of the ERC20 token contract\"}},\"createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)\":{\"params\":{\"_amount\":\"total amount of tokens to be released at the end of the vesting\",\"_beneficiary\":\"address of the beneficiary to whom vested tokens are transferred\",\"_cliff\":\"duration in seconds of the cliff in which tokens will begin to vest\",\"_duration\":\"duration in seconds of the period in which the tokens will vest\",\"_revocable\":\"whether the vesting is revocable or not\",\"_slicePeriodSeconds\":\"duration of a slice period for the vesting in seconds\",\"_start\":\"start time of the vesting period\"}},\"getLastVestingScheduleForHolder(address)\":{\"details\":\"Returns the last vesting schedule for a given holder address.\"},\"getToken()\":{\"details\":\"Returns the address of the ERC20 token managed by the vesting contract.\"},\"getVestingIdAtIndex(uint256)\":{\"details\":\"Returns the vesting schedule id at the given index.\",\"returns\":{\"_0\":\"the vesting id\"}},\"getVestingSchedule(bytes32)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingSchedulesCount()\":{\"details\":\"Returns the number of vesting schedules managed by this contract.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesCountByBeneficiary(address)\":{\"details\":\"Returns the number of vesting schedules associated to a beneficiary.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesTotalAmount()\":{\"returns\":{\"_0\":\"the total amount of vesting schedules\"}},\"getWithdrawableAmount()\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\",\"returns\":{\"_0\":\"the amount of tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(bytes32,uint256)\":{\"params\":{\"amount\":\"the amount to release\",\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(bytes32)\":{\"params\":{\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"the amount to withdraw\"}}},\"title\":\"PLAYA3ULL GAMES Vesting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeReleasableAmount(bytes32)\":{\"notice\":\"Computes the vested amount of tokens for the given vesting schedule identifier.\"},\"createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)\":{\"notice\":\"Creates a new vesting schedule for a beneficiary.\"},\"getVestingSchedule(bytes32)\":{\"notice\":\"Returns the vesting schedule information for a given identifier.\"},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"notice\":\"Returns the vesting schedule information for a given holder and index.\"},\"getVestingSchedulesTotalAmount()\":{\"notice\":\"Returns the total amount of vesting schedules.\"},\"release(bytes32,uint256)\":{\"notice\":\"Release vested amount of tokens.\"},\"revoke(bytes32)\":{\"notice\":\"Revokes the vesting schedule for given identifier.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw the specified amount if possible.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVesting.sol\":\"TokenVesting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenVesting.sol\":{\"content\":\"// contracts/TokenVesting.sol\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\n// OpenZeppelin dependencies\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title PLAYA3ULL GAMES Vesting Contract\\n * @author @abdelhamidbakhtam, @akramDevelopment (PLAYA3ULL) @jourdanhaines (PLAYAY3ULL), @samthompsonkennedy (PLAYA3ULL)\\n *  To support ERC20 tokens for w3ULL\\n */\\ncontract TokenVesting is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingSchedule {\\n        bool initialized;\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // cliff time of the vesting start in seconds since the UNIX epoch\\n        uint256 cliff;\\n        // start time of the vesting period  in seconds.\\n        uint256 start;\\n        // duration of the vesting period in seconds\\n        uint256 duration;\\n        // duration of a slice period for the vesting in seconds\\n        uint256 slicePeriodSeconds;\\n        // whether or not the vesting is revocable\\n        bool revocable;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens released\\n        uint256 released;\\n        // whether or not the vesting has been revoked\\n        bool revoked;\\n    }\\n\\n    // address of the ERC20 token\\n    IERC20 private immutable _token;\\n\\n    bytes32[] private vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\n    uint256 private vestingSchedulesTotalAmount;\\n    mapping(address => uint256) private holdersVestingCount;\\n\\n    /**\\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\\n     */\\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\\n        require(\\n            vestingSchedules[vestingScheduleId].initialized,\\n            \\\"TokenVesting: vesting schedule not initialized\\\"\\n        );\\n        require(\\n            !vestingSchedules[vestingScheduleId].revoked,\\n            \\\"TokenVesting: vesting schedule revoked\\\"\\n        );\\n        _;\\n    }\\n\\n    event VestingScheduleCreated(\\n        bytes32 vestingScheduleId,\\n        address indexed beneficiary,\\n        uint256 cliff,\\n        uint256 start,\\n        uint256 duration,\\n        uint256 slicePeriodSeconds,\\n        bool revocable,\\n        uint256 amountTotal\\n    );\\n    event VestingScheduleRevoked(\\n        bytes32 vestingScheduleId,\\n        address indexed beneficiary\\n    );\\n\\n    event VestingScheduleReleased(\\n        bytes32 vestingScheduleId,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Creates a vesting contract.\\n     * @param token_ address of the ERC20 token contract\\n     */\\n    constructor(address token_) {\\n        // Check that the token address is not 0x0.\\n        require(token_ != address(0x0));\\n        // Set the token address.\\n        _token = IERC20(token_);\\n    }\\n\\n    /**\\n     * @dev This function is called for plain Ether transfers, i.e. for every call with empty calldata.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function is executed if none of the other functions match the function\\n     * identifier or no data was provided with the function call.\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Creates a new vesting schedule for a beneficiary.\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _start start time of the vesting period\\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\\n     * @param _duration duration in seconds of the period in which the tokens will vest\\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\\n     * @param _revocable whether the vesting is revocable or not\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\n     */\\n    function createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _start,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _slicePeriodSeconds,\\n        bool _revocable,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(\\n            getWithdrawableAmount() >= _amount,\\n            \\\"TokenVesting: cannot create vesting schedule because not sufficient tokens\\\"\\n        );\\n        require(_duration > 0, \\\"TokenVesting: duration must be > 0\\\");\\n        require(_amount > 0, \\\"TokenVesting: amount must be > 0\\\");\\n        require(\\n            _slicePeriodSeconds >= 1,\\n            \\\"TokenVesting: slicePeriodSeconds must be >= 1\\\"\\n        );\\n        require(_duration >= _cliff, \\\"TokenVesting: duration must be >= cliff\\\");\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\\n            _beneficiary\\n        );\\n        uint256 cliff = _start + _cliff;\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\\n            true,\\n            _beneficiary,\\n            cliff,\\n            _start,\\n            _duration,\\n            _slicePeriodSeconds,\\n            _revocable,\\n            _amount,\\n            0,\\n            false\\n        );\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\\n\\n        emit VestingScheduleCreated(\\n            vestingScheduleId,\\n            _beneficiary,\\n            cliff,\\n            _start,\\n            _duration,\\n            _slicePeriodSeconds,\\n            _revocable,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Revokes the vesting schedule for given identifier.\\n     * @param vestingScheduleId the vesting schedule identifier\\n     */\\n    function revoke(\\n        bytes32 vestingScheduleId\\n    ) external onlyOwner onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        require(\\n            vestingSchedule.revocable,\\n            \\\"TokenVesting: vesting is not revocable\\\"\\n        );\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        if (vestedAmount > 0) {\\n            release(vestingScheduleId, vestedAmount);\\n        }\\n        uint256 unreleased = vestingSchedule.amountTotal -\\n            vestingSchedule.released;\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - unreleased;\\n        vestingSchedule.revoked = true;\\n    }\\n\\n    /**\\n     * @notice Withdraw the specified amount if possible.\\n     * @param amount the amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant onlyOwner {\\n        require(\\n            getWithdrawableAmount() >= amount,\\n            \\\"TokenVesting: not enough withdrawable funds\\\"\\n        );\\n        /*\\n         * @dev Replaced owner() with msg.sender => address of WITHDRAWER_ROLE\\n         */\\n        _token.safeTransfer(msg.sender, amount);\\n        // SafeTransferLib.safeTransfer(_token, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Release vested amount of tokens.\\n     * @param vestingScheduleId the vesting schedule identifier\\n     * @param amount the amount to release\\n     */\\n    function release(\\n        bytes32 vestingScheduleId,\\n        uint256 amount\\n    ) public nonReentrant onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n\\n        bool isReleasor = (msg.sender == owner());\\n        require(\\n            isBeneficiary || isReleasor,\\n            \\\"TokenVesting: only beneficiary and owner can release vested tokens\\\"\\n        );\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(\\n            vestedAmount >= amount,\\n            \\\"TokenVesting: cannot release tokens, not enough vested tokens\\\"\\n        );\\n        vestingSchedule.released = vestingSchedule.released + amount;\\n        address payable beneficiaryPayable = payable(\\n            vestingSchedule.beneficiary\\n        );\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - amount;\\n        _token.safeTransfer(beneficiaryPayable, amount);\\n        emit VestingScheduleReleased(\\n            vestingScheduleId,\\n            vestingSchedule.beneficiary,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\\n     * @return the number of vesting schedules\\n     */\\n    function getVestingSchedulesCountByBeneficiary(\\n        address _beneficiary\\n    ) external view returns (uint256) {\\n        return holdersVestingCount[_beneficiary];\\n    }\\n\\n    /**\\n     * @dev Returns the vesting schedule id at the given index.\\n     * @return the vesting id\\n     */\\n    function getVestingIdAtIndex(\\n        uint256 index\\n    ) external view returns (bytes32) {\\n        require(\\n            index < getVestingSchedulesCount(),\\n            \\\"TokenVesting: index out of bounds\\\"\\n        );\\n        return vestingSchedulesIds[index];\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given holder and index.\\n     * @return the vesting schedule structure information\\n     */\\n    function getVestingScheduleByAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) external view returns (VestingSchedule memory) {\\n        return\\n            getVestingSchedule(\\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of vesting schedules.\\n     * @return the total amount of vesting schedules\\n     */\\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\\n        return vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ERC20 token managed by the vesting contract.\\n     */\\n    function getToken() external view returns (address) {\\n        return address(_token);\\n    }\\n\\n    /**\\n     * @dev Returns the number of vesting schedules managed by this contract.\\n     * @return the number of vesting schedules\\n     */\\n    function getVestingSchedulesCount() public view returns (uint256) {\\n        return vestingSchedulesIds.length;\\n    }\\n\\n    /**\\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\\n     * @return the vested amount\\n     */\\n    function computeReleasableAmount(\\n        bytes32 vestingScheduleId\\n    )\\n        external\\n        view\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\\n        returns (uint256)\\n    {\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\n            vestingScheduleId\\n        ];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information for a given identifier.\\n     * @return the vesting schedule structure information\\n     */\\n    function getVestingSchedule(\\n        bytes32 vestingScheduleId\\n    ) public view returns (VestingSchedule memory) {\\n        return vestingSchedules[vestingScheduleId];\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n     * @return the amount of tokens\\n     */\\n    function getWithdrawableAmount() public view returns (uint256) {\\n        return _token.balanceOf(address(this)) - vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @dev Computes the next vesting schedule identifier for a given holder address.\\n     */\\n    function computeNextVestingScheduleIdForHolder(\\n        address holder\\n    ) public view returns (bytes32) {\\n        return\\n            computeVestingScheduleIdForAddressAndIndex(\\n                holder,\\n                holdersVestingCount[holder]\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the last vesting schedule for a given holder address.\\n     */\\n    function getLastVestingScheduleForHolder(\\n        address holder\\n    ) external view returns (VestingSchedule memory) {\\n        return\\n            vestingSchedules[\\n                computeVestingScheduleIdForAddressAndIndex(\\n                    holder,\\n                    holdersVestingCount[holder] - 1\\n                )\\n            ];\\n    }\\n\\n    /**\\n     * @dev Computes the vesting schedule identifier for an address and an index.\\n     */\\n    function computeVestingScheduleIdForAddressAndIndex(\\n        address holder,\\n        uint256 index\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(holder, index));\\n    }\\n\\n    /**\\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\\n     * @return the amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(\\n        VestingSchedule memory vestingSchedule\\n    ) internal view returns (uint256) {\\n        // Retrieve the current time.\\n        uint256 currentTime = getCurrentTime();\\n        // If the current time is before the cliff, no tokens are releasable.\\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked) {\\n            return 0;\\n        }\\n        // If the current time is after the vesting period, all tokens are releasable,\\n        // minus the amount already released.\\n        else if (\\n            currentTime >= vestingSchedule.start + vestingSchedule.duration\\n        ) {\\n            return vestingSchedule.amountTotal - vestingSchedule.released;\\n        }\\n        // Otherwise, some tokens are releasable.\\n        else {\\n            // Compute the number of full vesting periods that have elapsed.\\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\\n            // Compute the amount of tokens that are vested.\\n            uint256 vestedAmount = (vestingSchedule.amountTotal *\\n                vestedSeconds) / vestingSchedule.duration;\\n            // Subtract the amount already released and return.\\n            return vestedAmount - vestingSchedule.released;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current time.\\n     * @return the current timestamp in seconds.\\n     */\\n    function getCurrentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x608193427f6eabd90fe2abc75acfa1fce156bd77c94f0be1eb949399a72ffcaa\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b5438038062001b548339810160408190526200003491620000b9565b6200003f3362000069565b600180556001600160a01b0381166200005757600080fd5b6001600160a01b0316608052620000eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000cc57600080fd5b81516001600160a01b0381168114620000e457600080fd5b9392505050565b608051611a386200011c600039600081816101410152818161085d01528181610b2b0152610d070152611a386000f3fe6080604052600436106100e55760003560e01c806313083617146100ee57806317e289e91461011257806321df0da7146101325780632e1a7d4d1461016e57806348deb4711461018e5780635a7bb69a146101a357806366afd8ef146101d9578063715018a6146101f95780637e913dc61461020e5780638af104da1461023b5780638da5cb5b1461025b57806390be10cc146102705780639ef346b414610285578063b75c7dc6146102a5578063ea1bb3d5146102c5578063f2fde38b146102e5578063f51321d714610305578063f7c469f014610325578063f9079b371461034557005b366100ec57005b005b3480156100fa57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561011e57600080fd5b506100ec61012d36600461167d565b610365565b34801561013e57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405161010991906116e4565b34801561017a57600080fd5b506100ec6101893660046116f8565b6107b6565b34801561019a57600080fd5b506004546100ff565b3480156101af57600080fd5b506100ff6101be366004611711565b6001600160a01b031660009081526005602052604090205490565b3480156101e557600080fd5b506100ec6101f436600461172c565b61088b565b34801561020557600080fd5b506100ec610bab565b34801561021a57600080fd5b5061022e610229366004611711565b610bbf565b604051610109919061174e565b34801561024757600080fd5b506100ff6102563660046117d9565b610c97565b34801561026757600080fd5b50610161610cda565b34801561027c57600080fd5b506100ff610ce9565b34801561029157600080fd5b5061022e6102a03660046116f8565b610d8a565b3480156102b157600080fd5b506100ec6102c03660046116f8565b610e31565b3480156102d157600080fd5b506100ff6102e03660046116f8565b610fed565b3480156102f157600080fd5b506100ec610300366004611711565b6110f8565b34801561031157600080fd5b5061022e6103203660046117d9565b611171565b34801561033157600080fd5b506100ff610340366004611711565b61118d565b34801561035157600080fd5b506100ff6103603660046116f8565b6111b1565b61036d611239565b80610376610ce9565b10156104025760405162461bcd60e51b815260206004820152604a60248201527f546f6b656e56657374696e673a2063616e6e6f7420637265617465207665737460448201527f696e67207363686564756c652062656361757365206e6f742073756666696369606482015269656e7420746f6b656e7360b01b608482015260a4015b60405180910390fd5b6000841161045d5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e604482015261020360f41b60648201526084016103f9565b600081116104ad5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e56657374696e673a20616d6f756e74206d757374206265203e203060448201526064016103f9565b60018310156105145760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e56657374696e673a20736c696365506572696f645365636f6e647360448201526c206d757374206265203e3d203160981b60648201526084016103f9565b848410156105745760405162461bcd60e51b815260206004820152602760248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e6044820152661e9031b634b33360c91b60648201526084016103f9565b600061057f8861118d565b9050600061058d8789611819565b90506040518061014001604052806001151581526020018a6001600160a01b03168152602001828152602001898152602001878152602001868152602001851515815260200184815260200160008152602001600015158152506003600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff02191690831515021790555060e0820151816006015561010082015181600701556101208201518160080160006101000a81548160ff021916908315150217905550905050826004546106d69190611819565b6004556002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018390556001600160a01b038a166000908152600560205260409020549061072f908290611819565b6001600160a01b038b1660008181526005602090815260409182902093909355805186815292830185905282018b9052606082018990526080820188905286151560a083015260c08201869052907f5dd2f0f5121d44031a18f4ec7685b97ce3bd9400feda582818aa28501f1fcf8c9060e00160405180910390a250505050505050505050565b6002600154036107d85760405162461bcd60e51b81526004016103f99061182c565b60026001556107e5611239565b806107ee610ce9565b10156108505760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e56657374696e673a206e6f7420656e6f756768207769746864726160448201526a7761626c652066756e647360a81b60648201526084016103f9565b6108846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611298565b5060018055565b6002600154036108ad5760405162461bcd60e51b81526004016103f99061182c565b6002600155600082815260036020526040902054829060ff166108e25760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff16156109145760405162461bcd60e51b81526004016103f9906118b1565b6000838152600360205260408120805490916101009091046001600160a01b0316331490610940610cda565b6001600160a01b0316336001600160a01b0316149050818061095f5750805b6109dc5760405162461bcd60e51b815260206004820152604260248201527f546f6b656e56657374696e673a206f6e6c792062656e6566696369617279206160448201527f6e64206f776e65722063616e2072656c656173652076657374656420746f6b656064820152616e7360f01b608482015260a4016103f9565b6040805161014081018252845460ff808216151583526001600160a01b03610100928390041660208401526001870154938301939093526002860154606083015260038601546080830152600486015460a083015260058601548316151560c0830152600686015460e083015260078601549082015260088501549091161515610120820152600090610a6e906112ef565b905085811015610ae65760405162461bcd60e51b815260206004820152603d60248201527f546f6b656e56657374696e673a2063616e6e6f742072656c6561736520746f6b60448201527f656e732c206e6f7420656e6f7567682076657374656420746f6b656e7300000060648201526084016103f9565b858460070154610af69190611819565b600785015583546004546101009091046001600160a01b031690610b1b9088906118f7565b600455610b526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168289611298565b8454604080518a8152602081018a90526101009092046001600160a01b0316917fcb2a5922ee4e0ad4c8e0e6c50604051f127a4ec5a779bb2afd1475b48eab9f95910160405180910390a2505060018055505050505050565b610bb3611239565b610bbd60006113bb565b565b610bc76115f1565b6001600160a01b03821660009081526005602052604081205460039190610bf6908590610256906001906118f7565b81526020808201929092526040908101600020815161014081018352815460ff808216151583526001600160a01b036101009283900416958301959095526001830154938201939093526002820154606082015260038201546080820152600482015460a082015260058201548416151560c0820152600682015460e082015260078201549281019290925260080154909116151561012082015292915050565b6040516001600160601b0319606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b6000546001600160a01b031690565b600480546040516370a0823160e01b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191610d3a913091016116e4565b602060405180830381865afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b919061190a565b610d8591906118f7565b905090565b610d926115f1565b50600090815260036020818152604092839020835161014081018552815460ff808216151583526001600160a01b0361010092839004169483019490945260018301549582019590955260028201546060820152928101546080840152600481015460a084015260058101548216151560c0840152600681015460e0840152600781015493830193909352600890920154909116151561012082015290565b610e39611239565b600081815260036020526040902054819060ff16610e695760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff1615610e9b5760405162461bcd60e51b81526004016103f9906118b1565b6000828152600360205260409020600581015460ff16610f0c5760405162461bcd60e51b815260206004820152602660248201527f546f6b656e56657374696e673a2076657374696e67206973206e6f74207265766044820152656f6361626c6560d01b60648201526084016103f9565b6040805161014081018252825460ff808216151583526001600160a01b03610100928390041660208401526001850154938301939093526002840154606083015260038401546080830152600484015460a083015260058401548316151560c0830152600684015460e083015260078401549082015260088301549091161515610120820152600090610f9e906112ef565b90508015610fb057610fb0848261088b565b600082600701548360060154610fc691906118f7565b905080600454610fd691906118f7565b6004555050600801805460ff191660011790555050565b600081815260036020526040812054829060ff1661101d5760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff161561104f5760405162461bcd60e51b81526004016103f9906118b1565b600083815260036020818152604092839020835161014081018552815460ff808216151583526001600160a01b0361010092839004169483019490945260018301549582019590955260028201546060820152928101546080840152600481015460a084015260058101548216151560c0840152600681015460e084015260078101549383019390935260088301541615156101208201526110f0906112ef565b949350505050565b611100611239565b6001600160a01b0381166111655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f9565b61116e816113bb565b50565b6111796115f1565b6111866102a08484610c97565b9392505050565b6001600160a01b038116600090815260056020526040812054610cd4908390610c97565b60006111bc60025490565b82106112145760405162461bcd60e51b815260206004820152602160248201527f546f6b656e56657374696e673a20696e646578206f7574206f6620626f756e646044820152607360f81b60648201526084016103f9565b6002828154811061122757611227611923565b90600052602060002001549050919050565b33611242610cda565b6001600160a01b031614610bbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f9565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112ea90849061140b565b505050565b6040810151600090429081108061130857508261012001515b156113165750600092915050565b8260800151836060015161132a9190611819565b8110611345578261010001518360e0015161118691906118f7565b600083606001518261135791906118f7565b60a0850151909150600061136b8284611939565b90506000611379838361195b565b905060008760800151828960e00151611392919061195b565b61139c9190611939565b9050876101000151816113af91906118f7565b98975050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611460826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114dd9092919063ffffffff16565b8051909150156112ea578080602001905181019061147e9190611972565b6112ea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f9565b60606110f08484600085856001600160a01b0385163b61153f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f9565b600080866001600160a01b0316858760405161155b91906119b3565b60006040518083038185875af1925050503d8060008114611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b50915091506115ad8282866115b8565b979650505050505050565b606083156115c7575081611186565b8251156115d75782518084602001fd5b8160405162461bcd60e51b81526004016103f991906119cf565b60405180610140016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081526020016000151581525090565b80356001600160a01b038116811461166a57600080fd5b919050565b801515811461116e57600080fd5b600080600080600080600060e0888a03121561169857600080fd5b6116a188611653565b96506020880135955060408801359450606088013593506080880135925060a08801356116cd8161166f565b8092505060c0880135905092959891949750929550565b6001600160a01b0391909116815260200190565b60006020828403121561170a57600080fd5b5035919050565b60006020828403121561172357600080fd5b61118682611653565b6000806040838503121561173f57600080fd5b50508035926020909101359150565b8151151581526101408101602083015161177360208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c08301516117af60c084018215159052565b5060e083810151908301526101008084015190830152610120928301511515929091019190915290565b600080604083850312156117ec57600080fd5b6117f583611653565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cd457610cd4611803565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602e908201527f546f6b656e56657374696e673a2076657374696e67207363686564756c65206e60408201526d1bdd081a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526026908201527f546f6b656e56657374696e673a2076657374696e67207363686564756c652072604082015265195d9bdad95960d21b606082015260800190565b81810381811115610cd457610cd4611803565b60006020828403121561191c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261195657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610cd457610cd4611803565b60006020828403121561198457600080fd5b81516111868161166f565b60005b838110156119aa578181015183820152602001611992565b50506000910152565b600082516119c581846020870161198f565b9190910192915050565b60208152600082518060208401526119ee81604085016020870161198f565b601f01601f1916919091016040019291505056fea264697066735822122089fffb44024a56b1823715f0e32a42c48692c940f1a2267b8bfdcbb73ef3a3ae64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e55760003560e01c806313083617146100ee57806317e289e91461011257806321df0da7146101325780632e1a7d4d1461016e57806348deb4711461018e5780635a7bb69a146101a357806366afd8ef146101d9578063715018a6146101f95780637e913dc61461020e5780638af104da1461023b5780638da5cb5b1461025b57806390be10cc146102705780639ef346b414610285578063b75c7dc6146102a5578063ea1bb3d5146102c5578063f2fde38b146102e5578063f51321d714610305578063f7c469f014610325578063f9079b371461034557005b366100ec57005b005b3480156100fa57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561011e57600080fd5b506100ec61012d36600461167d565b610365565b34801561013e57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405161010991906116e4565b34801561017a57600080fd5b506100ec6101893660046116f8565b6107b6565b34801561019a57600080fd5b506004546100ff565b3480156101af57600080fd5b506100ff6101be366004611711565b6001600160a01b031660009081526005602052604090205490565b3480156101e557600080fd5b506100ec6101f436600461172c565b61088b565b34801561020557600080fd5b506100ec610bab565b34801561021a57600080fd5b5061022e610229366004611711565b610bbf565b604051610109919061174e565b34801561024757600080fd5b506100ff6102563660046117d9565b610c97565b34801561026757600080fd5b50610161610cda565b34801561027c57600080fd5b506100ff610ce9565b34801561029157600080fd5b5061022e6102a03660046116f8565b610d8a565b3480156102b157600080fd5b506100ec6102c03660046116f8565b610e31565b3480156102d157600080fd5b506100ff6102e03660046116f8565b610fed565b3480156102f157600080fd5b506100ec610300366004611711565b6110f8565b34801561031157600080fd5b5061022e6103203660046117d9565b611171565b34801561033157600080fd5b506100ff610340366004611711565b61118d565b34801561035157600080fd5b506100ff6103603660046116f8565b6111b1565b61036d611239565b80610376610ce9565b10156104025760405162461bcd60e51b815260206004820152604a60248201527f546f6b656e56657374696e673a2063616e6e6f7420637265617465207665737460448201527f696e67207363686564756c652062656361757365206e6f742073756666696369606482015269656e7420746f6b656e7360b01b608482015260a4015b60405180910390fd5b6000841161045d5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e604482015261020360f41b60648201526084016103f9565b600081116104ad5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e56657374696e673a20616d6f756e74206d757374206265203e203060448201526064016103f9565b60018310156105145760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e56657374696e673a20736c696365506572696f645365636f6e647360448201526c206d757374206265203e3d203160981b60648201526084016103f9565b848410156105745760405162461bcd60e51b815260206004820152602760248201527f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e6044820152661e9031b634b33360c91b60648201526084016103f9565b600061057f8861118d565b9050600061058d8789611819565b90506040518061014001604052806001151581526020018a6001600160a01b03168152602001828152602001898152602001878152602001868152602001851515815260200184815260200160008152602001600015158152506003600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff02191690831515021790555060e0820151816006015561010082015181600701556101208201518160080160006101000a81548160ff021916908315150217905550905050826004546106d69190611819565b6004556002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018390556001600160a01b038a166000908152600560205260409020549061072f908290611819565b6001600160a01b038b1660008181526005602090815260409182902093909355805186815292830185905282018b9052606082018990526080820188905286151560a083015260c08201869052907f5dd2f0f5121d44031a18f4ec7685b97ce3bd9400feda582818aa28501f1fcf8c9060e00160405180910390a250505050505050505050565b6002600154036107d85760405162461bcd60e51b81526004016103f99061182c565b60026001556107e5611239565b806107ee610ce9565b10156108505760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e56657374696e673a206e6f7420656e6f756768207769746864726160448201526a7761626c652066756e647360a81b60648201526084016103f9565b6108846001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611298565b5060018055565b6002600154036108ad5760405162461bcd60e51b81526004016103f99061182c565b6002600155600082815260036020526040902054829060ff166108e25760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff16156109145760405162461bcd60e51b81526004016103f9906118b1565b6000838152600360205260408120805490916101009091046001600160a01b0316331490610940610cda565b6001600160a01b0316336001600160a01b0316149050818061095f5750805b6109dc5760405162461bcd60e51b815260206004820152604260248201527f546f6b656e56657374696e673a206f6e6c792062656e6566696369617279206160448201527f6e64206f776e65722063616e2072656c656173652076657374656420746f6b656064820152616e7360f01b608482015260a4016103f9565b6040805161014081018252845460ff808216151583526001600160a01b03610100928390041660208401526001870154938301939093526002860154606083015260038601546080830152600486015460a083015260058601548316151560c0830152600686015460e083015260078601549082015260088501549091161515610120820152600090610a6e906112ef565b905085811015610ae65760405162461bcd60e51b815260206004820152603d60248201527f546f6b656e56657374696e673a2063616e6e6f742072656c6561736520746f6b60448201527f656e732c206e6f7420656e6f7567682076657374656420746f6b656e7300000060648201526084016103f9565b858460070154610af69190611819565b600785015583546004546101009091046001600160a01b031690610b1b9088906118f7565b600455610b526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168289611298565b8454604080518a8152602081018a90526101009092046001600160a01b0316917fcb2a5922ee4e0ad4c8e0e6c50604051f127a4ec5a779bb2afd1475b48eab9f95910160405180910390a2505060018055505050505050565b610bb3611239565b610bbd60006113bb565b565b610bc76115f1565b6001600160a01b03821660009081526005602052604081205460039190610bf6908590610256906001906118f7565b81526020808201929092526040908101600020815161014081018352815460ff808216151583526001600160a01b036101009283900416958301959095526001830154938201939093526002820154606082015260038201546080820152600482015460a082015260058201548416151560c0820152600682015460e082015260078201549281019290925260080154909116151561012082015292915050565b6040516001600160601b0319606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b6000546001600160a01b031690565b600480546040516370a0823160e01b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191610d3a913091016116e4565b602060405180830381865afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b919061190a565b610d8591906118f7565b905090565b610d926115f1565b50600090815260036020818152604092839020835161014081018552815460ff808216151583526001600160a01b0361010092839004169483019490945260018301549582019590955260028201546060820152928101546080840152600481015460a084015260058101548216151560c0840152600681015460e0840152600781015493830193909352600890920154909116151561012082015290565b610e39611239565b600081815260036020526040902054819060ff16610e695760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff1615610e9b5760405162461bcd60e51b81526004016103f9906118b1565b6000828152600360205260409020600581015460ff16610f0c5760405162461bcd60e51b815260206004820152602660248201527f546f6b656e56657374696e673a2076657374696e67206973206e6f74207265766044820152656f6361626c6560d01b60648201526084016103f9565b6040805161014081018252825460ff808216151583526001600160a01b03610100928390041660208401526001850154938301939093526002840154606083015260038401546080830152600484015460a083015260058401548316151560c0830152600684015460e083015260078401549082015260088301549091161515610120820152600090610f9e906112ef565b90508015610fb057610fb0848261088b565b600082600701548360060154610fc691906118f7565b905080600454610fd691906118f7565b6004555050600801805460ff191660011790555050565b600081815260036020526040812054829060ff1661101d5760405162461bcd60e51b81526004016103f990611863565b60008181526003602052604090206008015460ff161561104f5760405162461bcd60e51b81526004016103f9906118b1565b600083815260036020818152604092839020835161014081018552815460ff808216151583526001600160a01b0361010092839004169483019490945260018301549582019590955260028201546060820152928101546080840152600481015460a084015260058101548216151560c0840152600681015460e084015260078101549383019390935260088301541615156101208201526110f0906112ef565b949350505050565b611100611239565b6001600160a01b0381166111655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f9565b61116e816113bb565b50565b6111796115f1565b6111866102a08484610c97565b9392505050565b6001600160a01b038116600090815260056020526040812054610cd4908390610c97565b60006111bc60025490565b82106112145760405162461bcd60e51b815260206004820152602160248201527f546f6b656e56657374696e673a20696e646578206f7574206f6620626f756e646044820152607360f81b60648201526084016103f9565b6002828154811061122757611227611923565b90600052602060002001549050919050565b33611242610cda565b6001600160a01b031614610bbd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f9565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112ea90849061140b565b505050565b6040810151600090429081108061130857508261012001515b156113165750600092915050565b8260800151836060015161132a9190611819565b8110611345578261010001518360e0015161118691906118f7565b600083606001518261135791906118f7565b60a0850151909150600061136b8284611939565b90506000611379838361195b565b905060008760800151828960e00151611392919061195b565b61139c9190611939565b9050876101000151816113af91906118f7565b98975050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611460826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114dd9092919063ffffffff16565b8051909150156112ea578080602001905181019061147e9190611972565b6112ea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f9565b60606110f08484600085856001600160a01b0385163b61153f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f9565b600080866001600160a01b0316858760405161155b91906119b3565b60006040518083038185875af1925050503d8060008114611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b50915091506115ad8282866115b8565b979650505050505050565b606083156115c7575081611186565b8251156115d75782518084602001fd5b8160405162461bcd60e51b81526004016103f991906119cf565b60405180610140016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081526020016000151581525090565b80356001600160a01b038116811461166a57600080fd5b919050565b801515811461116e57600080fd5b600080600080600080600060e0888a03121561169857600080fd5b6116a188611653565b96506020880135955060408801359450606088013593506080880135925060a08801356116cd8161166f565b8092505060c0880135905092959891949750929550565b6001600160a01b0391909116815260200190565b60006020828403121561170a57600080fd5b5035919050565b60006020828403121561172357600080fd5b61118682611653565b6000806040838503121561173f57600080fd5b50508035926020909101359150565b8151151581526101408101602083015161177360208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c08301516117af60c084018215159052565b5060e083810151908301526101008084015190830152610120928301511515929091019190915290565b600080604083850312156117ec57600080fd5b6117f583611653565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cd457610cd4611803565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602e908201527f546f6b656e56657374696e673a2076657374696e67207363686564756c65206e60408201526d1bdd081a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526026908201527f546f6b656e56657374696e673a2076657374696e67207363686564756c652072604082015265195d9bdad95960d21b606082015260800190565b81810381811115610cd457610cd4611803565b60006020828403121561191c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261195657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610cd457610cd4611803565b60006020828403121561198457600080fd5b81516111868161166f565b60005b838110156119aa578181015183820152602001611992565b50506000910152565b600082516119c581846020870161198f565b9190910192915050565b60208152600082518060208401526119ee81604085016020870161198f565b601f01601f1916919091016040019291505056fea264697066735822122089fffb44024a56b1823715f0e32a42c48692c940f1a2267b8bfdcbb73ef3a3ae64736f6c63430008130033",
  "devdoc": {
    "author": "@abdelhamidbakhtam, @akramDevelopment (PLAYA3ULL) @jourdanhaines (PLAYAY3ULL), @samthompsonkennedy (PLAYA3ULL)  To support ERC20 tokens for w3ULL",
    "kind": "dev",
    "methods": {
      "computeNextVestingScheduleIdForHolder(address)": {
        "details": "Computes the next vesting schedule identifier for a given holder address."
      },
      "computeReleasableAmount(bytes32)": {
        "returns": {
          "_0": "the vested amount"
        }
      },
      "computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
        "details": "Computes the vesting schedule identifier for an address and an index."
      },
      "constructor": {
        "details": "Creates a vesting contract.",
        "params": {
          "token_": "address of the ERC20 token contract"
        }
      },
      "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)": {
        "params": {
          "_amount": "total amount of tokens to be released at the end of the vesting",
          "_beneficiary": "address of the beneficiary to whom vested tokens are transferred",
          "_cliff": "duration in seconds of the cliff in which tokens will begin to vest",
          "_duration": "duration in seconds of the period in which the tokens will vest",
          "_revocable": "whether the vesting is revocable or not",
          "_slicePeriodSeconds": "duration of a slice period for the vesting in seconds",
          "_start": "start time of the vesting period"
        }
      },
      "getLastVestingScheduleForHolder(address)": {
        "details": "Returns the last vesting schedule for a given holder address."
      },
      "getToken()": {
        "details": "Returns the address of the ERC20 token managed by the vesting contract."
      },
      "getVestingIdAtIndex(uint256)": {
        "details": "Returns the vesting schedule id at the given index.",
        "returns": {
          "_0": "the vesting id"
        }
      },
      "getVestingSchedule(bytes32)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingSchedulesCount()": {
        "details": "Returns the number of vesting schedules managed by this contract.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesCountByBeneficiary(address)": {
        "details": "Returns the number of vesting schedules associated to a beneficiary.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesTotalAmount()": {
        "returns": {
          "_0": "the total amount of vesting schedules"
        }
      },
      "getWithdrawableAmount()": {
        "details": "Returns the amount of tokens that can be withdrawn by the owner.",
        "returns": {
          "_0": "the amount of tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(bytes32,uint256)": {
        "params": {
          "amount": "the amount to release",
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(bytes32)": {
        "params": {
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "the amount to withdraw"
        }
      }
    },
    "title": "PLAYA3ULL GAMES Vesting Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeReleasableAmount(bytes32)": {
        "notice": "Computes the vested amount of tokens for the given vesting schedule identifier."
      },
      "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)": {
        "notice": "Creates a new vesting schedule for a beneficiary."
      },
      "getVestingSchedule(bytes32)": {
        "notice": "Returns the vesting schedule information for a given identifier."
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "notice": "Returns the vesting schedule information for a given holder and index."
      },
      "getVestingSchedulesTotalAmount()": {
        "notice": "Returns the total amount of vesting schedules."
      },
      "release(bytes32,uint256)": {
        "notice": "Release vested amount of tokens."
      },
      "revoke(bytes32)": {
        "notice": "Revokes the vesting schedule for given identifier."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw the specified amount if possible."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 906,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 911,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)900_storage)"
      },
      {
        "astId": 913,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesTotalAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 917,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "holdersVestingCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(VestingSchedule)900_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenVesting.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)900_storage"
      },
      "t_struct(VestingSchedule)900_storage": {
        "encoding": "inplace",
        "label": "struct TokenVesting.VestingSchedule",
        "members": [
          {
            "astId": 881,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 883,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "beneficiary",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 885,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "cliff",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 887,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 889,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "slicePeriodSeconds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "revocable",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 895,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "amountTotal",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "released",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 899,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "revoked",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}