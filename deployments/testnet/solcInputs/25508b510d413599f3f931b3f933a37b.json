{
  "language": "Solidity",
  "sources": {
    "contracts/core/NativeNodePurchaser.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {IPLAYA3ULLNode} from \"./interfaces/INode.sol\";\r\nimport {IPriceOracle} from \"../oracle/price/interfaces/IPriceOracle.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games Native Node Purchaser Contract\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract facilitates the sale of PLAYA3ULL Nodes in\r\n *         3ULL utilising an external price oracle for calculating\r\n *         the sale of nodes in 3ULL.\r\n */\r\ncontract NativeNodePurchaser is Ownable {\r\n    /// @notice The PLAYA3ULL Node interface to mint to\r\n    IPLAYA3ULLNode public node;\r\n\r\n    /// @notice The Price Oracle to retrieve price data from\r\n    IPriceOracle public oracle;\r\n\r\n    /**\r\n     * @dev Reverts with an error when providing a value that is\r\n     *      insufficient for the transaction\r\n     *\r\n     * @param provided The value that was provided\r\n     * @param expected The value that was expected\r\n     */\r\n    error InsufficientValueProvided(uint256 provided, uint256 expected);\r\n\r\n    constructor(address _node, address _oracle) {\r\n        node = IPLAYA3ULLNode(_node);\r\n        oracle = IPriceOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a `count` of nodes to `to`\r\n     *\r\n     * @param to    The address to receive the nodes\r\n     * @param count The number of nodes to mint\r\n     */\r\n    function mint(address to, uint256 count) external payable {\r\n        // Verify the sent amount is the amount we expect, otherwise revert\r\n        uint256 expected = getPrice(count);\r\n        if (msg.value != expected) {\r\n            revert InsufficientValueProvided(msg.value, expected);\r\n        }\r\n\r\n        node.mint(to, count);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the price of a PLAYA3ULL Node in 3ULL\r\n     *         for a given `count`\r\n     *\r\n     * @param count The number of nodes to get the price for\r\n     */\r\n    function getPrice(uint256 count) public view returns (uint256) {\r\n        uint256 mintPrice = node.mintPrice(count);\r\n\r\n        // We need to convert the `mintPrice` from 6 decimals\r\n        // to 18 decimals, since that is what 3ULL uses\r\n        uint256 realPrice = (mintPrice / 1e6) * 1e18;\r\n\r\n        return oracle.getPriceIn(\"USDC\", \"3ULL\", realPrice);\r\n    }\r\n}\r\n"
    },
    "contracts/core/interfaces/INode.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLNode\r\n * @author Sam (PLAYA3ULL)\r\n * @notice IPLAYA3ULLNFT contains all external functions and\r\n *         structs for the PLAYA3ULL Node.\r\n */\r\n\r\ninterface IPLAYA3ULLNode {\r\n    struct NodeOwner {\r\n        /**\r\n         * @notice Number of nodes owned\r\n         */\r\n        uint256 NumNodes;\r\n        /**\r\n         * @notice Total claimed rewards, for new nodes this is the rewards that _would_ have been claimed given node existed at contract inception\r\n         */\r\n        uint256 ClaimedRewards;\r\n    }\r\n\r\n    function mint(address toAddress, uint256 amount) external;\r\n\r\n    function pendingRewards(address _owner) external view returns (uint256);\r\n\r\n    function claimRewards() external;\r\n\r\n    function claimFor(address account) external;\r\n\r\n    function mintPrice(uint256 amount) external view returns (uint256 _price);\r\n}\r\n"
    },
    "contracts/oracle/price/interfaces/IPriceOracle.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPriceOracle contains all external functions, structs\r\n *         and events and errors for the Price Oracle.\r\n */\r\ninterface IPriceOracle {\r\n    /**\r\n     * @dev Emit an event whenever a token is set or updated.\r\n     *\r\n     * @param symbol The token symbol.\r\n     */\r\n    event TokenUpdated(string indexed symbol);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token pair's price is set\r\n     *      or updated.\r\n     *\r\n     * @param symbolA The symbol of the `from` token.\r\n     * @param symbolB The symbol of the `to`, or `in` token.\r\n     * @param price   The new price of the tokenA in tokenB.\r\n     */\r\n    event PairPriceUpdated(\r\n        string indexed symbolA,\r\n        string indexed symbolB,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to set a token pair\r\n     *      price that is zero or less.\r\n     */\r\n    error InvalidPrice();\r\n\r\n    function getPriceIn(\r\n        string memory tokenFrom,\r\n        string memory tokenIn,\r\n        uint256 price\r\n    ) external view returns (uint256);\r\n\r\n    function getPairPrice(\r\n        string memory symbolA,\r\n        string memory symbolB\r\n    ) external view returns (uint256, uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}