{
  "language": "Solidity",
  "sources": {
    "contracts/nft/games/mars-colony/ColonyMarsNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\nimport \"../../../oracle/price/interfaces/IPriceOracle.sol\";\r\n\r\nimport {IColonyMarsNFT} from \"./interfaces/IColonyMarsNFT.sol\";\r\n\r\n/**\r\n * @title ColonyMarsNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract contains all storage and pricing\r\n *         data for the Colony Mars NFT tokens.\r\n */\r\ncontract ColonyMarsNFT is\r\n    Ownable,\r\n    IColonyMarsNFT,\r\n    ERC721,\r\n    ERC165Storage,\r\n    IERC2981\r\n{\r\n    /// @notice The total number of tokens that currently exist.\r\n    uint public totalSupply;\r\n\r\n    /// @notice The base URI for tokens and where their metadata\r\n    ///         is stored.\r\n    string public baseTokenURI;\r\n\r\n    /// @notice The address where royalties will be sent.\r\n    address public royaltyAddress;\r\n\r\n    /// @notice The interface for the Price Oracle to retrieve\r\n    ///         pricing data from.\r\n    IPriceOracle public oracle;\r\n\r\n    /// @notice Mapping of addresses that are allowed to mint nodes\r\n    mapping(address => bool) public adminMinters;\r\n\r\n    /// @dev The interface ID of the ERC2981 NFT Royalty Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /// @dev The interface ID of the ERC721 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @dev Tracks the NFT that exists (or not) at a given index.\r\n    mapping(uint => Building) private nfts;\r\n\r\n    /// @dev Tracks the mint data for a given tiered building at a given index.\r\n    mapping(uint => mapping(uint => BuildingDetails)) private buildingDetails;\r\n\r\n    /// @dev Modifier for allowing set addresses to mint for other addresses.\r\n    modifier onlyMinter() {\r\n        if (adminMinters[msg.sender] != true) {\r\n            revert UnauthorizedMinter();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _oracleAddress\r\n    ) ERC721(_name, _symbol) {\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n        oracle = IPriceOracle(_oracleAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token URI where the metadata is stored for\r\n     *         a given token ID.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve the URI for.\r\n     *\r\n     * @return The token metadata URI.\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return\r\n            string(abi.encodePacked(baseTokenURI, Strings.toString(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the given interface is supported by\r\n     *         this contract.\r\n     *\r\n     * @param interfaceId   The ID of the interface to check.\r\n     *\r\n     * @return Whether the given `interfaceId` is supported.\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, IERC165, ERC165Storage)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the NFT at the given index.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve.\r\n     *\r\n     * @return The NFT token data.\r\n     */\r\n    function getNFT(uint256 tokenId) external view returns (Building memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return nfts[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current number of tokens that exist.\r\n     *\r\n     * @return The total number of tokens in existence.\r\n     */\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the current price of 3ULL from the Price\r\n     *         Oracle.\r\n     *\r\n     * @param _price    The USD price to get in 3ULL.\r\n     *\r\n     * @return The input price in 3ULL.\r\n     */\r\n    function getBullPrice(uint256 _price) public view returns (uint256) {\r\n        return oracle.getPriceIn(\"USDC\", \"3ULL\", _price);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the royalty information for this ERC2981 contract.\r\n     *\r\n     * @param _salePrice    The price of the sale to get royalty information\r\n     *                      for.\r\n     *\r\n     * @return receiver         The receiving address for the royalties.\r\n     * @return royaltyAmount    The amount of royalties.\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        uint256 _salePrice\r\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\r\n        return (royaltyAddress, (_salePrice * 500) / 10000);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the building details for a given building and tier.\r\n     *         A buildings details includes data such as the type of building,\r\n     *         the purchase price, the current minted amount of that building,\r\n     *         and the total number of that building that can be minted.\r\n     *\r\n     * @param buildingId The initial ID of the building in the details\r\n     *                   mapping.\r\n     * @param tierId     The building tier ID.\r\n     *\r\n     * @return The building details for the given building and tier IDs.\r\n     */\r\n    function getBuildingDetails(\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) external view returns (BuildingDetails memory) {\r\n        return buildingDetails[buildingId][tierId];\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a building with the given tier to the sender. This\r\n     *         function is payable and therefore requires payment in 3ULL in\r\n     *         order to mint.\r\n     *\r\n     * @param buildingId The building that is to be minted.\r\n     * @param tierId     The tier of the building to mint.\r\n     */\r\n    function mint(uint256 buildingId, uint256 tierId) external payable {\r\n        _assertValidValueProvided(buildingId, tierId);\r\n\r\n        _mintBuilding(msg.sender, buildingId, tierId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows an address toggled as an admin minter to mint a building\r\n     *         for an address.\r\n     *\r\n     * @param to            The address that will receive the minted building.\r\n     * @param buildingId    The building index to mint.\r\n     * @param tierId        The building tier that will be minted.\r\n     */\r\n    function mintFor(\r\n        address to,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) external onlyMinter {\r\n        _mintBuilding(to, buildingId, tierId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the details of a building.\r\n     *\r\n     * @param buildingId        The index that will be used to lookup and\r\n     *                          mutate this building at.\r\n     * @param _buildingType     The type or category of the building.\r\n     * @param _maxCountPerTier  The maximum of this building that can be\r\n     *                          minted at each tier.\r\n     * @param _tierPrices       The building prices at each tier, must be\r\n     *                          the same length as the _maxCountPerTier\r\n     *                          parameter.\r\n     */\r\n    function setBuildingDetails(\r\n        uint256 buildingId,\r\n        BuildingType _buildingType,\r\n        uint256[] memory _maxCountPerTier,\r\n        uint256[] memory _tierPrices\r\n    ) external onlyOwner {\r\n        if (_maxCountPerTier.length != _tierPrices.length) {\r\n            revert ArraysDoNotMatch();\r\n        }\r\n\r\n        for (uint i = 0; i < _maxCountPerTier.length; i++) {\r\n            uint256 _minted = 0;\r\n            if (buildingDetails[buildingId][i].max > 0) {\r\n                // If the maximum value has been set, then we can assume\r\n                // that we are updating the building details, so retrieve\r\n                // the current minted amount.\r\n                _minted = buildingDetails[buildingId][i].minted;\r\n            }\r\n\r\n            buildingDetails[buildingId][i] = BuildingDetails({\r\n                buildingType: _buildingType,\r\n                price: _tierPrices[i],\r\n                minted: _minted,\r\n                max: _maxCountPerTier[i]\r\n            });\r\n\r\n            emit BuildingTierUpdated(\r\n                buildingId,\r\n                i,\r\n                _buildingType,\r\n                _maxCountPerTier[i],\r\n                _tierPrices[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to update the price of a building tier.\r\n     *\r\n     * @param buildingId    The ID of the building to update.\r\n     * @param tierId        The building tier ID to update.\r\n     * @param newPrice      The new price of the building tier.\r\n     */\r\n    function updateTierPrice(\r\n        uint256 buildingId,\r\n        uint256 tierId,\r\n        uint256 newPrice\r\n    ) external onlyOwner {\r\n        buildingDetails[buildingId][tierId].price = newPrice;\r\n\r\n        emit BuildingTierUpdated(\r\n            buildingId,\r\n            tierId,\r\n            buildingDetails[buildingId][tierId].buildingType,\r\n            buildingDetails[buildingId][tierId].max,\r\n            newPrice\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address where royalties will be sent.\r\n     *\r\n     * @param _royaltyAddress   The address that will receive royalties.\r\n     */\r\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\r\n        royaltyAddress = _royaltyAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the base token metadata URI.\r\n     *\r\n     * @param _newBaseTokenURI  The new base token URI.\r\n     */\r\n    function setBaseTokenURI(\r\n        string memory _newBaseTokenURI\r\n    ) external onlyOwner {\r\n        baseTokenURI = _newBaseTokenURI;\r\n\r\n        emit UpdatedBaseTokenURI(baseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @notice Registers that this contract does support a given interface ID.\r\n     *\r\n     * @param _interfaceId  The ID of the interface to register.\r\n     */\r\n    function registerInterface(bytes4 _interfaceId) external onlyOwner {\r\n        _registerInterface(_interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles whether the given address can mint without requiring\r\n     *         payment or not.\r\n     *\r\n     * @param minter The address of the minter to toggle.\r\n     */\r\n    function toggleAdminMinter(address minter) external onlyOwner {\r\n        adminMinters[minter] = !adminMinters[minter];\r\n\r\n        emit AdminMinterToggled(minter, adminMinters[minter]);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a building at a certain tier, to a\r\n     *      given address.\r\n     *\r\n     * @param to             The receiving address of the newly minted\r\n     *                       token/building.\r\n     * @param _buildingId    The ID of the building, or type of building to\r\n     *                       mint.\r\n     * @param _tierId        The tier of the building to mint.\r\n     */\r\n    function _mintBuilding(\r\n        address to,\r\n        uint256 _buildingId,\r\n        uint256 _tierId\r\n    ) internal {\r\n        _assertTierNotMintedOut(_buildingId, _tierId);\r\n\r\n        buildingDetails[_buildingId][_tierId].minted++;\r\n\r\n        nfts[totalSupply] = Building({\r\n            buildingId: _buildingId,\r\n            tierId: _tierId,\r\n            buildingType: buildingDetails[_buildingId][_tierId].buildingType\r\n        });\r\n\r\n        _safeMint(to, totalSupply);\r\n\r\n        emit TokenMinted(to, totalSupply);\r\n\r\n        totalSupply++;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given building\r\n     *      and tier has reached the maximum number of mints.\r\n     *\r\n     * @param buildingId    The ID of the building.\r\n     * @param tierId        The ID of the building tier to verify\r\n     *                      that it has or has not minted out.\r\n     */\r\n    function _assertTierNotMintedOut(\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) internal view {\r\n        if (\r\n            buildingDetails[buildingId][tierId].minted ==\r\n            buildingDetails[buildingId][tierId].max\r\n        ) {\r\n            revert BuildingTierMintedOut(\r\n                buildingId,\r\n                tierId,\r\n                buildingDetails[buildingId][tierId].max\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given value in a\r\n     *      payable transaction is invalid.\r\n     *\r\n     * @param buildingId    The ID of the building.\r\n     * @param tierId        The ID of the building tier to verify the\r\n     *                      price.\r\n     */\r\n    function _assertValidValueProvided(\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) internal view {\r\n        uint256 basePrice = buildingDetails[buildingId][tierId].price;\r\n        uint256 convertedPrice = getBullPrice(basePrice);\r\n\r\n        if (msg.value != convertedPrice) {\r\n            revert InsufficientValueProvided(msg.value, convertedPrice);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given token ID does\r\n     *      not exist.\r\n     *\r\n     * @param tokenId   The ID of the token to verify if exists.\r\n     */\r\n    function _assertTokenExists(uint256 tokenId) internal view {\r\n        if (!_exists(tokenId)) {\r\n            revert TokenDoesNotExist();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/oracle/price/interfaces/IPriceOracle.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPriceOracle contains all external functions, structs\r\n *         and events and errors for the Price Oracle.\r\n */\r\ninterface IPriceOracle {\r\n    /**\r\n     * @dev Emit an event whenever a token is set or updated.\r\n     *\r\n     * @param symbol The token symbol.\r\n     */\r\n    event TokenUpdated(string indexed symbol);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token pair's price is set\r\n     *      or updated.\r\n     *\r\n     * @param symbolA The symbol of the `from` token.\r\n     * @param symbolB The symbol of the `to`, or `in` token.\r\n     * @param price   The new price of the tokenA in tokenB.\r\n     */\r\n    event PairPriceUpdated(\r\n        string indexed symbolA,\r\n        string indexed symbolB,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to set a token pair\r\n     *      price that is zero or less.\r\n     */\r\n    error InvalidPrice();\r\n\r\n    function getPriceIn(\r\n        string memory tokenFrom,\r\n        string memory tokenIn,\r\n        uint256 price\r\n    ) external view returns (uint256);\r\n\r\n    function getPairPrice(\r\n        string memory symbolA,\r\n        string memory symbolB\r\n    ) external view returns (uint256, uint256);\r\n}\r\n"
    },
    "contracts/nft/games/mars-colony/interfaces/IColonyMarsNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IColonyMarsNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IColonyMarsNFT contains all external functions, structs,\r\n *         events, and errors for the Colony Mars NFT.\r\n */\r\ninterface IColonyMarsNFT {\r\n    /**\r\n     * @dev Refers to the possible building types that can\r\n     *      exist, and what the minted building is.\r\n     */\r\n    enum BuildingType {\r\n        FARM,\r\n        MAKER,\r\n        DECORATION,\r\n        TREE\r\n    }\r\n\r\n    /**\r\n     * @dev A building contains three components: a numeric\r\n     *      index for the building, a numeric index for the\r\n     *      tier of the building, and the type of building.\r\n     */\r\n    struct Building {\r\n        uint256 buildingId;\r\n        uint256 tierId;\r\n        BuildingType buildingType;\r\n    }\r\n\r\n    /**\r\n     * @dev The details for a building outline the required\r\n     *      data to be stored on-chain such as the price of\r\n     *      the building, the number of them minted and the\r\n     *      max of the tier that can be minted.\r\n     */\r\n    struct BuildingDetails {\r\n        BuildingType buildingType;\r\n        uint256 price;\r\n        uint256 minted;\r\n        uint256 max;\r\n    }\r\n\r\n    /**\r\n     * @dev Emit an event whenever a buildings tier is updated.\r\n     *\r\n     * @param buildingId    The index of the building.\r\n     * @param tierId        The index of the building tier.\r\n     * @param maxCount      The number of tokens that can be minted at this tier.\r\n     * @param price         The price of the token at this tier.\r\n     */\r\n    event BuildingTierUpdated(\r\n        uint256 indexed buildingId,\r\n        uint256 indexed tierId,\r\n        BuildingType,\r\n        uint256 maxCount,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token is minted.\r\n     *\r\n     * @param to        The address that the token was minted\r\n     *                  to.\r\n     * @param tokenId   The ID of the token that was minted.\r\n     */\r\n    event TokenMinted(address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the royalty address is updated.\r\n     *\r\n     * @param royalty   The royalty address that has been set.\r\n     */\r\n    event RoyaltyAddressUpdated(address royalty);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the base token URI is updated.\r\n     *\r\n     * @param uri   The new base token uri.\r\n     */\r\n    event UpdatedBaseTokenURI(string uri);\r\n\r\n    /**\r\n     * @notice                 Emitted when an address' minter access is toggled\r\n     * @param minterAddress    The address of the minter\r\n     * @param canMint          Whether the toggled address can mint\r\n     */\r\n    event AdminMinterToggled(address minterAddress, bool canMint);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a building tier\r\n     *      that has minted out.\r\n     *\r\n     * @param buildingId The ID of the building.\r\n     * @param tierId     The ID of the tier that the building belongs.\r\n     * @param max        The maximum number of this tier that can be\r\n     *                   minted.\r\n     */\r\n    error BuildingTierMintedOut(\r\n        uint256 buildingId,\r\n        uint256 tierId,\r\n        uint256 max\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when a given value that was provided\r\n     *      was not equal to an expected value.\r\n     */\r\n    error InsufficientValueProvided(uint256 provided, uint256 expected);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to access a token ID\r\n     *      that does not exist.\r\n     */\r\n    error TokenDoesNotExist();\r\n\r\n    /**\r\n     * @dev Revert with an error when supplying two arrays that were\r\n     *      meant to match, but didn't.\r\n     */\r\n    error ArraysDoNotMatch();\r\n\r\n    /**\r\n     * @dev Revert with an error when an address attempts to mint for\r\n     *      without having access to that function.\r\n     */\r\n    error UnauthorizedMinter();\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/core/Node.sol": {
      "content": "pragma solidity 0.8.17;\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"../avalanche/interfaces/INativeMinter.sol\";\r\n\r\nimport \"./interfaces/INode.sol\";\r\nimport \"./interfaces/INodeEventsAndErrors.sol\";\r\n\r\n///\r\n/// @title PLAYA3ULL Games Node NFT and Rewards Contract\r\n/// @author Sam (PLAYA3ULL), Jourdan (PLAYA3ULL), Jeeva (Helix)\r\n///\r\n\r\ncontract PLAYA3ULLNode is\r\n    ERC721,\r\n    Ownable,\r\n    IPLAYA3ULLNodeEventsAndErrors,\r\n    IPLAYA3ULLNode\r\n{\r\n    /// @dev Avalanche Subnet native minter precompile - https://docs.avax.network/subnets/customize-a-subnet#minting-native-coins\r\n    INativeMinter immutable nativeMinter;\r\n\r\n    /// @notice Node holdings mapped to owner\r\n    mapping(address => NodeOwner) public holdingsOf;\r\n\r\n    /// @notice Mapping of addresses that are allowed to mint nodes\r\n    mapping(address => bool) public adminMinters;\r\n\r\n    /// @notice Epoch size in seconds\r\n    uint256 public immutable epochSizeSeconds;\r\n\r\n    /// @notice Rewards earnt per epoch\r\n    uint256 public rewardPerEpoch;\r\n\r\n    /// @notice Rewards accumlated per node since contract creation / node start\r\n    uint256 public lifetimeAccRewardsPerNode;\r\n\r\n    /// @notice The time up to which the rewards were last calculated from `updatePool()`\r\n    uint256 public lastRewardTimestamp;\r\n\r\n    /// @notice Total nodes currently in circulation\r\n    uint256 public totalSupply;\r\n\r\n    /// @notice Maximum number of nodes, constant set to 50,000 as per whitepaper\r\n    uint256 public immutable cap;\r\n\r\n    /// @notice Maximum number of nodes purchased at once, constant set to 25 per transaction\r\n    uint256 public constant mintMax = 25;\r\n\r\n    /// @notice How many nodes sold to increase the bracket\r\n    uint256 public constant bracketSize = 100;\r\n\r\n    /// @notice Current node price\r\n    uint256 public price;\r\n\r\n    /// @notice Price increase per `bracketSize` sold\r\n    uint256 public priceIncrease;\r\n\r\n    /// @notice Next price increase amount\r\n    uint256 public nextPriceIncrease;\r\n\r\n    /// @notice Base token URL to prefit the `tokenURI()`\r\n    string public baseTokenURI;\r\n\r\n    /// @dev Modifier for only allowing set addresses to mint\r\n    ///      nodes\r\n    modifier onlyMinter() {\r\n        require(adminMinters[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _epochSizeSeconds,\r\n        uint256 _rewardPerEpoch,\r\n        INativeMinter _nativeMinter,\r\n        uint256 _cap\r\n    ) ERC721(\"PLAYA3ULL NODE\", \"3ULL NODE\") {\r\n        lastRewardTimestamp = block.timestamp;\r\n        nativeMinter = _nativeMinter;\r\n\r\n        epochSizeSeconds = _epochSizeSeconds;\r\n        rewardPerEpoch = _rewardPerEpoch;\r\n\r\n        cap = _cap;\r\n\r\n        priceIncrease = 100 * (10**6); // 100 USD\r\n        price = 100 * (10**6); // Starting price of 100 USD\r\n        nextPriceIncrease = 100;\r\n    }\r\n\r\n    ///\r\n    /// @notice Ensures all nodes have been sold prior to transfer, and performs transfer logic (rewards need to be claimed before transfer)\r\n    ///\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from != address(0)) {\r\n            _assertAllNodesSold();\r\n\r\n            NodeOwner storage currentOwner = holdingsOf[from];\r\n            NodeOwner storage newOwner = holdingsOf[to];\r\n\r\n            // Rewards need to be claimed prior to transfer otherwise they are lost\r\n            claimFor(from);\r\n\r\n            currentOwner.NumNodes--;\r\n            currentOwner.ClaimedRewards -= lifetimeAccRewardsPerNode;\r\n\r\n            updatePool();\r\n\r\n            newOwner.NumNodes++;\r\n            newOwner.ClaimedRewards += lifetimeAccRewardsPerNode;\r\n\r\n            emit NodeTransferred(from, to, tokenId);\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// @notice Caculates the current owners pending rewards\r\n    /// @dev The pending rewards will not show correctly, unless `updatePool()` has been called\r\n    /// @param _owner The owner to return the pending rewards for\r\n    /// @return Total pending rewards for a given node owner\r\n    ///\r\n    function pendingRewards(address _owner) external view returns (uint256) {\r\n        NodeOwner storage nodeOwner = holdingsOf[_owner];\r\n\r\n        uint256 _lifetimeScaledAccRewardsPerNode = lifetimeAccRewardsPerNode;\r\n\r\n        if (\r\n            block.timestamp > (lastRewardTimestamp + epochSizeSeconds) &&\r\n            totalSupply != 0\r\n        ) {\r\n            uint256 epochsToReward = (block.timestamp - lastRewardTimestamp) /\r\n                epochSizeSeconds;\r\n            uint256 reward = epochsToReward * rewardPerEpoch;\r\n            _lifetimeScaledAccRewardsPerNode =\r\n                _lifetimeScaledAccRewardsPerNode +\r\n                (reward / totalSupply);\r\n        }\r\n\r\n        return\r\n            nodeOwner.NumNodes *\r\n            _lifetimeScaledAccRewardsPerNode -\r\n            nodeOwner.ClaimedRewards;\r\n    }\r\n\r\n    ///\r\n    /// @notice Updates the rewards pool\r\n    /// @dev Updates `lastRewardTimestamp` & `lifetimeAccRewardsPerNode` to ensure rewards are updated for current epoch\r\n    ///\r\n    function updatePool() public {\r\n        if (block.timestamp < (lastRewardTimestamp + epochSizeSeconds)) {\r\n            return;\r\n        }\r\n\r\n        uint256 epochsToReward = (block.timestamp - lastRewardTimestamp) /\r\n            epochSizeSeconds;\r\n        lastRewardTimestamp =\r\n            lastRewardTimestamp +\r\n            (epochsToReward * epochSizeSeconds);\r\n\r\n        if (totalSupply == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 totalRewardsForPeriod = epochsToReward * rewardPerEpoch;\r\n        lifetimeAccRewardsPerNode =\r\n            lifetimeAccRewardsPerNode +\r\n            (totalRewardsForPeriod / totalSupply);\r\n\r\n        emit PoolUpdated(epochsToReward, totalRewardsForPeriod);\r\n    }\r\n\r\n    ///\r\n    /// @notice mints the node to an owner\r\n    /// @param ownerAddress The wallet the node/s are minted to\r\n    /// @param amount Number of nodes to mint\r\n    ///\r\n    function mintFor(address ownerAddress, uint256 amount) private {\r\n        uint256 preTotalSupply = totalSupply;\r\n\r\n        _assertMintAmount(amount);\r\n        updatePool();\r\n\r\n        NodeOwner storage owner = holdingsOf[ownerAddress];\r\n\r\n        owner.NumNodes += amount;\r\n        totalSupply += amount;\r\n        owner.ClaimedRewards += amount * lifetimeAccRewardsPerNode;\r\n\r\n        if (totalSupply > nextPriceIncrease) {\r\n            nextPriceIncrease += bracketSize;\r\n            price += priceIncrease;\r\n            emit PriceChanged(price);\r\n        }\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            _safeMint(ownerAddress, preTotalSupply + i);\r\n        }\r\n\r\n        emit NodesMinted(ownerAddress, amount);\r\n    }\r\n\r\n    ///\r\n    /// @notice Allows an admin minter to mint a node for an address.\r\n    ///         This is to support cross-chain minting and migration.\r\n    /// @param toAddress The wallet the node(s) are minted to\r\n    /// @param amount The number of nodes that will be minted\r\n    ///\r\n    function mint(address toAddress, uint256 amount) external onlyMinter {\r\n        mintFor(toAddress, amount);\r\n    }\r\n\r\n    ///\r\n    /// @notice Claim rewards helper, to claim for the caller\r\n    ///\r\n    function claimRewards() external {\r\n        claimFor(msg.sender);\r\n    }\r\n\r\n    ///\r\n    /// @notice Claim rewards for a given address\r\n    /// @param account The address to claim rewards for\r\n    ///\r\n    function claimFor(address account) public {\r\n        _assertNodeOwnership(account);\r\n\r\n        NodeOwner storage owner = holdingsOf[account];\r\n\r\n        updatePool();\r\n\r\n        // TODO: if claimed rewards are greater than totalclaimedrewardsscaled\r\n        uint256 totalClaimedRewardsScaled = (owner.NumNodes *\r\n            lifetimeAccRewardsPerNode);\r\n        uint256 _rewardsClaimed = totalClaimedRewardsScaled -\r\n            owner.ClaimedRewards;\r\n        owner.ClaimedRewards = totalClaimedRewardsScaled;\r\n\r\n        nativeMinter.mintNativeCoin(account, _rewardsClaimed);\r\n\r\n        emit RewardsClaimed(account, _rewardsClaimed);\r\n    }\r\n\r\n    ///\r\n    /// @notice Disqualifies nodes from receiving rewards for a single day (24 epochs)\r\n    ///     This will be centralized in Stage One, off-chain logic will be decentralized in Stage Two\r\n    /// @dev We increase the `lifetimeAccRewardsPerNode` for the new reward distribution\r\n    ///     Increase the `ClaimedRewards` for each of the disqualified nodes\r\n    ///     Thus artificially decreasing the amount they can claim\r\n    ///     If `totalSupply` is `1000` and we disqualify `100` nodes, the rewards should be distributed\r\n    ///     `rewardPerNode = (rewardPerEpoch * 24) / 900` as they are disqualified from 24 epochs (a day)\r\n    /// @param accounts An array of addresses to disqualify\r\n    /// @param numNodes Corresponding number of nodes that didn't qualify for a particular\r\n    ///\r\n    function disqualifyNodes(\r\n        address[] memory accounts,\r\n        uint256[] memory numNodes\r\n    ) public onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 totalUnqualifiedNodes;\r\n        for (uint256 i = 0; i < numNodes.length; ) {\r\n            unchecked {\r\n                totalUnqualifiedNodes += numNodes[i];\r\n                i++;\r\n            }\r\n        }\r\n\r\n        uint256 rewardRemovedPerNode = (rewardPerEpoch * 24) /\r\n            (totalSupply - totalUnqualifiedNodes);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ) {\r\n            holdingsOf[accounts[i]].ClaimedRewards +=\r\n                rewardRemovedPerNode *\r\n                numNodes[i];\r\n\r\n            emit NodeDisqualified(accounts[i], numNodes[i]);\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        lifetimeAccRewardsPerNode += rewardRemovedPerNode;\r\n\r\n        emit RewardsAdjustedDisqualified(\r\n            rewardRemovedPerNode,\r\n            totalUnqualifiedNodes,\r\n            totalSupply - totalUnqualifiedNodes\r\n        );\r\n\r\n        updatePool();\r\n    }\r\n\r\n    ///\r\n    /// @notice The expected mint price for the number of nodes\r\n    /// @param amount The number of notes to get the price for\r\n    /// @return _price Price of the nodes\r\n    ///\r\n    function mintPrice(uint256 amount) public view returns (uint256 _price) {\r\n        _assertMintAmount(amount);\r\n        uint256 supplyAfterMint = totalSupply + amount;\r\n\r\n        if ((supplyAfterMint) > nextPriceIncrease) {\r\n            uint256 difference = supplyAfterMint - nextPriceIncrease;\r\n            uint256 lowerPrice = (amount - difference) * price;\r\n            uint256 upperPrice = difference * (price + priceIncrease);\r\n\r\n            _price = upperPrice + lowerPrice;\r\n        } else {\r\n            _price = amount * price;\r\n        }\r\n    }\r\n\r\n    ///\r\n    /// @notice Base URI for computing `tokenURI`. If set, the resulting URI for each token will be the concatenation of the baseURI and the tokenId\r\n    //\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    ///\r\n    /// @notice Sets `baseTokenURI`\r\n    /// @param _baseTokenURI The new `baseTokenURU`\r\n    ///\r\n    function setBaseTokenURI(string memory _baseTokenURI) public onlyOwner {\r\n        baseTokenURI = _baseTokenURI;\r\n    }\r\n\r\n    ///\r\n    /// @notice Set the price increase per 100 nodes sold, this can only  increase from the current value as to not rip off previous purchasers\r\n    /// @param _priceIncrease The new `priceIncrease`\r\n    ///\r\n    function setPriceIncrease(uint256 _priceIncrease) external onlyOwner {\r\n        _assertNewLessThanPrevious(_priceIncrease, priceIncrease);\r\n        priceIncrease = _priceIncrease;\r\n    }\r\n\r\n    ///\r\n    /// @notice Set the base, this can only increase from the current value as to not rip off previous purchasers\r\n    /// @param _price The new `price`\r\n    ///\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        _assertNewLessThanPrevious(_price, price);\r\n        price = _price;\r\n        emit PriceChanged(price);\r\n    }\r\n\r\n    ///\r\n    /// @notice Toggles whether the given address can mint or not\r\n    /// @param minter The address of the minter to toggle\r\n    ///\r\n    function toggleAdminMinter(address minter) external onlyOwner {\r\n        adminMinters[minter] = !adminMinters[minter];\r\n\r\n        emit AdminMinterToggled(minter, adminMinters[minter]);\r\n    }\r\n\r\n    function _assertAllNodesSold() internal view {\r\n        if (totalSupply < cap) {\r\n            revert AllNodesNotSold();\r\n        }\r\n    }\r\n\r\n    function _assertMintAmount(uint256 _amount) internal view {\r\n        if (_amount == 0) {\r\n            revert CannotMintZero();\r\n        }\r\n\r\n        if (_amount > mintMax) {\r\n            revert CannotMintMoreThanLimit();\r\n        }\r\n\r\n        if (_amount + totalSupply > cap) {\r\n            revert CannotMintMoreThanCap();\r\n        }\r\n    }\r\n\r\n    function _assertNodeOwnership(address _owner) internal view {\r\n        if (holdingsOf[_owner].NumNodes == 0) {\r\n            revert NoNodes();\r\n        }\r\n    }\r\n\r\n    function _assertNewLessThanPrevious(uint256 _new, uint256 _previous)\r\n        internal\r\n        pure\r\n    {\r\n        if (_new < _previous) {\r\n            revert NewLessThanPrevious();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/avalanche/interfaces/INativeMinter.sol": {
      "content": "// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\r\n// See the file LICENSE for licensing terms.\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./IAllowList.sol\";\r\n\r\ninterface INativeMinter is IAllowList {\r\n  // Mint [amount] number of native coins and send to [addr]\r\n  function mintNativeCoin(address addr, uint256 amount) external;\r\n}"
    },
    "contracts/core/interfaces/INode.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLNode\r\n * @author Sam (PLAYA3ULL)\r\n * @notice IPLAYA3ULLNFT contains all external functions and\r\n *         structs for the PLAYA3ULL Node.\r\n */\r\n\r\ninterface IPLAYA3ULLNode {\r\n    struct NodeOwner {\r\n        /**\r\n         * @notice Number of nodes owned\r\n         */\r\n        uint256 NumNodes;\r\n        /**\r\n         * @notice Total claimed rewards, for new nodes this is the rewards that _would_ have been claimed given node existed at contract inception\r\n         */\r\n        uint256 ClaimedRewards;\r\n    }\r\n\r\n    function mint(address toAddress, uint256 amount) external;\r\n\r\n    function pendingRewards(address _owner) external view returns (uint256);\r\n\r\n    function claimRewards() external;\r\n\r\n    function claimFor(address account) external;\r\n\r\n    function mintPrice(uint256 amount) external view returns (uint256 _price);\r\n}\r\n"
    },
    "contracts/core/interfaces/INodeEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\ninterface IPLAYA3ULLNodeEventsAndErrors {\r\n    /// @notice         A node was minted\r\n    /// @param owner    The new owner of the new node\r\n    /// @param amount   Number of nodes minted\r\n    event NodesMinted(address owner, uint256 amount);\r\n\r\n    /// @notice         A node was transferred\r\n    /// @param from     Where the node was transfered from\r\n    /// @param to       Where the node was transferred to\r\n    /// @param nodeId   The node that was transferred\r\n    event NodeTransferred(address from, address to, uint256 nodeId);\r\n\r\n    /// @notice                     The rewards pool was updated\r\n    /// @param numEpochsProcessed   The nunmber of epochs since the last pool update\r\n    /// @param amountRewarded       The amount of new rewards issues\r\n    event PoolUpdated(uint256 numEpochsProcessed, uint256 amountRewarded);\r\n\r\n    /// @notice                 Rewards claimed for wallet\r\n    /// @param owner            Owner that claimed the rewards\r\n    /// @param rewardsClaimed   Number of rewards claimed\r\n    event RewardsClaimed(address owner, uint256 rewardsClaimed);\r\n\r\n    /// @notice             A node has been disqualified from earning rewards\r\n    /// @param owner        The node owner that has been disqualified\r\n    /// @param numNodes     Number of nodes disqualified for the owner\r\n    event NodeDisqualified(address owner, uint256 numNodes);\r\n\r\n    /// @notice             The price of a node has been updated\r\n    /// @param price        The updated price of a node\r\n    event PriceChanged(uint256 price);\r\n\r\n    /// @notice                         Emitted when reward adjustment is made from disqualifying nodes\r\n    /// @param rewardsPerNodeAdjusted   Number of rewards removed per disqualified node\r\n    /// @param numNodesDisqualified     Number of nodes that were disqualified\r\n    /// @param numQualifiedNodes        Number of qualified nodes (totalSupply - numDisqualified)\r\n    event RewardsAdjustedDisqualified(\r\n        uint256 rewardsPerNodeAdjusted,\r\n        uint256 numNodesDisqualified,\r\n        uint256 numQualifiedNodes\r\n    );\r\n\r\n    /// @notice                 Emitted when an address' minter access is toggled\r\n    /// @param minterAddress    The address of the minter\r\n    /// @param canMint          Whether the toggled address can mint\r\n    event AdminMinterToggled(address minterAddress, bool canMint);\r\n\r\n    /**\r\n     * @dev Reverts when all nodes are not sold\r\n     */\r\n    error AllNodesNotSold();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to mint 0 nodes\r\n     */\r\n    error CannotMintZero();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to mint more than the single transaction limit\r\n     */\r\n    error CannotMintMoreThanLimit();\r\n\r\n    /**\r\n     * @dev Reverts when attempting to ming more than the cap\r\n     */\r\n    error CannotMintMoreThanCap();\r\n\r\n    /**\r\n     * @dev Reverts if the owner has no nodes\r\n     */\r\n    error NoNodes();\r\n\r\n    /**\r\n     * @dev Reverts if the new value is less than the previous value\r\n     */\r\n    error NewLessThanPrevious();\r\n}\r\n"
    },
    "contracts/avalanche/interfaces/IAllowList.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAllowList {\r\n  // Set [addr] to have the admin role over the precompile\r\n  function setAdmin(address addr) external;\r\n\r\n  // Set [addr] to be enabled on the precompile contract.\r\n  function setEnabled(address addr) external;\r\n\r\n  // Set [addr] to have no role the precompile contract.\r\n  function setNone(address addr) external;\r\n\r\n  // Read the status of [addr].\r\n  function readAllowList(address addr) external view returns (uint256 role);\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}