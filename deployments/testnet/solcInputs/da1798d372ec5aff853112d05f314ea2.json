{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/core/interfaces/ITreasuryManager.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title ITreasuryManager\r\n * @author Jourdan (@jourdanhaines), Sam (@samthompsonkennedy)\r\n * @notice ITreasuryManager is an interface for the TreasuryManager contract.\r\n */\r\ninterface ITreasuryManager {\r\n    /**\r\n     * @dev Represents a withdrawal action that includes burning a portion of the withdrawn amount.\r\n     * @param total Total amount withdrawn.\r\n     * @param burned Amount of the total that was burned.\r\n     * @param timestamp Timestamp when the withdrawal and burn occurred.\r\n     */\r\n    struct WithdrawalBurn {\r\n        uint256 total;\r\n        uint256 burned;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a specified amount is burned.\r\n     * @param amount Amount of tokens burned.\r\n     */\r\n    event AmountBurned(uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when the burn ratio is updated.\r\n     * @param burnRatio New burn ratio.\r\n     */\r\n    event BurnRatioUpdated(uint256 burnRatio);\r\n}\r\n"
    },
    "contracts/core/TreasuryManager.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {Ratio} from \"../misc/Ratio.sol\";\r\nimport {ITreasuryManager} from \"./interfaces/ITreasuryManager.sol\";\r\n\r\n/**\r\n * @title TreasuryManager\r\n * @author Jourdan (@jourdanhaines), Sam (@samthompsonkennedy)\r\n * @notice TreasuryManager is a contract for managing the treasury\r\n *         of the protocol.\r\n */\r\ncontract TreasuryManager is Ownable, ITreasuryManager {\r\n    using Ratio for uint256;\r\n\r\n    /// @notice The ratio of funds to burn on withdrawals\r\n    uint256 public burnRatio = 1000; // 10%\r\n\r\n    /// @notice Tracks the total number of withdrawals\r\n    uint256 public burns;\r\n\r\n    /// @notice The treasury address to receive funds\r\n    address public treasury;\r\n\r\n    /// @notice The address to send funds to be burnt\r\n    address public immutable burnAddress =\r\n        0x0000000000000000000000000000000000000000;\r\n\r\n    /// @notice Tracks the amount of funds burnt on withdrawals\r\n    mapping(uint256 => WithdrawalBurn) public withdrawalBurns;\r\n\r\n    constructor(address _treasury) {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the treasury address.\r\n     *\r\n     * @param _treasury The new treasury address.\r\n     */\r\n    function setTreasuryAddress(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        // Calculate the burn amount and the amount left over\r\n        uint256 burnAmount = amount.getPart(burnRatio);\r\n        uint256 amountAfterBurn = amount - burnAmount;\r\n\r\n        // Transfer the funds, burning those sent to the burn address\r\n        payable(burnAddress).transfer(burnAmount);\r\n        payable(treasury).transfer(amountAfterBurn);\r\n\r\n        // Store the withdrawal burn\r\n        withdrawalBurns[burns] = WithdrawalBurn({\r\n            total: amount,\r\n            burned: burnAmount,\r\n            timestamp: block.timestamp\r\n        });\r\n\r\n        burns++;\r\n\r\n        emit AmountBurned(burnAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the burn ratio.\r\n     *\r\n     * @param _burnRatio    The new burn ratio.\r\n     */\r\n    function setBurnRatio(uint256 _burnRatio) external onlyOwner {\r\n        burnRatio = _burnRatio;\r\n\r\n        emit BurnRatioUpdated(_burnRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Called when funds are sent to the contract without data.\r\n     */\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/misc/Ratio.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Ratio\r\n * @author Jourdan (@jourdanhaines)\r\n * @notice Library for ratio-based calculations with 2 decimal precision.\r\n */\r\nlibrary Ratio {\r\n    /// @notice Error to be thrown if the ratio value exceeds the maximum allowed value.\r\n    error InvalidRatio(uint256 max);\r\n\r\n    /**\r\n     * @dev Ensures the ratio value is between 0 and 10000 (for 2 decimal precision).\r\n     * Throws an `InvalidRatio` error if the condition is not met.\r\n     * @param _ratio The ratio value to validate. It should be within 0 and 10000 for 2 decimal precision.\r\n     */\r\n    modifier validRatio(uint256 _ratio) {\r\n        if (_ratio > 10000) {\r\n            revert InvalidRatio(10000);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates a specified ratio of the given amount.\r\n     * @dev This function uses 2 decimal precision for ratio calculations. Hence, a ratio of 5.5% should be passed as 550.\r\n     * @param amount The primary value of which a part/ratio is to be calculated.\r\n     * @param ratioValue The ratio value in basis points (2 decimal precision) to be applied on the primary amount.\r\n     * @return The calculated value based on the provided ratio.\r\n     */\r\n    function getPart(\r\n        uint256 amount,\r\n        uint256 ratioValue\r\n    ) internal pure validRatio(ratioValue) returns (uint256) {\r\n        return (amount * ratioValue) / 10000;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}