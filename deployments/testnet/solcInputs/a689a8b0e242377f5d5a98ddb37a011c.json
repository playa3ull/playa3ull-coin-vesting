{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/core/BurnController.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {IBurnController} from \"./interfaces/IBurnController.sol\";\r\n\r\n/**\r\n * @title Burn Controller Contract\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Standardised contract for burning funds.\r\n */\r\ncontract BurnController is IBurnController {\r\n    /// @dev The interface ID of the ERC20 Token Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC20 = 0x37c8e2a0;\r\n\r\n    /// @dev The interface ID of the ERC721 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @dev The interface ID of the ERC1155 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    /// @notice Tracks the total number of coins burnt\r\n    uint256 public totalCoinsBurnt;\r\n\r\n    /// @notice Tracks the total number of NFTs burnt\r\n    uint256 public totalNFTsBurnt;\r\n\r\n    /// @notice Tracks the total number of SFTs burnt\r\n    uint256 public totalSFTsBurnt;\r\n\r\n    /// @notice Tracks the total number of tokens burnt\r\n    uint256 public totalTokensBurnt;\r\n\r\n    /// @notice The address to send funds to that will be permanently burnt.\r\n    ///         These funds are not tracked in the total supply.\r\n    address public immutable burnAddress =\r\n        0x0000000000000000000000000000000000000000;\r\n\r\n    /**\r\n     * @notice Returns the burn address.\r\n     *\r\n     * @return The burn address.\r\n     */\r\n    function getBurnAddress() external view override returns (address) {\r\n        return burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Burns coins.\r\n     */\r\n    function burn() external payable override {\r\n        burnFor(msg.sender, msg.value, address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins.\r\n     *\r\n     * @param _amount The amount of coins to burn.\r\n     */\r\n    function burn(uint256 _amount) external override {\r\n        burnFor(msg.sender, _amount, address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the specified amount of tokens.\r\n     *\r\n     * @param _amount The amount of tokens to burn.\r\n     * @param _token The token to burn.\r\n     */\r\n    function burn(uint256 _amount, address _token) external override {\r\n        burnFor(msg.sender, _amount, _token);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     */\r\n    function burnFor(address _for) public payable override {\r\n        burnFor(_for, msg.value, address(0), \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The token to burn.\r\n     */\r\n    function burnFor(\r\n        address _for,\r\n        uint256 _amount,\r\n        address _token\r\n    ) public override {\r\n        burnFor(_for, _amount, _token, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The token to burn.\r\n     * @param _data The data to use when burning the token.\r\n     */\r\n    function burnFor(\r\n        address _for,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes memory _data\r\n    ) public override {\r\n        _burn(_for, _amount, _token, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn the specified amount of coins for the\r\n     *      specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The token to burn.\r\n     * @param _data The data to use when burning the token.\r\n     */\r\n    function _burn(\r\n        address _for,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes memory _data\r\n    ) internal {\r\n        if (_token == address(0)) {\r\n            totalCoinsBurnt += _amount;\r\n\r\n            payable(burnAddress).transfer(_amount);\r\n        } else {\r\n            if (IERC165(_token).supportsInterface(_INTERFACE_ID_ERC20)) {\r\n                totalTokensBurnt += _amount;\r\n\r\n                IERC20(_token).transfer(burnAddress, _amount);\r\n            } else if (\r\n                IERC165(_token).supportsInterface(_INTERFACE_ID_ERC721)\r\n            ) {\r\n                totalNFTsBurnt += _amount;\r\n\r\n                IERC721(_token).transferFrom(_for, burnAddress, _amount);\r\n            } else if (\r\n                IERC165(_token).supportsInterface(_INTERFACE_ID_ERC1155)\r\n            ) {\r\n                uint256 id = abi.decode(_data, (uint256));\r\n\r\n                totalSFTsBurnt += _amount;\r\n\r\n                IERC1155(_token).safeTransferFrom(\r\n                    _for,\r\n                    burnAddress,\r\n                    _amount,\r\n                    id,\r\n                    \"\"\r\n                );\r\n            } else {\r\n                revert(\"BurnController: Token does not support burning\");\r\n            }\r\n        }\r\n\r\n        emit Burn(_for, _amount, _token);\r\n    }\r\n}\r\n"
    },
    "contracts/core/interfaces/IBurnController.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Burn Controller Interface\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Interface for the Burn Controller contract.\r\n */\r\ninterface IBurnController {\r\n    /**\r\n     * @notice Emitted when funds are burnt.\r\n     *\r\n     * @param _from The address that burnt the funds.\r\n     * @param _amount The amount of funds burnt.\r\n     * @param _token The address of the token that was burnt.\r\n     */\r\n    event Burn(address indexed _from, uint256 _amount, address indexed _token);\r\n\r\n    /**\r\n     * @notice Returns the burn address.\r\n     *\r\n     * @return The burn address.\r\n     */\r\n    function getBurnAddress() external view returns (address);\r\n\r\n    /**\r\n     * @notice Burns coins.\r\n     */\r\n    function burn() external payable;\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins.\r\n     *\r\n     * @param _amount The amount of coins to burn.\r\n     */\r\n    function burn(uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice Burns the specified amount of tokens.\r\n     *\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The address of the token to burn.\r\n     */\r\n    function burn(uint256 _amount, address _token) external;\r\n\r\n    /**\r\n     * @notice Burns the specified amount of coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     */\r\n    function burnFor(address _for) external payable;\r\n\r\n    /**\r\n     * @notice Burns the specified amount of tokens/coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The address of the token to burn.\r\n     */\r\n    function burnFor(address _for, uint256 _amount, address _token) external;\r\n\r\n    /**\r\n     * @notice Burns the specified amount of tokens/coins for the specified address.\r\n     *\r\n     * @param _for The address to burn the coins for.\r\n     * @param _amount The amount of coins to burn.\r\n     * @param _token The address of the token to burn.\r\n     * @param _data The data to use when burning the token.\r\n     */\r\n    function burnFor(\r\n        address _for,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes calldata _data\r\n    ) external;\r\n}\r\n"
    },
    "contracts/misc/Ratio.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Ratio\r\n * @author Jourdan (@jourdanhaines)\r\n * @notice Library for ratio-based calculations with 2 decimal precision.\r\n */\r\nlibrary Ratio {\r\n    /// @notice Error to be thrown if the ratio value exceeds the maximum allowed value.\r\n    error InvalidRatio(uint256 max);\r\n\r\n    /**\r\n     * @dev Ensures the ratio value is between 0 and 10000 (for 2 decimal precision).\r\n     * Throws an `InvalidRatio` error if the condition is not met.\r\n     * @param _ratio The ratio value to validate. It should be within 0 and 10000 for 2 decimal precision.\r\n     */\r\n    modifier validRatio(uint256 _ratio) {\r\n        if (_ratio > 10000) {\r\n            revert InvalidRatio(10000);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates a specified ratio of the given amount.\r\n     * @dev This function uses 2 decimal precision for ratio calculations. Hence, a ratio of 5.5% should be passed as 550.\r\n     * @param amount The primary value of which a part/ratio is to be calculated.\r\n     * @param ratioValue The ratio value in basis points (2 decimal precision) to be applied on the primary amount.\r\n     * @return The calculated value based on the provided ratio.\r\n     */\r\n    function getPart(\r\n        uint256 amount,\r\n        uint256 ratioValue\r\n    ) internal pure validRatio(ratioValue) returns (uint256) {\r\n        return (amount * ratioValue) / 10000;\r\n    }\r\n}\r\n"
    },
    "contracts/treasury/BaseTreasury.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {ITreasury} from \"./interfaces/ITreasury.sol\";\r\n\r\n/**\r\n * @title Base Treasury Contract\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Base contract for receiving funds.\r\n */\r\ncontract BaseTreasury is ITreasury {\r\n    /**\r\n     * @notice Allows funds to be depositted via a contract call.\r\n     */\r\n    function deposit() external payable virtual override {\r\n        _onReceive(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Called when funds are sent to the contract without data.\r\n     *\r\n     * @dev This fallback function can only accept 2300 gas, which is not enough\r\n     *      which is not enough to complete the transaction. Therefore, we\r\n     *      revert to prevent funds from being locked in the contract.\r\n     */\r\n    receive() external payable override {\r\n        revert(\"BaseTreasury: Funds must be sent via the deposit function\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function called when funds are received.\r\n     *\r\n     *      This function is to be implemented by child contracts.\r\n     *\r\n     * @param _from The address that sent the funds.\r\n     */\r\n    function _onReceive(address _from) internal virtual {}\r\n}\r\n"
    },
    "contracts/treasury/BurnableTreasuryReceiver.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {Ratio} from \"../misc/Ratio.sol\";\r\nimport {BaseTreasury} from \"./BaseTreasury.sol\";\r\nimport {IBurnableTreasury} from \"./interfaces/IBurnableTreasury.sol\";\r\nimport {ITreasuryFundController} from \"./interfaces/ITreasuryFundController.sol\";\r\nimport {IBurnController} from \"../core/interfaces/IBurnController.sol\";\r\n\r\n/**\r\n * @title Burnable Treasury Receiver Contract\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Contract for receiving funds and burning a percentage of them,\r\n *         before sending the remaining funds on to the treasury.\r\n */\r\ncontract BurnableTreasuryReceiver is Ownable, BaseTreasury, IBurnableTreasury {\r\n    using Ratio for uint256;\r\n\r\n    /// @notice Tracks the total number of coins burnt\r\n    uint256 public totalBurnt;\r\n\r\n    /// @notice The default burn ratio\r\n    uint256 public defaultBurnRatio = 1000; // 10%\r\n\r\n    /// @notice The treasury contract that receives funds\r\n    ITreasuryFundController public treasury;\r\n\r\n    /// @notice The burn controller contract that burns funds\r\n    IBurnController public burnController;\r\n\r\n    /// @notice Tracks the burn ratio for each payer\r\n    mapping(address => uint256) public payerBurnRatio;\r\n\r\n    constructor(\r\n        ITreasuryFundController _treasury,\r\n        IBurnController _burnController\r\n    ) {\r\n        treasury = _treasury;\r\n        burnController = _burnController;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the treasury address.\r\n     *\r\n     * @return The treasury address.\r\n     */\r\n    function getTreasury()\r\n        external\r\n        view\r\n        override\r\n        returns (ITreasuryFundController)\r\n    {\r\n        return treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the treasury address.\r\n     *\r\n     * @param _treasury The new treasury address.\r\n     */\r\n    function setTreasuryAddress(\r\n        ITreasuryFundController _treasury\r\n    ) external onlyOwner {\r\n        require(\r\n            address(_treasury) != address(0),\r\n            \"BurnableTreasuryReceiver: Cannot set treasury to zero address\"\r\n        );\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the burn controller address.\r\n     *\r\n     * @param _burnController The new burn controller address.\r\n     */\r\n    function setBurnController(\r\n        IBurnController _burnController\r\n    ) external onlyOwner {\r\n        require(\r\n            address(_burnController) != address(0),\r\n            \"BurnableTreasuryReceiver: Cannot set burn controller to zero address\"\r\n        );\r\n\r\n        burnController = _burnController;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the burn ratio for a payer.\r\n     *\r\n     * @param _payer The payer to set the burn ratio for.\r\n     * @param _burnRatio The burn ratio to set.\r\n     */\r\n    function setPayerBurnRatio(\r\n        address _payer,\r\n        uint256 _burnRatio\r\n    ) external onlyOwner {\r\n        payerBurnRatio[_payer] = _burnRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the default burn ratio.\r\n     *\r\n     * @param _defaultBurnRatio The default burn ratio to set.\r\n     */\r\n    function setDefaultBurnRatio(uint256 _defaultBurnRatio) external onlyOwner {\r\n        defaultBurnRatio = _defaultBurnRatio;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function called when funds are received.\r\n     *\r\n     * @param _from The address that sent the funds.\r\n     */\r\n    function _onReceive(address _from) internal override {\r\n        uint256 burnRatio = payerBurnRatio[_from];\r\n\r\n        if (burnRatio == 0) {\r\n            burnRatio = defaultBurnRatio;\r\n        }\r\n\r\n        uint256 burnAmount = msg.value.getPart(burnRatio);\r\n        uint256 amountAfterBurn = msg.value - burnAmount;\r\n\r\n        // Transfer the funds, burning those sent to the burn address\r\n        burnController.burnFor{value: burnAmount}(_from);\r\n        treasury.deposit{value: amountAfterBurn}();\r\n\r\n        // Update the total burnt\r\n        totalBurnt += burnAmount;\r\n\r\n        // Emit the Burn event\r\n        emit Burn(_from, burnAmount);\r\n    }\r\n}\r\n"
    },
    "contracts/treasury/interfaces/IBurnableTreasury.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {ITreasury} from \"./ITreasury.sol\";\r\nimport {ITreasuryFundController} from \"./ITreasuryFundController.sol\";\r\n\r\n/**\r\n * @title Burnable Treasury Interface\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Interface for the Burnable Treasury contract.\r\n */\r\ninterface IBurnableTreasury is ITreasury {\r\n    /**\r\n     * @notice Emitted when tokens are burned.\r\n     *\r\n     * @param payer The address of the payer.\r\n     * @param amount The amount of tokens burned.\r\n     */\r\n    event Burn(address indexed payer, uint256 amount);\r\n\r\n    /**\r\n     * @notice Returns the treasury fund controller.\r\n     *\r\n     * @return The treasury fund controller.\r\n     */\r\n    function getTreasury() external view returns (ITreasuryFundController);\r\n}\r\n"
    },
    "contracts/treasury/interfaces/ITreasury.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Treasury Interface\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Interface for the Treasury contract.\r\n */\r\ninterface ITreasury {\r\n    /**\r\n     * @notice Allows funds to be depositted via a contract call.\r\n     */\r\n    function deposit() external payable;\r\n\r\n    /**\r\n     * @notice Called when funds are sent to the contract without data.\r\n     */\r\n    receive() external payable;\r\n}\r\n"
    },
    "contracts/treasury/interfaces/ITreasuryFundController.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {ITreasury} from \"./ITreasury.sol\";\r\n\r\n/**\r\n * @title Treasury Fund Controller Interface\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Interface for the Treasury Fund Controller contract.\r\n */\r\ninterface ITreasuryFundController is ITreasury {\r\n    /**\r\n     * @notice Emitted when the treasury funds reach a low threshold.\r\n     */\r\n    event LowFundWarning(uint256 amount);\r\n\r\n    function isExcludedFromAutoVaultFund(\r\n        address _payer\r\n    ) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Transfers funds to an address\r\n     *\r\n     * @param _to The address to transfer to.\r\n     * @param _amount The amount to transfer.\r\n     */\r\n    function transfer(address _to, uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice Allows contracts to safely deposit funds without triggering\r\n     *         the auto fund mechanism.\r\n     */\r\n    function safeDeposit() external payable;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}