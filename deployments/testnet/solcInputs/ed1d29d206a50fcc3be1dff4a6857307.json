{
  "language": "Solidity",
  "sources": {
    "contracts/nft/games/mars-colony/ColonyMarsNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\nimport \"../../../oracle/price/interfaces/IPriceOracle.sol\";\r\n\r\nimport {ERC721u} from \"../../ERC721u.sol\";\r\nimport {IColonyMarsNFT} from \"./interfaces/IColonyMarsNFT.sol\";\r\n\r\n/**\r\n * @title ColonyMarsNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract contains all storage and pricing\r\n *         data for the Colony Mars NFT tokens.\r\n */\r\ncontract ColonyMarsNFT is IColonyMarsNFT, ERC721u, ERC165Storage, IERC2981 {\r\n    /// @notice The total number of tokens that currently exist.\r\n    uint public totalSupply;\r\n\r\n    /// @notice The address where royalties will be sent.\r\n    address public royaltyAddress;\r\n\r\n    /// @notice The interface for the Price Oracle to retrieve\r\n    ///         pricing data from.\r\n    IPriceOracle public oracle;\r\n\r\n    /// @notice Mapping of addresses that are allowed to mint nodes\r\n    mapping(address => bool) public adminMinters;\r\n\r\n    /// @dev The interface ID of the ERC2981 NFT Royalty Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /// @dev The interface ID of the ERC721 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @dev The number of categories that can exist.\r\n    uint256 private constant NUM_CATEGORIES = 4;\r\n\r\n    /// @dev Tracks the NFT that exists (or not) at a given index.\r\n    mapping(uint => Building) private nfts;\r\n\r\n    /// @dev Stores the given mint data for a category and it's child buildings and tiers.\r\n    mapping(uint => mapping(uint => BuildingDetails[])) private categories;\r\n\r\n    /// @dev The total number of buildings that belong in a category.\r\n    uint256[] public maxCategoryBuildings = new uint256[](NUM_CATEGORIES);\r\n\r\n    /// @dev Modifier for allowing set addresses to mint for other addresses.\r\n    modifier onlyMinter() {\r\n        if (adminMinters[msg.sender] != true) {\r\n            revert UnauthorizedMinter();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _oracleAddress\r\n    ) ERC721u(_name, _symbol) {\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n        oracle = IPriceOracle(_oracleAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the given interface is supported by\r\n     *         this contract.\r\n     *\r\n     * @param interfaceId   The ID of the interface to check.\r\n     *\r\n     * @return Whether the given `interfaceId` is supported.\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, IERC165, ERC165Storage)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the NFT at the given index.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve.\r\n     *\r\n     * @return The NFT token data.\r\n     */\r\n    function getNFT(uint256 tokenId) external view returns (Building memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return nfts[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current number of tokens that exist.\r\n     *\r\n     * @return The total number of tokens in existence.\r\n     */\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the current price of 3ULL from the Price\r\n     *         Oracle.\r\n     *\r\n     * @param _price    The USD price to get in 3ULL.\r\n     *\r\n     * @return The input price in 3ULL.\r\n     */\r\n    function getBullPrice(uint256 _price) public view returns (uint256) {\r\n        return oracle.getPriceIn(\"USDC\", \"3ULL\", _price);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the royalty information for this ERC2981 contract.\r\n     *\r\n     * @param _salePrice    The price of the sale to get royalty information\r\n     *                      for.\r\n     *\r\n     * @return receiver         The receiving address for the royalties.\r\n     * @return royaltyAmount    The amount of royalties.\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        uint256 _salePrice\r\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\r\n        return (royaltyAddress, (_salePrice * 500) / 10000);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the building details for a given building and tier.\r\n     *         A buildings details includes data such as the type of building,\r\n     *         the purchase price, the current minted amount of that building,\r\n     *         and the total number of that building that can be minted.\r\n     *\r\n     * @param categoryId The ID of the category the building belongs to.\r\n     * @param buildingId The initial ID of the building in the details\r\n     *                   mapping.\r\n     * @param tierId     The building tier ID.\r\n     *\r\n     * @return The building details for the given building and tier IDs.\r\n     */\r\n    function getBuildingDetails(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) external view returns (BuildingDetails memory) {\r\n        _assertCategoryInRange(categoryId);\r\n\r\n        return categories[categoryId][buildingId][tierId];\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a building with the given tier to the sender. This\r\n     *         function is payable and therefore requires payment in 3ULL in\r\n     *         order to mint.\r\n     *\r\n     * @param categoryId The category the building belongs to.\r\n     * @param buildingId The building that is to be minted.\r\n     * @param tierId     The tier of the building to mint.\r\n     */\r\n    function mint(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) external payable {\r\n        _assertValidValueProvided(categoryId, buildingId, tierId);\r\n\r\n        _mintBuilding(msg.sender, categoryId, buildingId, tierId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows an address toggled as an admin minter to mint a building\r\n     *         for an address.\r\n     *\r\n     * @param to            The address that will receive the minted building.\r\n     * @param categoryId    The category the building belongs to.\r\n     * @param buildingId    The building index to mint.\r\n     * @param tierId        The building tier that will be minted.\r\n     */\r\n    function mintFor(\r\n        address to,\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) external onlyMinter {\r\n        _mintBuilding(to, categoryId, buildingId, tierId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the maximum buildings for a given\r\n     *         category.\r\n     *\r\n     * @param categoryId    The category ID to set the max buildings.\r\n     * @param max           The maximum buildings that can exist on the\r\n     *                      category.\r\n     */\r\n    function setMaxBuildings(\r\n        uint256 categoryId,\r\n        uint256 max\r\n    ) external onlyOwner {\r\n        _assertCategoryInRange(categoryId);\r\n\r\n        maxCategoryBuildings[categoryId] = max;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to set the details of a building.\r\n     *\r\n     * @param categoryId        The category index that the building belons\r\n     *                          to.\r\n     * @param buildingId        The index that will be used to lookup and\r\n     *                          mutate this building at.\r\n     * @param _name             The name of the building.\r\n     * @param _maxCountPerTier  The maximum of this building that can be\r\n     *                          minted at each tier.\r\n     * @param _tierPrices       The building prices at each tier, must be\r\n     *                          the same length as the _maxCountPerTier\r\n     *                          parameter.\r\n     */\r\n    function setBuildingDetails(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        string memory _name,\r\n        uint256[] memory _maxCountPerTier,\r\n        uint256[] memory _tierPrices\r\n    ) external onlyOwner {\r\n        _assertCategoryInRange(categoryId);\r\n\r\n        if (_maxCountPerTier.length != _tierPrices.length) {\r\n            revert ArraysDoNotMatch();\r\n        }\r\n\r\n        uint256[] memory _minted = new uint256[](_tierPrices.length);\r\n        for (uint i = 0; i < _minted.length; i++) {\r\n            if (categories[categoryId][buildingId].length <= i) {\r\n                _minted[i] = 0;\r\n                continue;\r\n            }\r\n\r\n            if (categories[categoryId][buildingId][i].max > 0) {\r\n                // If the maximum value has been set, then we can assume\r\n                // that we are updating the building details, so retrieve\r\n                // the current minted amount.\r\n                _minted[i] = categories[categoryId][buildingId][i].minted;\r\n\r\n                delete categories[categoryId][buildingId][i];\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < _minted.length; i++) {\r\n            if (categories[categoryId][buildingId].length <= i) {\r\n                categories[categoryId][buildingId].push(\r\n                    BuildingDetails({\r\n                        name: _name,\r\n                        price: _tierPrices[i],\r\n                        minted: _minted[i],\r\n                        max: _maxCountPerTier[i]\r\n                    })\r\n                );\r\n            } else {\r\n                categories[categoryId][buildingId][i] = BuildingDetails({\r\n                    name: _name,\r\n                    price: _tierPrices[i],\r\n                    minted: _minted[i],\r\n                    max: _maxCountPerTier[i]\r\n                });\r\n            }\r\n\r\n            emit BuildingTierUpdated(\r\n                categoryId,\r\n                buildingId,\r\n                i,\r\n                _name,\r\n                _maxCountPerTier[i],\r\n                _tierPrices[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to update the price of a building tier.\r\n     *\r\n     * @param buildingId    The ID of the building to update.\r\n     * @param tierId        The building tier ID to update.\r\n     * @param newPrice      The new price of the building tier.\r\n     */\r\n    function updateTierPrice(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId,\r\n        uint256 newPrice\r\n    ) external onlyOwner {\r\n        if (categories[categoryId][buildingId].length >= tierId) {\r\n            categories[categoryId][buildingId][tierId].price = newPrice;\r\n\r\n            emit BuildingTierUpdated(\r\n                categoryId,\r\n                buildingId,\r\n                tierId,\r\n                categories[categoryId][buildingId][tierId].name,\r\n                categories[categoryId][buildingId][tierId].max,\r\n                newPrice\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address where royalties will be sent.\r\n     *\r\n     * @param _royaltyAddress   The address that will receive royalties.\r\n     */\r\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\r\n        royaltyAddress = _royaltyAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Registers that this contract does support a given interface ID.\r\n     *\r\n     * @param _interfaceId  The ID of the interface to register.\r\n     */\r\n    function registerInterface(bytes4 _interfaceId) external onlyOwner {\r\n        _registerInterface(_interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles whether the given address can mint without requiring\r\n     *         payment or not.\r\n     *\r\n     * @param minter The address of the minter to toggle.\r\n     */\r\n    function toggleAdminMinter(address minter) external onlyOwner {\r\n        adminMinters[minter] = !adminMinters[minter];\r\n\r\n        emit AdminMinterToggled(minter, adminMinters[minter]);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a building at a certain tier, to a\r\n     *      given address.\r\n     *\r\n     * @param to             The receiving address of the newly minted\r\n     *                       token/building.\r\n     * @param _categoryId    The ID of the category the building belongs to\r\n     * @param _buildingId    The ID of the building, or type of building to\r\n     *                       mint.\r\n     * @param _tierId        The tier of the building to mint.\r\n     */\r\n    function _mintBuilding(\r\n        address to,\r\n        uint256 _categoryId,\r\n        uint256 _buildingId,\r\n        uint256 _tierId\r\n    ) internal {\r\n        _assertCategoryInRange(_categoryId);\r\n\r\n        if (_buildingId >= maxCategoryBuildings[_categoryId]) {\r\n            revert UnknownBuilding(_categoryId, _buildingId);\r\n        }\r\n\r\n        _assertTierNotMintedOut(_categoryId, _buildingId, _tierId);\r\n\r\n        categories[_categoryId][_buildingId][_tierId].minted++;\r\n\r\n        nfts[totalSupply] = Building({\r\n            categoryId: _categoryId,\r\n            buildingId: _buildingId,\r\n            tierId: _tierId\r\n        });\r\n\r\n        _safeMint(to, totalSupply);\r\n\r\n        emit TokenMinted(to, totalSupply);\r\n\r\n        totalSupply++;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given building\r\n     *      and tier has reached the maximum number of mints.\r\n     *\r\n     * @param categoryId    The ID of the category.\r\n     * @param buildingId    The ID of the building.\r\n     * @param tierId        The ID of the building tier to verify\r\n     *                      that it has or has not minted out.\r\n     */\r\n    function _assertTierNotMintedOut(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) internal view {\r\n        if (\r\n            categories[categoryId][buildingId][tierId].minted ==\r\n            categories[categoryId][buildingId][tierId].max\r\n        ) {\r\n            revert BuildingTierMintedOut(\r\n                categoryId,\r\n                buildingId,\r\n                tierId,\r\n                categories[categoryId][buildingId][tierId].max\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given value in a\r\n     *      payable transaction is invalid.\r\n     *\r\n     * @param categoryId    The ID of the category.\r\n     * @param buildingId    The ID of the building.\r\n     * @param tierId        The ID of the building tier to verify the\r\n     *                      price.\r\n     */\r\n    function _assertValidValueProvided(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId\r\n    ) internal view {\r\n        uint256 basePrice = categories[categoryId][buildingId][tierId].price;\r\n        uint256 convertedPrice = getBullPrice(basePrice);\r\n\r\n        if (msg.value != convertedPrice) {\r\n            revert InsufficientValueProvided(msg.value, convertedPrice);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given category ID\r\n     *      is not within the bounds of the categories.\r\n     *\r\n     * @param given The given category ID.\r\n     */\r\n    function _assertCategoryInRange(uint256 given) internal pure {\r\n        if (given < 0 || given >= NUM_CATEGORIES) {\r\n            revert InvalidCategoryIndex();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/oracle/price/interfaces/IPriceOracle.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPriceOracle contains all external functions, structs\r\n *         and events and errors for the Price Oracle.\r\n */\r\ninterface IPriceOracle {\r\n    /**\r\n     * @dev Emit an event whenever a token is set or updated.\r\n     *\r\n     * @param symbol The token symbol.\r\n     */\r\n    event TokenUpdated(string indexed symbol);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token pair's price is set\r\n     *      or updated.\r\n     *\r\n     * @param symbolA The symbol of the `from` token.\r\n     * @param symbolB The symbol of the `to`, or `in` token.\r\n     * @param price   The new price of the tokenA in tokenB.\r\n     */\r\n    event PairPriceUpdated(\r\n        string indexed symbolA,\r\n        string indexed symbolB,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to set a token pair\r\n     *      price that is zero or less.\r\n     */\r\n    error InvalidPrice();\r\n\r\n    function getPriceIn(\r\n        string memory tokenFrom,\r\n        string memory tokenIn,\r\n        uint256 price\r\n    ) external view returns (uint256);\r\n\r\n    function getPairPrice(\r\n        string memory symbolA,\r\n        string memory symbolB\r\n    ) external view returns (uint256, uint256);\r\n}\r\n"
    },
    "contracts/nft/ERC721u.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC721u\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract is intended to be inherited and provides\r\n *         access to a central location for handling retrieving,\r\n *         updating, and verifying ERC721 token URIs which the base\r\n *         ERC721 standard does not provide.\r\n *         Additionally, this ERC721u contract supports emitting\r\n *         events when the token URI is updated, allowing listeners\r\n *         to handle this change.\r\n */\r\ncontract ERC721u is ERC721, Ownable {\r\n    /// @notice The base URI for tokens and where their metadata\r\n    ///         is stored.\r\n    string public baseTokenURI;\r\n\r\n    /**\r\n     * @dev Emit an event whenever the base token URI is updated.\r\n     *\r\n     * @param uri   The new base token uri.\r\n     */\r\n    event BaseTokenURIUpdated(string uri);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to access a token ID\r\n     *      that does not exist.\r\n     */\r\n    error TokenDoesNotExist();\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC721(_name, _symbol) {}\r\n\r\n    /**\r\n     * @dev Internal view function to view and return the base token URI.\r\n     *\r\n     * @return The base token URI where the metadata is stored.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token URI where the metadata is stored for\r\n     *         a given token ID.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve the URI for.\r\n     *\r\n     * @return The token metadata URI.\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return\r\n            string(abi.encodePacked(baseTokenURI, Strings.toString(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the base token metadata URI.\r\n     *\r\n     * @param _newBaseTokenURI  The new base token URI.\r\n     */\r\n    function setBaseTokenURI(\r\n        string memory _newBaseTokenURI\r\n    ) external onlyOwner {\r\n        baseTokenURI = _newBaseTokenURI;\r\n\r\n        emit BaseTokenURIUpdated(baseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given token ID does\r\n     *      not exist.\r\n     *\r\n     * @param tokenId   The ID of the token to verify if exists.\r\n     */\r\n    function _assertTokenExists(uint256 tokenId) internal view {\r\n        if (!_exists(tokenId)) {\r\n            revert TokenDoesNotExist();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/nft/games/mars-colony/interfaces/IColonyMarsNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IColonyMarsNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IColonyMarsNFT contains all external functions, structs,\r\n *         events, and errors for the Colony Mars NFT.\r\n */\r\ninterface IColonyMarsNFT {\r\n    /**\r\n     * @dev A building contains three components: a numeric\r\n     *      index for the building, a numeric index for the\r\n     *      tier of the building, and the type of building.\r\n     */\r\n    struct Building {\r\n        uint256 categoryId;\r\n        uint256 buildingId;\r\n        uint256 tierId;\r\n    }\r\n\r\n    /**\r\n     * @dev The details for a building outline the required\r\n     *      data to be stored on-chain such as the price of\r\n     *      the building, the number of them minted and the\r\n     *      max of the tier that can be minted.\r\n     */\r\n    struct BuildingDetails {\r\n        string name;\r\n        uint256 price;\r\n        uint256 minted;\r\n        uint256 max;\r\n    }\r\n\r\n    /**\r\n     * @dev Emit an event whenever a buildings tier is updated.\r\n     *\r\n     * @param categoryId    The index of the category.\r\n     * @param buildingId    The index of the building.\r\n     * @param tierId        The index of the building tier.\r\n     * @param name          The name of the building.\r\n     * @param maxCount      The number of tokens that can be minted at this tier.\r\n     * @param price         The price of the token at this tier.\r\n     */\r\n    event BuildingTierUpdated(\r\n        uint256 indexed categoryId,\r\n        uint256 indexed buildingId,\r\n        uint256 indexed tierId,\r\n        string name,\r\n        uint256 maxCount,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token is minted.\r\n     *\r\n     * @param to        The address that the token was minted\r\n     *                  to.\r\n     * @param tokenId   The ID of the token that was minted.\r\n     */\r\n    event TokenMinted(address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the royalty address is updated.\r\n     *\r\n     * @param royalty   The royalty address that has been set.\r\n     */\r\n    event RoyaltyAddressUpdated(address royalty);\r\n\r\n    /**\r\n     * @notice                 Emitted when an address' minter access is toggled\r\n     * @param minterAddress    The address of the minter\r\n     * @param canMint          Whether the toggled address can mint\r\n     */\r\n    event AdminMinterToggled(address minterAddress, bool canMint);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a building tier\r\n     *      that has minted out.\r\n     *\r\n     * @param categoryId The ID of the category.\r\n     * @param buildingId The ID of the building.\r\n     * @param tierId     The ID of the tier that the building belongs.\r\n     * @param max        The maximum number of this tier that can be\r\n     *                   minted.\r\n     */\r\n    error BuildingTierMintedOut(\r\n        uint256 categoryId,\r\n        uint256 buildingId,\r\n        uint256 tierId,\r\n        uint256 max\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when a given value that was provided\r\n     *      was not equal to an expected value.\r\n     */\r\n    error InsufficientValueProvided(uint256 provided, uint256 expected);\r\n\r\n    /**\r\n     * @dev Revert with an error when supplying two arrays that were\r\n     *      meant to match, but didn't.\r\n     */\r\n    error ArraysDoNotMatch();\r\n\r\n    /**\r\n     * @dev Revert with an error when an address attempts to mint for\r\n     *      without having access to that function.\r\n     */\r\n    error UnauthorizedMinter();\r\n\r\n    /**\r\n     * @dev Revert with an error when supplying a category index\r\n     *      outside of the expected category IDs.\r\n     */\r\n    error InvalidCategoryIndex();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to purchase a building\r\n     *      that does not exist.\r\n     */\r\n    error UnknownBuilding(uint256 categoryId, uint256 buildingId);\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/nft/vi3/VI3.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\nimport {ERC721u} from \"../ERC721u.sol\";\r\nimport {IPLAYA3ULLVI3EventsAndErrors} from \"./interfaces/IVI3EventsAndErrors.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games VI3 Contract\r\n * @author Jourdan (PLAYAY3ULL), Sam (PLAYA3ULL)\r\n * @notice This contract is the central VI3 NFT contract\r\n *         for PLAYA3ULL Games' Very Important 3ULLs.\r\n */\r\ncontract PLAYA3ULLVI3 is ERC721u, IPLAYA3ULLVI3EventsAndErrors {\r\n    /// @notice The price of each VI3\r\n    uint256 public price;\r\n\r\n    /// @notice The total minted number of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @notice Whether VI3s are tradeable or not\r\n    bool public tradeable;\r\n\r\n    constructor() ERC721u(\"VERY IMPORTANT 3ULL\", \"VI3\") {\r\n        price = 10000 * 1e18;\r\n        tradeable = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the provided wallet a VI3 NFT,\r\n     *\r\n     * @param to    The receiver of the minted NFT.\r\n     */\r\n    function mint(address to) external payable {\r\n        _assertEqualDeposit(msg.value);\r\n        _safeMint(to, totalSupply);\r\n\r\n        emit VI3Minted(to, totalSupply);\r\n\r\n        unchecked {\r\n            totalSupply++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the price to purchase a NFT.\r\n     *\r\n     * @param _price    The new purchase price.\r\n     */\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        price = _price;\r\n\r\n        emit PriceUpdated(_price);\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles whether NFTs are tradeable.\r\n     */\r\n    function toggleTradeable() external onlyOwner {\r\n        tradeable = !tradeable;\r\n\r\n        emit TradeableUpdated(tradeable);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        _assertEnoughFunds(amount);\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to override the `_beforeTokenTransfer`\r\n     *      hook provided by the ERC721 standard.\r\n     *      Prevents transferring the NFT if they are not tradeable.\r\n     *\r\n     * @param from      The address that is attempting to transfer.\r\n     * @param to        The address that will receive the token.\r\n     * @param tokenId   The ID of the token to transfer.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override(ERC721) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from != address(0)) {\r\n            _assertTokenTradeable();\r\n        }\r\n\r\n        _assertReceiverHasNoTokens(to);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to revert if the deposit amount is not equal\r\n     *      to the purchase price of an NFT.\r\n     *\r\n     * @param amount    The amount that is being deposited.\r\n     */\r\n    function _assertEqualDeposit(uint256 amount) internal view {\r\n        if (amount != price) {\r\n            revert DepositNotEqual(price);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to revert if the owner attempts to withdraw\r\n     *      more funds than the contract balance contains.\r\n     *\r\n     * @param requestedAmount   The amount that is being withdrawn from\r\n     *                          the contract.\r\n     */\r\n    function _assertEnoughFunds(uint256 requestedAmount) internal view {\r\n        if (requestedAmount > address(this).balance) {\r\n            revert NotEnoughFunds(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if a token is being\r\n     *      transferred but tokens are not currently set to allow transfers.\r\n     */\r\n    function _assertTokenTradeable() internal view {\r\n        if (!tradeable) {\r\n            revert NonTransferrableToken();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert when transferring to a wallet\r\n     *      that already owns a token.\r\n     *\r\n     * @param receiver  The wallet to verify the number of tokens held.\r\n     */\r\n    function _assertReceiverHasNoTokens(address receiver) internal view {\r\n        if (balanceOf(receiver) >= 1) {\r\n            revert ReceiverAlreadyOwnsToken();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/nft/vi3/interfaces/IVI3EventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLVI3EventsAndErrors\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPLAYA3ULLVI3EventsAndErrors contains all external\r\n *         events and errors for the Very Important 3ULLs.\r\n */\r\ninterface IPLAYA3ULLVI3EventsAndErrors {\r\n    /**\r\n     * @dev Emit an event whenever a new VI3 NFT is minted.\r\n     *\r\n     * @param to        The address of the receiver of the new NFT.\r\n     * @param tokenId   The ID of the new NFT.\r\n     */\r\n    event VI3Minted(address to, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the price of a VI3 is updated.\r\n     *\r\n     * @param price The new price of a VI3 NFT.\r\n     */\r\n    event PriceUpdated(uint256 price);\r\n\r\n    /**\r\n     * @dev Emit an event whenever the VI3 NFTs become tradeable.\r\n     *\r\n     * @param tradeable Whether the NFTs are tradeable or not.\r\n     */\r\n    event TradeableUpdated(bool tradeable);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to purchase a\r\n     *      token without supplying the correct deposit amount.\r\n     *\r\n     * @param price The expected price of the token.\r\n     */\r\n    error DepositNotEqual(uint256 price);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to transfer a token\r\n     *      that is not tradeable.\r\n     */\r\n    error NonTransferrableToken();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to transfer a token\r\n     *      to a wallet that already owns a token.\r\n     */\r\n    error ReceiverAlreadyOwnsToken();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to withdraw balance\r\n     *      that is greater than the balance of the contract.\r\n     */\r\n    error NotEnoughFunds(uint256 balance);\r\n}\r\n"
    },
    "contracts/nft/bull/BULLNFTStorage.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\r\n\r\nimport \"./lib/MathUtils.sol\";\r\n\r\nimport {ERC721uUpgradeable} from \"../ERC721uUpgradeable.sol\";\r\nimport {IPLAYA3ULLNFT} from \"./interfaces/I3ULLNFT.sol\";\r\nimport {IPLAYA3ULLNFTEventsAndErrors} from \"./interfaces/I3ULLNFTEventsAndErrors.sol\";\r\n\r\n/**\r\n * @title PLAYA3ULL Games 3ULL NFT Storage Contract\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract contains the storage and administration\r\n *         functionality for the 3ULL NFT tokens.\r\n */\r\ncontract PLAYA3ULLNFTStorage is\r\n    Initializable,\r\n    ERC721uUpgradeable,\r\n    IERC2981Upgradeable,\r\n    ERC165Storage,\r\n    UUPSUpgradeable,\r\n    IPLAYA3ULLNFT,\r\n    IPLAYA3ULLNFTEventsAndErrors\r\n{\r\n    /// @notice Represents the maximum number of tokens that can\r\n    ///         exist.\r\n    uint256 public maxSupply;\r\n\r\n    /// @notice The total number of tokens that currently exist.\r\n    uint256 public totalSupply;\r\n\r\n    /// @notice The address of the minting contract that is\r\n    ///         authorized to mint on this contract.\r\n    address public minterAddress;\r\n\r\n    /// @notice The address where royalties will be sent.\r\n    address public royaltyAddress;\r\n\r\n    /// @notice Tracks whether the given DNA exists or not.\r\n    mapping(string => bool) public dnaExists;\r\n\r\n    /// @dev Running counter of the number of traits that exist.\r\n    uint256 private numTraits;\r\n\r\n    /// @dev The interface ID of the ERC2981 NFT Royalty Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /// @dev The interface ID of the ERC721 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /// @dev Tracks the NFT that exists (or not) at a given index.\r\n    mapping(uint256 => NFT) private nfts;\r\n\r\n    /// @dev Tracks the trait information at a given index.\r\n    mapping(uint256 => Trait) private traits;\r\n\r\n    /// @dev Tracks the attributes that exist at a given index.\r\n    mapping(uint256 => Attribute[]) private attributes;\r\n\r\n    /// @dev Tracks the addresses that are approved to transfer\r\n    ///      tokens without needing all to be sold.\r\n    mapping(address => bool) private approvedTransferrers;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _maxSupply\r\n    ) public initializer {\r\n        __ERC721u_init(_name, _symbol);\r\n        __UUPSUpgradeable_init();\r\n\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the given interface is supported by\r\n     *         this contract.\r\n     *\r\n     * @param interfaceId   The ID of the interface to check.\r\n     *\r\n     * @return Whether the given `interfaceId` is supported.\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721Upgradeable, IERC165Upgradeable, ERC165Storage)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the NFT at the given index.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve.\r\n     *\r\n     * @return The NFT token data.\r\n     */\r\n    function getNFT(uint256 tokenId) external view returns (NFT memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return nfts[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total number of tokens that may exist.\r\n     *\r\n     * @return The maximum supply of tokens.\r\n     */\r\n    function getMaxSupply() external view override returns (uint256) {\r\n        return maxSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current number of tokens that exist.\r\n     *\r\n     * @return The total number of tokens in existence.\r\n     */\r\n    function getTotalSupply() external view override returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of traits that have been added.\r\n     *\r\n     * @return The number of traits.\r\n     */\r\n    function getTraitLength() external view override returns (uint256) {\r\n        return numTraits;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the trait information at the given index.\r\n     *\r\n     * @param traitId   The index of the trait to get.\r\n     *\r\n     * @return The trait data.\r\n     */\r\n    function getTrait(\r\n        uint256 traitId\r\n    ) external view override returns (Trait memory) {\r\n        _assertValidTraitRange(traitId);\r\n\r\n        return traits[traitId];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of attributes at a given trait index.\r\n     *\r\n     * @param traitId   The index of the trait where the attributes are\r\n     *                  stored.\r\n     *\r\n     * @return The number of attributes.\r\n     */\r\n    function getAttributeLength(\r\n        uint256 traitId\r\n    ) external view override returns (uint256) {\r\n        return attributes[traitId].length;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the attribute information at the given trait index\r\n     *         and attribute index.\r\n     *\r\n     * @param traitId   The index of the trait that this attribute belongs to.\r\n     * @param attrId    The index of the attribute that is being retrieved.\r\n     *\r\n     * @return The attribute data.\r\n     */\r\n    function getAttribute(\r\n        uint256 traitId,\r\n        uint256 attrId\r\n    ) external view override returns (Attribute memory) {\r\n        _assertValidTraitRange(traitId);\r\n        _assertValidAttributeRange(traitId, attrId);\r\n\r\n        return attributes[traitId][attrId];\r\n    }\r\n\r\n    /**\r\n     * @notice Determines whether the given trait array results in a DNA that\r\n     *         already exists.\r\n     *\r\n     * @param _traits   The trait array to compute on.\r\n     *\r\n     * @return isUnique Whether the computed DNA is unique.\r\n     * @return dna      The computed DNA.\r\n     */\r\n    function isDNAUnique(\r\n        uint256[] memory _traits\r\n    ) public view override returns (bool isUnique, string memory dna) {\r\n        // The concatenated dna string before hashing\r\n        string memory dnaBase = \"\";\r\n\r\n        for (uint8 i = 0; i < numTraits; ) {\r\n            // Build the DNA string\r\n            bytes memory trait = bytes(Strings.toString(_traits[i]));\r\n\r\n            // Zero-pad in order to allow similar but different trait arrays to have unique DNA\r\n            // Example: [10, 10, 10, 1, 0, 1, 0, 1, 0, 1]\r\n            //          [1, 0, 1, 0, 1, 0, 10, 10, 10, 1]\r\n            // Are two different arrays, but look as follows when in their raw string forms:\r\n            // 1. 1010101010101\r\n            // 2. 1010101010101\r\n            // Which results in both having the same DNA, even though they are separate tokens.\r\n            // Performing a zero-pad allows the strings to look as follows:\r\n            // 1. 10101001000100010001\r\n            // 2. 01000100010010101001\r\n            if (_traits[i] < 10) {\r\n                dnaBase = string.concat(dnaBase, \"0\");\r\n            }\r\n\r\n            dnaBase = string.concat(dnaBase, string(trait));\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // Hash the DNA string using keccak256\r\n        dna = MathUtils._bytes32ToString(MathUtils._hash(string(dnaBase)));\r\n\r\n        isUnique = !dnaExists[dna];\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the royalty information for this ERC2981 contract.\r\n     *\r\n     * @param _salePrice    The price of the sale to get royalty information\r\n     *                      for.\r\n     *\r\n     * @return receiver         The receiving address for the royalties.\r\n     * @return royaltyAmount    The amount of royalties.\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        uint256 _salePrice\r\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\r\n        return (royaltyAddress, (_salePrice * 750) / 10000);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a 3ULL NFT.\r\n     *\r\n     * @param to        The receiving address of the minted token.\r\n     * @param traitIds  The trait IDs for the token to mint.\r\n     */\r\n    function mint(address to, uint256[] memory traitIds) external override {\r\n        _assertSenderIsAuthorized(msg.sender);\r\n        _assertValidTraitCount(traitIds.length);\r\n        _assertTokensNotSoldOut();\r\n\r\n        (bool _isUnique, string memory _dna) = isDNAUnique(traitIds);\r\n        if (!_isUnique) {\r\n            revert DuplicateTokenDNA();\r\n        }\r\n\r\n        for (uint8 i = 0; i < numTraits; ) {\r\n            unchecked {\r\n                // Increment the number of this trait that has been sold\r\n                attributes[i][traitIds[i]].numSold++;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        nfts[totalSupply] = NFT({dna: _dna, traits: traitIds});\r\n\r\n        dnaExists[_dna] = true;\r\n\r\n        _safeMint(to, totalSupply);\r\n\r\n        emit TokenMinted(to, totalSupply);\r\n\r\n        unchecked {\r\n            totalSupply++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new trait.\r\n     *\r\n     * @param _name     The name of the trait\r\n     * @param _required Whether the trait is required.\r\n     * @param _maxCount The maximum number of attributes the trait can hold.\r\n     */\r\n    function addTrait(\r\n        string memory _name,\r\n        bool _required,\r\n        uint256 _maxCount\r\n    ) external onlyOwner {\r\n        traits[numTraits] = Trait({\r\n            name: _name,\r\n            required: _required,\r\n            maxCount: _maxCount\r\n        });\r\n\r\n        emit TraitAdded(numTraits, _name, traits[numTraits]);\r\n\r\n        unchecked {\r\n            numTraits++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new attribute for a trait.\r\n     *\r\n     * @param _traitId  The index of the trait that this attribute will\r\n     *                  belong to.\r\n     * @param _name     The name of the attribute.\r\n     * @param _rarity   The rarity value of the attribute.\r\n     */\r\n    function addAttribute(\r\n        uint256 _traitId,\r\n        string memory _name,\r\n        uint256 _rarity\r\n    ) public onlyOwner {\r\n        _assertValidTraitRange(_traitId);\r\n\r\n        attributes[_traitId].push(\r\n            Attribute({name: _name, rarity: _rarity, numSold: 0})\r\n        );\r\n\r\n        emit AttributeAdded(\r\n            _traitId,\r\n            attributes[_traitId].length - 1,\r\n            _name,\r\n            attributes[_traitId][attributes[_traitId].length - 1]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates multiple attributes at once.\r\n     *\r\n     * @param _traitId      The index of the trait that these attributes\r\n     *                      will belong to.\r\n     * @param _attributes   The attributes data.\r\n     */\r\n    function addMultipleAttributes(\r\n        uint256 _traitId,\r\n        Attribute[] memory _attributes\r\n    ) external onlyOwner {\r\n        _assertValidTraitRange(_traitId);\r\n\r\n        if (attributes[_traitId].length > 0) {\r\n            revert ExistingAttributeLengthMustBeZero();\r\n        }\r\n\r\n        for (uint8 i = 0; i < _attributes.length; i++) {\r\n            addAttribute(_traitId, _attributes[i].name, _attributes[i].rarity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address of the minter.\r\n     *         Verifies whether the provided address is a contract, and if not\r\n     *         reverts.\r\n     *\r\n     * @param minter    The address of the minting contract.\r\n     */\r\n    function setMinterAddress(address minter) external onlyOwner {\r\n        uint32 size;\r\n        assembly {\r\n            // Verify whether the provided address is a contract\r\n            size := extcodesize(minter)\r\n        }\r\n\r\n        // The size of the code at the address is zero, therefore is not a contract\r\n        if (size == 0) {\r\n            revert AddressIsNotContract();\r\n        }\r\n\r\n        minterAddress = minter;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address where royalties will be sent.\r\n     *\r\n     * @param _royaltyAddress   The address that will receive royalties.\r\n     */\r\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\r\n        royaltyAddress = _royaltyAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the maximum number of tokens that can be minted.\r\n     *\r\n     * @param max   The new maximum number of tokens.\r\n     */\r\n    function setMaxSupply(uint256 max) external onlyOwner {\r\n        maxSupply = max;\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles whether the given `transferrer` is approved to make\r\n     *         token transfers without needing all tokens to be sold.\r\n     *\r\n     * @param transferrer   The address of the transferrer to toggle approval.\r\n     */\r\n    function toggleApprovedTransferrer(address transferrer) external onlyOwner {\r\n        approvedTransferrers[transferrer] = !approvedTransferrers[transferrer];\r\n    }\r\n\r\n    /**\r\n     * @notice Registers that this contract does support a given interface ID.\r\n     *\r\n     * @param _interfaceId  The ID of the interface to register.\r\n     */\r\n    function registerInterface(bytes4 _interfaceId) external onlyOwner {\r\n        _registerInterface(_interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to override the `_beforeTokenTransfer`\r\n     *      hook provided by the ERC721 standard.\r\n     *      Prevents transferring the NFT if they are not tradeable.\r\n     *\r\n     * @param from      The address that is attempting to transfer.\r\n     * @param to        The address that will receive the token.\r\n     * @param tokenId   The ID of the token to transfer.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256\r\n    ) internal virtual override(ERC721Upgradeable) {\r\n        super._beforeTokenTransfer(from, to, tokenId, 1);\r\n\r\n        if (from == address(0)) return;\r\n\r\n        // Only possibly revert when there are tokens still to be sold, and\r\n        // the transferrer, either `from` or `to` are not approved.\r\n        if (tokenId < maxSupply && totalSupply < maxSupply) {\r\n            if (!approvedTransferrers[from] && !approvedTransferrers[to]) {\r\n                revert TransferOnlyWhenSold(totalSupply, maxSupply);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the tokens have all sold.\r\n     */\r\n    function _assertTokensNotSoldOut() internal view {\r\n        if (totalSupply >= maxSupply) {\r\n            revert TokensSoldOut();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the provided trait count\r\n     *      is not equal to the expected trait count.\r\n     *\r\n     * @param count The provided trait count.\r\n     */\r\n    function _assertValidTraitCount(uint256 count) internal view {\r\n        if (count != numTraits) {\r\n            revert InvalidTraitCountProvided(numTraits);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the provided trait value\r\n     *      is outside the range of traits.\r\n     *\r\n     * @param provided  The provided trait value.\r\n     */\r\n    function _assertValidTraitRange(uint256 provided) internal view {\r\n        if (provided >= numTraits && provided >= 0) {\r\n            revert InvalidTraitRange(numTraits);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the provided attribute\r\n     *      value is within range for the given trait value.\r\n     *\r\n     * @param _traitId  The ID of the trait where the attribute resides.\r\n     * @param provided  The provided attribute index.\r\n     */\r\n    function _assertValidAttributeRange(\r\n        uint256 _traitId,\r\n        uint256 provided\r\n    ) internal view {\r\n        if (provided >= traits[_traitId].maxCount && provided >= 0) {\r\n            revert InvalidAttributeRange(traits[_traitId].maxCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the sender of a call\r\n     *      is not authorized to access a function that requires\r\n     *      authorization.\r\n     *\r\n     * @param sender    The address to check authority on.\r\n     */\r\n    function _assertSenderIsAuthorized(address sender) internal view {\r\n        if (sender != owner() && sender != minterAddress) {\r\n            revert UnauthorizedAccessAttempt();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to allow upgrades to this contract.\r\n     *\r\n     * @param newImplementation The address of the new implementation.\r\n     */\r\n    function _authorizeUpgrade(\r\n        address newImplementation\r\n    ) internal override onlyOwner {}\r\n}\r\n"
    },
    "contracts/nft/bull/lib/MathUtils.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title PLAYA3ULL Games Math Utility Library\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This library contains utility functions for calculating\r\n *         various mathematical values that Solidity does not readily\r\n *         provide.\r\n */\r\nlibrary MathUtils {\r\n    int256 internal constant SCALE = 1e18;\r\n    \r\n    ///\r\n    /// @dev Hashes given string using keccak256\r\n    ///\r\n    function _hash(string memory _string) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_string));\r\n    }\r\n    \r\n    ///\r\n    /// @dev Converts bytes16 to bytes32\r\n    ///\r\n    function _bytes16ToBytes32(bytes16 data) internal pure returns (bytes32 result) {\r\n        result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\r\n            (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\r\n        result = result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |\r\n            (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\r\n        result = result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |\r\n            (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\r\n        result = result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |\r\n            (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\r\n        result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\r\n            (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\r\n        result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\r\n            uint256 (result) +\r\n            (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\r\n            0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);\r\n    }\r\n    \r\n    ///\r\n    /// @dev Converts bytes32 to a string\r\n    ///\r\n    function _bytes32ToString(bytes32 data) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(_bytes16ToBytes32(bytes16(data)), _bytes16ToBytes32(bytes16(data << 128))));\r\n    }\r\n    \r\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\r\n        if (x >= 2**128) {\r\n            x >>= 128;\r\n            msb += 128;\r\n        }\r\n        if (x >= 2**64) {\r\n            x >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (x >= 2**32) {\r\n            x >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (x >= 2**16) {\r\n            x >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (x >= 2**8) {\r\n            x >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (x >= 2**4) {\r\n            x >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (x >= 2**2) {\r\n            x >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (x >= 2**1) {\r\n            // No need to shift x any more.\r\n            msb += 1;\r\n        }\r\n    }\r\n    \r\n    function log2(int256 x) internal pure returns (int256 result) {\r\n        require(x > 0, \"PB MU: Input must be greater than 0!\");\r\n        unchecked {\r\n            // This works because log2(x) = -log2(1/x).\r\n            int256 sign;\r\n            if (x >= SCALE) {\r\n                sign = 1;\r\n            } else {\r\n                sign = -1;\r\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\r\n                assembly {\r\n                    x := div(1000000000000000000000000000000000000, x)\r\n                }\r\n            }\r\n\r\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\r\n            uint256 n = mostSignificantBit(uint256(x / SCALE));\r\n\r\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\r\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\r\n            result = int256(n) * SCALE;\r\n\r\n            // This is y = x * 2^(-n).\r\n            int256 y = x >> n;\r\n\r\n            // If y = 1, the fractional part is zero.\r\n            if (y == SCALE) {\r\n                return result * sign;\r\n            }\r\n\r\n            // Calculate the fractional part via the iterative approximation.\r\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\r\n            for (int256 delta = int256(SCALE / 2); delta > 0; delta >>= 1) {\r\n                y = (y * y) / SCALE;\r\n\r\n                // Is y^2 > 2 and so in the range [2,4)?\r\n                if (y >= 2 * SCALE) {\r\n                    // Add the 2^(-m) factor to the logarithm.\r\n                    result += delta;\r\n\r\n                    // Corresponds to z/2 on Wikipedia.\r\n                    y >>= 1;\r\n                }\r\n            }\r\n            result *= sign;\r\n        }\r\n    }\r\n\r\n\r\n    function abs(int x) internal pure returns (uint256) {\r\n        return x >= 0 ? uint256(x) : uint256(-x);\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a <= b ? a : b;\r\n    }\r\n\r\n    function canSub(uint256 a, uint256 b) internal pure returns (bool) {\r\n        if (b > a) return (false);\r\n        return (true);\r\n    }\r\n}"
    },
    "contracts/nft/ERC721uUpgradeable.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\r\n\r\n/**\r\n * @title ERC721uUpgradeable\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract is intended to be inherited and provides\r\n *         access to a central location for handling retrieving,\r\n *         updating, and verifying ERC721 token URIs which the base\r\n *         ERC721 standard does not provide.\r\n *         Additionally, this ERC721u contract supports emitting\r\n *         events when the token URI is updated, allowing listeners\r\n *         to handle this change.\r\n */\r\ncontract ERC721uUpgradeable is ERC721Upgradeable, OwnableUpgradeable {\r\n    /// @notice The base URI for tokens and where their metadata\r\n    ///         is stored.\r\n    string public baseTokenURI;\r\n\r\n    /**\r\n     * @dev Emit an event whenever the base token URI is updated.\r\n     *\r\n     * @param uri   The new base token uri.\r\n     */\r\n    event BaseTokenURIUpdated(string uri);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to access a token ID\r\n     *      that does not exist.\r\n     */\r\n    error TokenDoesNotExist();\r\n\r\n    function __ERC721u_init(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) internal onlyInitializing {\r\n        __ERC721_init(_name, _symbol);\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to view and return the base token URI.\r\n     *\r\n     * @return The base token URI where the metadata is stored.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token URI where the metadata is stored for\r\n     *         a given token ID.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve the URI for.\r\n     *\r\n     * @return The token metadata URI.\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    baseTokenURI,\r\n                    StringsUpgradeable.toString(tokenId)\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the base token metadata URI.\r\n     *\r\n     * @param _newBaseTokenURI  The new base token URI.\r\n     */\r\n    function setBaseTokenURI(\r\n        string memory _newBaseTokenURI\r\n    ) external onlyOwner {\r\n        baseTokenURI = _newBaseTokenURI;\r\n\r\n        emit BaseTokenURIUpdated(baseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given token ID does\r\n     *      not exist.\r\n     *\r\n     * @param tokenId   The ID of the token to verify if exists.\r\n     */\r\n    function _assertTokenExists(uint256 tokenId) internal view {\r\n        if (!_exists(tokenId)) {\r\n            revert TokenDoesNotExist();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/nft/bull/interfaces/I3ULLNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPLAYA3ULLNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPLAYA3ULLNFT contains all external functions and\r\n *         structs for the 3ULL NFT.\r\n */\r\ninterface IPLAYA3ULLNFT {\r\n\r\n    /**\r\n     * @dev An NFT contains two components: a string that\r\n     *      represents that NFTs DNA, preventing any other\r\n     *      token from using the same DNA, and an array of\r\n     *      traits that the NFT is constructed from.\r\n     */\r\n    struct NFT {\r\n        string dna;\r\n        uint256[] traits;\r\n    }\r\n\r\n    /**\r\n     * @dev A trait represents the different parts of the\r\n     *      token. Each trait contains three components: \r\n     *      a name, whether it is required, and the maximum\r\n     *      number of attributes that this trait may hold.\r\n     */\r\n    struct Trait {\r\n        string name;\r\n        bool required;\r\n        uint256 maxCount;\r\n    }\r\n\r\n    /**\r\n     * @dev An attribute belongs to a trait, and represents\r\n     *      a different and unique variation of the parent\r\n     *      trait. Each attribute contains three components:\r\n     *      a name, a rarity value, and the number of this\r\n     *      attribute that has sold.\r\n     */\r\n    struct Attribute {\r\n        string name;\r\n        uint256 rarity;\r\n        uint256 numSold;\r\n    }\r\n\r\n    function getMaxSupply() external view returns (uint256);\r\n\r\n    function getTotalSupply() external view returns (uint256);\r\n\r\n    function getTraitLength() external view returns (uint256);\r\n    \r\n    function getTrait(uint256 traitId) external view returns (Trait memory);\r\n\r\n    function getAttributeLength(uint256 traitId) external view returns (uint256);\r\n\r\n    function getAttribute(uint256 traitId, uint256 attrId) external view returns (Attribute memory);\r\n\r\n    function isDNAUnique(uint256[] memory traitIds) external view returns (bool isUnique, string memory dna);\r\n\r\n    function mint(address to, uint256[] memory traitIds) external;\r\n}"
    },
    "contracts/nft/bull/interfaces/I3ULLNFTEventsAndErrors.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport {IPLAYA3ULLNFT} from \"./I3ULLNFT.sol\";\r\n\r\n/**\r\n * @title IPLAYA3ULLNFTEventsAndErrors\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPLAYA3ULLNFTEventsAndErrors contains all external events,\r\n *         and errors for the 3ULL NFT.\r\n */\r\ninterface IPLAYA3ULLNFTEventsAndErrors is IPLAYA3ULLNFT {\r\n    /**\r\n     * @dev Emit an event whenever a token is minted.\r\n     *\r\n     * @param to        The address that the token was minted\r\n     *                  to.\r\n     * @param tokenId   The ID of the token that was minted.\r\n     */\r\n    event TokenMinted(address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a new trait is added.\r\n     *\r\n     * @param traitIndex    The index that the new trait resides at.\r\n     * @param name          The name of the added trait.\r\n     * @param addedTrait    The trait that was added.\r\n     */\r\n    event TraitAdded(uint256 indexed traitIndex, string name, Trait addedTrait);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a new attribute is added.\r\n     *\r\n     * @param traitIndex    The index of the trait that this attribute\r\n     *                      belongs to.\r\n     * @param attrIndex     The index that the new attribute resides at.\r\n     * @param name          The name of the added attribute.\r\n     * @param addedAttr     The attribute that was added.\r\n     */\r\n    event AttributeAdded(\r\n        uint256 indexed traitIndex,\r\n        uint256 indexed attrIndex,\r\n        string name,\r\n        Attribute addedAttr\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever the royalty address is updated.\r\n     *\r\n     * @param royalty   The royalty address that has been set.\r\n     */\r\n    event RoyaltyAddressUpdated(address royalty);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint when all the\r\n     *      tokens are sold out.\r\n     */\r\n    error TokensSoldOut();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing an invalid number\r\n     *      of traits.\r\n     *\r\n     * @param expected  The expected number of traits.\r\n     */\r\n    error InvalidTraitCountProvided(uint256 expected);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a token that\r\n     *      has the same DNA as another that already exists.\r\n     */\r\n    error DuplicateTokenDNA();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a value that is out\r\n     *      of range for a trait.\r\n     * @param maxBound  The maximum upper bound trait available.\r\n     */\r\n    error InvalidTraitRange(uint256 maxBound);\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a value that is out\r\n     *      of range for an attribute.\r\n     * @param maxBound  The maximum upper bound attribute available.\r\n     */\r\n    error InvalidAttributeRange(uint256 maxBound);\r\n\r\n    /**\r\n     * @dev Revert with an error when a user that is not authorized\r\n     *      attempts to perform an action that only authorized users\r\n     *      may attempt.\r\n     */\r\n    error UnauthorizedAccessAttempt();\r\n\r\n    /**\r\n     * @dev Revert with an error when setting a contract address that\r\n     *      is not actually a contract.\r\n     */\r\n    error AddressIsNotContract();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to transfer a token\r\n     *      when there are still tokens to sell.\r\n     *\r\n     * @param numSold   The number of tokens that have been sold.\r\n     * @param maxSupply The number of tokens that must be sold in\r\n     *                  order to transfer a token.\r\n     */\r\n    error TransferOnlyWhenSold(uint256 numSold, uint256 maxSupply);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to add multiple attributes\r\n     *      but attributes already exist.\r\n     */\r\n    error ExistingAttributeLengthMustBeZero();\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}