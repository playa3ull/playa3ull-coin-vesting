{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/misc/Ratio.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Ratio\r\n * @author Jourdan (@jourdanhaines)\r\n * @notice Library for ratio-based calculations with 2 decimal precision.\r\n */\r\nlibrary Ratio {\r\n    /// @notice Error to be thrown if the ratio value exceeds the maximum allowed value.\r\n    error InvalidRatio(uint256 max);\r\n\r\n    /**\r\n     * @dev Ensures the ratio value is between 0 and 10000 (for 2 decimal precision).\r\n     * Throws an `InvalidRatio` error if the condition is not met.\r\n     * @param _ratio The ratio value to validate. It should be within 0 and 10000 for 2 decimal precision.\r\n     */\r\n    modifier validRatio(uint256 _ratio) {\r\n        if (_ratio > 10000) {\r\n            revert InvalidRatio(10000);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates a specified ratio of the given amount.\r\n     * @dev This function uses 2 decimal precision for ratio calculations. Hence, a ratio of 5.5% should be passed as 550.\r\n     * @param amount The primary value of which a part/ratio is to be calculated.\r\n     * @param ratioValue The ratio value in basis points (2 decimal precision) to be applied on the primary amount.\r\n     * @return The calculated value based on the provided ratio.\r\n     */\r\n    function getPart(\r\n        uint256 amount,\r\n        uint256 ratioValue\r\n    ) internal pure validRatio(ratioValue) returns (uint256) {\r\n        return (amount * ratioValue) / 10000;\r\n    }\r\n}\r\n"
    },
    "contracts/nft/ERC721u.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC721u\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract is intended to be inherited and provides\r\n *         access to a central location for handling retrieving,\r\n *         updating, and verifying ERC721 token URIs which the base\r\n *         ERC721 standard does not provide.\r\n *         Additionally, this ERC721u contract supports emitting\r\n *         events when the token URI is updated, allowing listeners\r\n *         to handle this change.\r\n */\r\ncontract ERC721u is ERC721, Ownable {\r\n    /// @notice The base URI for tokens and where their metadata\r\n    ///         is stored.\r\n    string public baseTokenURI;\r\n\r\n    /**\r\n     * @dev Emit an event whenever the base token URI is updated.\r\n     *\r\n     * @param uri   The new base token uri.\r\n     */\r\n    event BaseTokenURIUpdated(string uri);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to access a token ID\r\n     *      that does not exist.\r\n     */\r\n    error TokenDoesNotExist();\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC721(_name, _symbol) {}\r\n\r\n    /**\r\n     * @dev Internal view function to view and return the base token URI.\r\n     *\r\n     * @return The base token URI where the metadata is stored.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token URI where the metadata is stored for\r\n     *         a given token ID.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve the URI for.\r\n     *\r\n     * @return The token metadata URI.\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        _assertTokenExists(tokenId);\r\n\r\n        return\r\n            string(abi.encodePacked(baseTokenURI, Strings.toString(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the base token metadata URI.\r\n     *\r\n     * @param _newBaseTokenURI  The new base token URI.\r\n     */\r\n    function setBaseTokenURI(\r\n        string memory _newBaseTokenURI\r\n    ) external onlyOwner {\r\n        baseTokenURI = _newBaseTokenURI;\r\n\r\n        emit BaseTokenURIUpdated(baseTokenURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view function to revert if the given token ID does\r\n     *      not exist.\r\n     *\r\n     * @param tokenId   The ID of the token to verify if exists.\r\n     */\r\n    function _assertTokenExists(uint256 tokenId) internal view {\r\n        if (!_exists(tokenId)) {\r\n            revert TokenDoesNotExist();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/nft/games/nexus/interfaces/INexusAdminMinter.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title NexusAdminMinter Interface\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice Interface for the NexusAdminMinter contract.\r\n */\r\ninterface INexusAdminMinter {\r\n    /**\r\n     * @notice Returns the NexusNFT address.\r\n     *\r\n     * @return The NexusNFT address.\r\n     */\r\n    function getNexusNFT() external view returns (address);\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw any funds.\r\n     */\r\n    function withdraw() external;\r\n\r\n    /**\r\n     * @notice Mints a token to a user.\r\n     */\r\n    function mint(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @notice Mints many tokens to a user.\r\n     *\r\n     * @param to        The address to mint the tokens to.\r\n     * @param tokenId   The ID of the token to mint.\r\n     * @param amount    The amount of tokens to mint.\r\n     */\r\n    function mintMany(address to, uint256 tokenId, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mints a variety of tokens to a user.\r\n     *\r\n     * @param to        The address to mint the tokens to.\r\n     * @param tokenIds  The IDs of the tokens to mint.\r\n     */\r\n    function mintBatch(address to, uint256[] memory tokenIds) external;\r\n\r\n    /**\r\n     * @notice Allows the owner to transfer ownership of the NexusNFT contract.\r\n     *\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    function transferChildOwnership(address _newOwner) external;\r\n}\r\n"
    },
    "contracts/nft/games/nexus/interfaces/INexusNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title INexusNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice INexusNFT contains all external functions, structs,\r\n *         events, and errors for the Nexus NFT.\r\n */\r\ninterface INexusNFT {\r\n    /**\r\n     * @dev The structure of a skin consists of the following:\r\n     *       - skinId: The unique identifier for the skin, this\r\n     *                 is also used as the token ID\r\n     *       - skinType: The type of skin, either a character or\r\n     *                   weapon skin\r\n     *       - price: The price of the skin in USD\r\n     *       - maxQuantity: The maximum number of skins that can\r\n     *                      be minted. If this is 0, then there\r\n     *                      is no limit\r\n     *       - minted: The number of skins that have been minted\r\n     *       - name: The name of the skin\r\n     *       - internalName: The internal name of the skin\r\n     *       - special: Whether or not the skin can be minted\r\n     *                  after the mint ends\r\n     */\r\n    struct Skin {\r\n        uint256 skinId;\r\n        uint256 skinType;\r\n        uint256 price;\r\n        uint256 maxQuantity;\r\n        uint256 minted;\r\n        string name;\r\n        string internalName;\r\n        bool special;\r\n    }\r\n\r\n    /**\r\n     * @dev The structure of a skin bundle offer consists of the\r\n     *      following:\r\n     *       - bundleId: The unique identifier for the bundle\r\n     *       - discount: The discount percentage for the bundle\r\n     *       - skinIds: The IDs of the skins that are in the bundle\r\n     *       - active: Whether or not the bundle is active\r\n     */\r\n    struct SkinBundleOffer {\r\n        uint256 bundleId;\r\n        uint256 discount;\r\n        uint256[] skinIds;\r\n        bool active;\r\n    }\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin is added.\r\n     *\r\n     * @param skinId       The ID of the skin. This is also the token ID\r\n     * @param skinType     The type of skin, either a character or weapon skin\r\n     * @param price        The price of the skin in USD\r\n     * @param maxQuantity  The maximum number of skins that can be minted\r\n     * @param name         The name of the skin\r\n     * @param internalName The internal name of the skin\r\n     * @param special      Whether or not the skin can be minted after the mint ends\r\n     */\r\n    event SkinAdded(\r\n        uint256 indexed skinId,\r\n        uint256 indexed skinType,\r\n        uint256 price,\r\n        uint256 maxQuantity,\r\n        string name,\r\n        string internalName,\r\n        bool special\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin is updated.\r\n     *\r\n     * @param skinId       The ID of the skin. This is also the token ID\r\n     * @param skinType     The type of skin, either a character or weapon skin\r\n     * @param price        The price of the skin in USD\r\n     * @param maxQuantity  The maximum number of skins that can be minted\r\n     * @param name         The name of the skin\r\n     * @param internalName The internal name of the skin\r\n     * @param special      Whether or not the skin can be minted after the mint ends\r\n     */\r\n    event SkinUpdated(\r\n        uint256 indexed skinId,\r\n        uint256 indexed skinType,\r\n        uint256 price,\r\n        uint256 maxQuantity,\r\n        string name,\r\n        string internalName,\r\n        bool special\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin bundle offer is added.\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     * @param discount The discount percentage for the bundle\r\n     * @param skinIds  The IDs of the skins that are in the bundle\r\n     */\r\n    event BundleAdded(\r\n        uint256 indexed bundleId,\r\n        uint256 discount,\r\n        uint256[] skinIds\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin bundle offer is updated.\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     * @param discount The discount percentage for the bundle\r\n     * @param skinIds  The IDs of the skins that are in the bundle\r\n     */\r\n    event BundleUpdated(\r\n        uint256 indexed bundleId,\r\n        uint256 discount,\r\n        uint256[] skinIds\r\n    );\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin is minted.\r\n     *\r\n     * @param to      The address that the skin was minted to\r\n     * @param tokenId The ID of the skin that was minted\r\n     */\r\n    event SkinMinted(address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a skin bundle is minted.\r\n     *\r\n     * @param to       The address that the bundle was minted to\r\n     * @param bundleId The ID of the bundle that was minted\r\n     */\r\n    event BundleMinted(address indexed to, uint256 indexed bundleId);\r\n\r\n    /**\r\n     * @dev Emit an event when an admin toggles minting.\r\n     *\r\n     * @param enabled Whether or not minting is enabled\r\n     */\r\n    event MintingToggled(bool enabled);\r\n\r\n    /**\r\n     * @dev Emit an event when an admin updates the end time.\r\n     *\r\n     * @param endTime The new time when the mint ends\r\n     */\r\n    event EndTimeUpdated(uint256 endTime);\r\n\r\n    /**\r\n     * @dev Emit an event when the owner/admin is updated.\r\n     *\r\n     * @param owner The new owner/admin address\r\n     */\r\n    event OwnerUpdated(address indexed owner);\r\n\r\n    function getTotalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to call a function\r\n     *      that is only allowed by an admin.\r\n     */\r\n    error Unauthorized();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a skin where\r\n     *      the minter does not have the required amount of funds.\r\n     *\r\n     * @param provided The amount of funds provided\r\n     * @param expected The amount of funds expected\r\n     */\r\n    error InsufficientValue(uint256 provided, uint256 expected);\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a skin ID that\r\n     *      does not exist.\r\n     */\r\n    error InvalidSkinID();\r\n\r\n    /**\r\n     * @dev Revert with an error when providing a bundle ID that\r\n     *      does not exist.\r\n     */\r\n    error InvalidBundleID();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a skin that\r\n     *      is sold out.\r\n     */\r\n    error SkinSoldOut();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint, but minting\r\n     *      is disabled.\r\n     */\r\n    error MintingDisabled();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a bundle that\r\n     *      is not active.\r\n     */\r\n    error BundleInactive();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to mint a capped skin\r\n     *      when capped skins are enabled.\r\n     */\r\n    error SkinNoLongerMintable();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to transfer admin\r\n     *      but the current owner has skins.\r\n     *\r\n     * @param skinId The ID of the skin that the owner has\r\n     */\r\n    error OwnerHasSkins(uint256 skinId);\r\n}\r\n"
    },
    "contracts/nft/games/nexus/NexusAdminMinter.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport {NexusNFT} from \"./NexusNFT.sol\";\r\nimport {INexusNFT} from \"./interfaces/INexusNFT.sol\";\r\nimport {INexusAdminMinter} from \"./interfaces/INexusAdminMinter.sol\";\r\n\r\n/**\r\n * @title NexusAdminMinter\r\n *\r\n * @author Jourdan (PLAYA3ULL)\r\n *\r\n * @notice NexusAdminMinter allows for minting Nexus skins.\r\n */\r\ncontract NexusAdminMinter is Ownable, INexusAdminMinter {\r\n    /// @notice NexusNFT contract\r\n    NexusNFT public nexusNFT;\r\n\r\n    /// @notice The address that is allowed to mint skins and bundles\r\n    mapping(address => bool) public minters;\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            minters[msg.sender] || msg.sender == owner(),\r\n            \"NexusAdminMinter: caller is not a minter nor owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(NexusNFT _nexusNFT) {\r\n        nexusNFT = _nexusNFT;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the NexusNFT address.\r\n     *\r\n     * @return The NexusNFT address.\r\n     */\r\n    function getNexusNFT() external view override returns (address) {\r\n        return address(nexusNFT);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a token to a user.\r\n     *\r\n     * @param to        The address to mint the skin to\r\n     * @param tokenId   The ID of the skin to mint\r\n     */\r\n    function mint(address to, uint256 tokenId) external override onlyAdmin {\r\n        mintTokens(to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints many tokens to a user.\r\n     *\r\n     * @param to        The address to mint the tokens to.\r\n     * @param tokenId   The ID of the token to mint.\r\n     * @param amount    The amount of tokens to mint.\r\n     */\r\n    function mintMany(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external override onlyAdmin {\r\n        mintTokens(to, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints a variety of tokens to a user.\r\n     *\r\n     * @param to        The address to mint the skins to\r\n     * @param tokenIds  The IDs of the skins to mint\r\n     */\r\n    function mintBatch(\r\n        address to,\r\n        uint256[] memory tokenIds\r\n    ) external override onlyAdmin {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            mintTokens(to, tokenIds[i], 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Mints nexus skins via the NexusNFT contract\r\n     *\r\n     * @param to      The address to mint the skin to\r\n     * @param skinId  The ID of the skin to mint\r\n     * @param count   The number of skins to mint\r\n     */\r\n    function mintTokens(\r\n        address to,\r\n        uint256 skinId,\r\n        uint256 count\r\n    ) public onlyAdmin {\r\n        for (uint256 i = 0; i < count; i++) {\r\n            nexusNFT.adminMintFor(to, skinId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set the minter address\r\n     *\r\n     * @param _minter  The address to set as the minter\r\n     */\r\n    function toggleMinter(address _minter) external onlyOwner {\r\n        minters[_minter] = !minters[_minter];\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to transfer ownership of the child contract.\r\n     *\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function transferChildOwnership(\r\n        address _newOwner\r\n    ) external override onlyOwner {\r\n        nexusNFT.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// NexusNFT functions\r\n    /// -----------------------------------------------------------------------\r\n    function addSkin(\r\n        uint256 _type,\r\n        uint256 _price,\r\n        uint256 _maxQuantity,\r\n        string memory _name,\r\n        string memory _internalName,\r\n        bool _special\r\n    ) external onlyOwner {\r\n        nexusNFT.addSkin(\r\n            _type,\r\n            _price,\r\n            _maxQuantity,\r\n            _name,\r\n            _internalName,\r\n            _special\r\n        );\r\n    }\r\n\r\n    function updateSkin(\r\n        uint256 _skinId,\r\n        uint256 _price,\r\n        uint256 _maxQuantity,\r\n        string memory _name,\r\n        string memory _internalName,\r\n        bool _special\r\n    ) external onlyOwner {\r\n        nexusNFT.updateSkin(\r\n            _skinId,\r\n            _price,\r\n            _maxQuantity,\r\n            _name,\r\n            _internalName,\r\n            _special\r\n        );\r\n    }\r\n\r\n    function addBundle(\r\n        uint256 _discount,\r\n        uint256[] memory _skinIds\r\n    ) external onlyOwner {\r\n        nexusNFT.addBundle(_discount, _skinIds);\r\n    }\r\n\r\n    function updateBundle(\r\n        uint256 _bundleId,\r\n        uint256 _discount,\r\n        uint256[] memory _skinIds,\r\n        bool _active\r\n    ) external onlyOwner {\r\n        nexusNFT.updateBundle(_bundleId, _discount, _skinIds, _active);\r\n    }\r\n}\r\n"
    },
    "contracts/nft/games/nexus/NexusNFT.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\nimport {INexusNFT} from \"./interfaces/INexusNFT.sol\";\r\nimport {ERC721u} from \"../../ERC721u.sol\";\r\nimport {IPriceOracle} from \"../../../oracle/price/interfaces/IPriceOracle.sol\";\r\nimport {Ratio} from \"../../../misc/Ratio.sol\";\r\n\r\n/**\r\n * @title NexusNFT\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice This contract contains all base functionality for\r\n *         the Nexus NFT system.\r\n *         This contract is an ERC1155 token, and is used to\r\n *         mint new NFTs.\r\n *         When adding new skins, the type of skin is denoted\r\n *         as either a 0 or 1, where 0 is a character skin, and\r\n *         1 is a weapon skin.\r\n */\r\ncontract NexusNFT is INexusNFT, ERC721u, IERC2981, ERC165Storage {\r\n    using Ratio for uint256;\r\n\r\n    /*\r\n     *\r\n     * PRIVATE VARIABLES\r\n     *\r\n     */\r\n\r\n    /// @dev The interface ID of the ERC2981 NFT Royalty Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /// @dev The interface ID of the ERC721 NFT Standard.\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *\r\n     * PUBLIC VARIABLES\r\n     *\r\n     */\r\n\r\n    /// @notice The total number of skins that have been added\r\n    uint256 public totalSkins;\r\n\r\n    /// @notice The total number of NFTs that have been minted\r\n    uint256 public totalSupply;\r\n\r\n    /// @notice The total number of bundles that have been added\r\n    uint256 public totalBundles;\r\n\r\n    /// @notice The time when minting will end\r\n    uint256 public endTime;\r\n\r\n    /// @notice Whether or not the minting is enabled\r\n    bool public isMintingEnabled = false;\r\n\r\n    /// @notice The address where royalties will be sent.\r\n    address public royaltyAddress;\r\n\r\n    /// @notice The address of the treasury manager.\r\n    address public treasuryManager;\r\n\r\n    /// @notice The Price Oracle to retrieve price data from\r\n    IPriceOracle public oracle;\r\n\r\n    /// @notice Tracks the skins that are available for purchase\r\n    mapping(uint256 => Skin) public skins;\r\n\r\n    /// @notice Tracks the skins that have been minted\r\n    mapping(uint256 => Skin) public tokenSkins;\r\n\r\n    /// @notice Tracks the bundles that have been added\r\n    mapping(uint256 => SkinBundleOffer) public bundles;\r\n\r\n    /*\r\n     *\r\n     * MODIFIERS\r\n     *\r\n     */\r\n\r\n    /// @dev Modifier to check if the caller is the owner\r\n    ///      If not, revert with `Unauthorized` error\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != owner()) {\r\n            revert Unauthorized();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _oracle,\r\n        address _treasuryManager,\r\n        uint256 _endTime,\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) ERC721u(name_, symbol_) {\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n        treasuryManager = _treasuryManager;\r\n        oracle = IPriceOracle(_oracle);\r\n\r\n        endTime = _endTime;\r\n    }\r\n\r\n    /*\r\n     *\r\n     * PUBLIC FUNCTIONS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * @notice Returns whether the given interface is supported by\r\n     *         this contract.\r\n     *\r\n     * @param interfaceId   The ID of the interface to check.\r\n     *\r\n     * @return Whether the given `interfaceId` is supported.\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, IERC165, ERC165Storage)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the URI for a given token ID.\r\n     *\r\n     * @param tokenId   The ID of the token to retrieve the URI for.\r\n     *\r\n     * @return The URI for `tokenId`.\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory base = _baseURI();\r\n\r\n        if (bytes(base).length == 0) {\r\n            return super.tokenURI(tokenId);\r\n        }\r\n\r\n        uint256 skinId = tokenSkins[tokenId].skinId;\r\n\r\n        return string(abi.encodePacked(base, Strings.toString(skinId)));\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the royalty information for this ERC2981 contract.\r\n     *\r\n     * @param _salePrice    The price of the sale to get royalty information\r\n     *                      for.\r\n     *\r\n     * @return receiver         The receiving address for the royalties.\r\n     * @return royaltyAmount    The amount of royalties.\r\n     */\r\n    function royaltyInfo(\r\n        uint256,\r\n        uint256 _salePrice\r\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\r\n        return (royaltyAddress, (_salePrice * 750) / 10000);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current number of tokens that exist.\r\n     *\r\n     * @return The total number of tokens in existence.\r\n     */\r\n    function getTotalSupply() external view override returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the skins in a bundle\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     *\r\n     * @return The IDs of the skins in the bundle\r\n     */\r\n    function getBundleSkins(\r\n        uint256 bundleId\r\n    ) external view returns (uint256[] memory) {\r\n        return bundles[bundleId].skinIds;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the price of a bundle\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     * @param count    The number of bundles to mint\r\n     */\r\n    function getBundlePrice(\r\n        uint256 bundleId,\r\n        uint256 count\r\n    ) public view returns (uint256) {\r\n        uint256 totalPrice = 0;\r\n        for (uint256 i = 0; i < bundles[bundleId].skinIds.length; i++) {\r\n            totalPrice += skins[bundles[bundleId].skinIds[i]].price;\r\n        }\r\n\r\n        uint256 price = oracle.getPriceIn(\"USDC\", \"3ULL\", totalPrice * count);\r\n        uint256 discountedPrice = price -\r\n            (price.getPart(bundles[bundleId].discount));\r\n\r\n        // Round down to the nearest 10\r\n        discountedPrice = (discountedPrice / 10) * 10;\r\n\r\n        return discountedPrice;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @notice Mints a new NFT to the sender\r\n     *\r\n     * @param skinId The ID of skin to mint\r\n     * @param count  The number of NFTs to mint\r\n     */\r\n    function mint(uint256 skinId, uint256 count) external payable {\r\n        mintFor(msg.sender, skinId, count);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @notice Mints a new NFT to the `to` address\r\n     *\r\n     * @param to     The address to mint the NFT to\r\n     * @param skinId The ID of skin to mint\r\n     * @param count  The number of NFTs to mint\r\n     */\r\n    function mintFor(address to, uint256 skinId, uint256 count) public payable {\r\n        Skin memory skin = skins[skinId];\r\n\r\n        uint256 price = oracle.getPriceIn(\"USDC\", \"3ULL\", skin.price * count);\r\n\r\n        if (msg.value != price) {\r\n            revert InsufficientValue(msg.value, price);\r\n        }\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            _mintToken(to, skinId);\r\n        }\r\n\r\n        payable(treasuryManager).transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the NFTs within a bundle to the sender\r\n     *\r\n     * @param bundleId The ID of the bundle to mint\r\n     * @param count    The number of bundles to mint\r\n     */\r\n    function mintBundle(uint256 bundleId, uint256 count) external payable {\r\n        mintBundleFor(msg.sender, bundleId, count);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the NFTs within a bundle to the `to` address\r\n     *\r\n     * @param to       The address to mint the NFTs to\r\n     * @param bundleId The ID of the bundle to mint\r\n     * @param count    The number of bundles to mint\r\n     */\r\n    function mintBundleFor(\r\n        address to,\r\n        uint256 bundleId,\r\n        uint256 count\r\n    ) public payable {\r\n        _assertBundleExists(bundleId);\r\n        _assertBundleActive(bundleId);\r\n\r\n        SkinBundleOffer memory bundle = bundles[bundleId];\r\n\r\n        uint256 price = getBundlePrice(bundleId, count);\r\n\r\n        if (msg.value != price) {\r\n            revert InsufficientValue(msg.value, price);\r\n        }\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            for (uint256 j = 0; j < bundle.skinIds.length; j++) {\r\n                _mintToken(to, bundle.skinIds[j]);\r\n            }\r\n\r\n            emit BundleMinted(to, bundleId);\r\n        }\r\n\r\n        payable(treasuryManager).transfer(msg.value);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * ADMIN FUNCTIONS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * @notice Allows the owner to set the treasury manager address.\r\n     */\r\n    function setTreasuryManager(address manager) external onlyOwner {\r\n        treasuryManager = manager;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows an admin to mint a new NFT to the `to` address\r\n     *\r\n     * @param to     The address to mint the NFT to\r\n     * @param skinId The ID of skin to mint\r\n     */\r\n    function adminMintFor(address to, uint256 skinId) external onlyAdmin {\r\n        _mintToken(to, skinId);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a new type of skin that can be minted\r\n     *\r\n     * @param _type         The type of skin to add, where 0 is a character\r\n     *                      skin, and 1 is a weapon skin\r\n     * @param _price        The price of the skin in USDC\r\n     * @param _maxQuantity  The maximum number of this skin that can be\r\n     *                      minted. If 0, there is no limit\r\n     * @param _name         The name of the skin\r\n     * @param _internalName The internal name of the skin\r\n     */\r\n    function addSkin(\r\n        uint256 _type,\r\n        uint256 _price,\r\n        uint256 _maxQuantity,\r\n        string memory _name,\r\n        string memory _internalName,\r\n        bool _special\r\n    ) external onlyAdmin {\r\n        // The ID of the skin is the total number of skins before mint\r\n        uint256 _skinId = totalSkins;\r\n\r\n        totalSkins += 1;\r\n\r\n        skins[_skinId] = Skin({\r\n            skinId: _skinId,\r\n            skinType: _type,\r\n            price: _price,\r\n            maxQuantity: _maxQuantity,\r\n            minted: 0,\r\n            name: _name,\r\n            internalName: _internalName,\r\n            special: _special\r\n        });\r\n\r\n        emit SkinAdded(\r\n            _skinId,\r\n            _type,\r\n            _price,\r\n            _maxQuantity,\r\n            _name,\r\n            _internalName,\r\n            _special\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Updates an existing skin\r\n     *\r\n     * @param _skinId       The ID of the skin to update\r\n     * @param _price        The price of the skin in USDC\r\n     * @param _maxQuantity  The maximum number of this skin that can be\r\n     *                      minted. If 0, there is no limit\r\n     * @param _name         The name of the skin\r\n     * @param _internalName The internal name of the skin\r\n     */\r\n    function updateSkin(\r\n        uint256 _skinId,\r\n        uint256 _price,\r\n        uint256 _maxQuantity,\r\n        string memory _name,\r\n        string memory _internalName,\r\n        bool _special\r\n    ) external onlyAdmin {\r\n        _assertSkinExists(_skinId);\r\n\r\n        skins[_skinId] = Skin({\r\n            skinId: _skinId,\r\n            skinType: skins[_skinId].skinType,\r\n            price: _price,\r\n            maxQuantity: _maxQuantity,\r\n            minted: skins[_skinId].minted,\r\n            name: _name,\r\n            internalName: _internalName,\r\n            special: _special\r\n        });\r\n\r\n        emit SkinUpdated(\r\n            _skinId,\r\n            skins[_skinId].skinType,\r\n            _price,\r\n            _maxQuantity,\r\n            _name,\r\n            _internalName,\r\n            _special\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a new bundle that can be purchased\r\n     *\r\n     * @param _discount The discount percentage for the bundle\r\n     * @param _skinIds  The IDs of the skins that are in the bundle\r\n     */\r\n    function addBundle(\r\n        uint256 _discount,\r\n        uint256[] memory _skinIds\r\n    ) external onlyAdmin {\r\n        for (uint256 i = 0; i < _skinIds.length; i++) {\r\n            _assertSkinExists(_skinIds[i]);\r\n        }\r\n\r\n        uint256 _bundleId = totalBundles;\r\n\r\n        totalBundles += 1;\r\n\r\n        bundles[_bundleId] = SkinBundleOffer({\r\n            bundleId: _bundleId,\r\n            discount: _discount,\r\n            skinIds: _skinIds,\r\n            active: true\r\n        });\r\n\r\n        emit BundleAdded(_bundleId, _discount, _skinIds);\r\n    }\r\n\r\n    function updateBundle(\r\n        uint256 _bundleId,\r\n        uint256 _discount,\r\n        uint256[] memory _skinIds,\r\n        bool _active\r\n    ) external onlyAdmin {\r\n        bundles[_bundleId] = SkinBundleOffer({\r\n            bundleId: _bundleId,\r\n            discount: _discount,\r\n            skinIds: _skinIds,\r\n            active: _active\r\n        });\r\n\r\n        emit BundleUpdated(_bundleId, _discount, _skinIds);\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles the minting of new NFTs\r\n     */\r\n    function toggleMinting() external onlyAdmin {\r\n        isMintingEnabled = !isMintingEnabled;\r\n\r\n        emit MintingToggled(isMintingEnabled);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the time when the mint ends\r\n     */\r\n    function setEndTime(uint256 _endTime) external onlyAdmin {\r\n        endTime = _endTime;\r\n\r\n        emit EndTimeUpdated(_endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw deposited funds.\r\n     *\r\n     * @param amount    The amount of funds to withdraw.\r\n     */\r\n    function withdraw(uint256 amount) external onlyAdmin {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Registers that this contract does support a given interface ID.\r\n     *\r\n     * @param _interfaceId  The ID of the interface to register.\r\n     */\r\n    function registerInterface(bytes4 _interfaceId) external onlyOwner {\r\n        _registerInterface(_interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address where royalties will be sent.\r\n     *\r\n     * @param _royaltyAddress   The address that will receive royalties.\r\n     */\r\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\r\n        royaltyAddress = _royaltyAddress;\r\n    }\r\n\r\n    /*\r\n     *\r\n     * INTERNAL FUNCTIONS\r\n     *\r\n     */\r\n\r\n    /**\r\n     * @dev Internal function to mint a token to the `to` address\r\n     *\r\n     * @param to     The address to mint the NFT to\r\n     * @param skinId The ID of skin to mint\r\n     */\r\n    function _mintToken(address to, uint256 skinId) internal {\r\n        _assertMintingEnabled();\r\n        _assertSkinMintable(skinId);\r\n        _assertSkinNotSoldOut(skinId);\r\n\r\n        uint256 tokenId = totalSupply;\r\n\r\n        _mint(to, tokenId);\r\n\r\n        tokenSkins[totalSupply] = skins[skinId];\r\n        totalSupply += 1;\r\n        skins[skinId].minted += 1;\r\n\r\n        emit SkinMinted(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the minting is enabled\r\n     */\r\n    function _assertMintingEnabled() internal view {\r\n        if (!isMintingEnabled) {\r\n            revert MintingDisabled();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the skin is mintable\r\n     *\r\n     * @param skinId The ID of skin to mint\r\n     */\r\n    function _assertSkinMintable(uint256 skinId) internal view {\r\n        // If the skin is not special, it can only be minted before the end time\r\n        if (!skins[skinId].special && block.timestamp >= endTime) {\r\n            revert SkinNoLongerMintable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the skin is not sold out\r\n     *\r\n     * @param skinId The ID of skin to mint\r\n     */\r\n    function _assertSkinNotSoldOut(uint256 skinId) internal view {\r\n        if (\r\n            skins[skinId].maxQuantity > 0 &&\r\n            skins[skinId].minted >= skins[skinId].maxQuantity\r\n        ) {\r\n            revert SkinSoldOut();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the skin exists\r\n     *\r\n     * @param skinId The ID of skin to mint\r\n     */\r\n    function _assertSkinExists(uint256 skinId) internal view {\r\n        if (skinId >= totalSkins) {\r\n            revert InvalidSkinID();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the bundle exists\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     */\r\n    function _assertBundleExists(uint256 bundleId) internal view {\r\n        if (bundleId >= totalBundles) {\r\n            revert InvalidBundleID();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that the bundle is active\r\n     *\r\n     * @param bundleId The ID of the bundle\r\n     */\r\n    function _assertBundleActive(uint256 bundleId) internal view {\r\n        if (!bundles[bundleId].active) {\r\n            revert BundleInactive();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/oracle/price/interfaces/IPriceOracle.sol": {
      "content": "pragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Jourdan (PLAYA3ULL)\r\n * @notice IPriceOracle contains all external functions, structs\r\n *         and events and errors for the Price Oracle.\r\n */\r\ninterface IPriceOracle {\r\n    /**\r\n     * @dev Emit an event whenever a token is set or updated.\r\n     *\r\n     * @param symbol The token symbol.\r\n     */\r\n    event TokenUpdated(string indexed symbol);\r\n\r\n    /**\r\n     * @dev Emit an event whenever a token pair's price is set\r\n     *      or updated.\r\n     *\r\n     * @param symbolA The symbol of the `from` token.\r\n     * @param symbolB The symbol of the `to`, or `in` token.\r\n     * @param price   The new price of the tokenA in tokenB.\r\n     */\r\n    event PairPriceUpdated(\r\n        string indexed symbolA,\r\n        string indexed symbolB,\r\n        uint256 price\r\n    );\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to set a token pair\r\n     *      price that is zero or less.\r\n     */\r\n    error InvalidPrice();\r\n\r\n    /**\r\n     * @dev Revert with an error when trying to call a function\r\n     *     that is only allowed by an admin.\r\n     */\r\n    error CallerIsNotAdmin();\r\n\r\n    function getPriceIn(\r\n        string memory tokenFrom,\r\n        string memory tokenIn,\r\n        uint256 price\r\n    ) external view returns (uint256);\r\n\r\n    function getPairPrice(\r\n        string memory symbolA,\r\n        string memory symbolB\r\n    ) external view returns (uint256, uint256);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}